group AsyncSupport;

header(interfaceName, taskDefs) ::= <<
#ifndef _$interfaceName;format="toUpper"$_ASYNC_SUPPORT_H_
#define _$interfaceName;format="toUpper"$_ASYNC_SUPPORT_H_

$doNotEditC()$

#include "client/AsyncTask.h"

$taskDefs; separator=";\n"$$if(taskDefs)$;$endif$

#endif // _$interfaceName$_ASYNC_SUPPORT_H_
>>

taskHeader(interfaceName, name) ::= <<

class $interfaceName$_$name$Task : public eProsima::DDSRPC::AsyncTask
{
    public:

        /// \brief The default constructor.
        $interfaceName$_$name$Task($interfaceName$_$name$ &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~$interfaceName$_$name$Task();
        
        virtual void execute(eProsima::DDSRPC::ReturnMessage);
        
        $interfaceName$_$name$& getObject();
        
        private:
        
           $interfaceName$_$name$ &m_obj;
}
>>

definition(interfaceName, taskDecls) ::= <<
#include "$interfaceName$Proxy.h"
#include "$interfaceName$AsyncSupport.h"
$ReqRepIncludes(interfaceName=interfaceName)$

$taskDecls; separator="\n"$
>>

taskDeclaration(interfaceName, name, outParams) ::= <<

$interfaceName$_$name$Task::$interfaceName$_$name$Task($interfaceName$_$name$ &obj,
   eProsima::DDSRPC::Client *client) : AsyncTask(client), m_obj(obj)
{
$reqrepCreation(type=name, reqrep="Reply", name="m_reply", void="void")$
}

$interfaceName$_$name$Task::~$interfaceName$_$name$Task()
{
$reqrepDestruction(type=name, reqrep="Reply", name="m_reply", void="void")$
}

$interfaceName$_$name$& $interfaceName$_$name$Task::getObject()
{
    return m_obj;
}

void $interfaceName$_$name$Task::execute(eProsima::DDSRPC::ReturnMessage message)
{  
    $outParams:{$varDecl(typeName = it.typeName, baseType = it.baseType, name = it.name, create="yes")$}; separator="\n"$ 
	
	if(message == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
	{
		$name$ReplyUtils::extractTypeData(($name$Reply*)m_reply$if(outParams)$, $endif$$extractParams(params=outParams)$);
		getObject().$name$($extractParams(params=outParams)$);
	}
	else
	{
	    getObject().error(message);
	}
}

>>
