/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "StructTestServer.h"
#include "StructTestRequestReplyPlugin.h"
#include "StructTestServerRemoteServiceSupport.h"

StructTestServer::StructTestServer(int domainId, unsigned int threadCount,
const char *qosLibrary, const char *qosProfile) : DDSCSServer(domainId, threadCount, qosLibrary, qosProfile)
{
    _impl = new StructTestImpl();
    
    this->setRemoteService(new duplicateServerRemoteService("duplicate", this,
                duplicateRequestUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                duplicateReplyUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                &StructTestServer::duplicate, getParticipant()));
    this->setRemoteService(new sumaServerRemoteService("suma", this,
                sumaRequestUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                sumaReplyUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                &StructTestServer::suma, getParticipant()));

}
StructTestServer::~StructTestServer()
{
    delete _impl;    
}

void StructTestServer::duplicate(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    StructTestServer *srv = (StructTestServer*)server;
    Envio *ev = EnvioPluginSupport_create_data();       
   
    Recepcion *duplicate_ret = RecepcionPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    duplicateReply *replyData = NULL;

    duplicateRequestUtils::extractTypeData((duplicateRequest*)requestData, *ev    );
                                         
    returnedValue = srv->_impl->duplicate(*ev    ,*duplicate_ret    );
           
    replyData = duplicateReplyUtils::createTypeData(*duplicate_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    EnvioPluginSupport_destroy_data(ev);    
    RecepcionPluginSupport_destroy_data(duplicate_ret);    
}
void StructTestServer::suma(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    StructTestServer *srv = (StructTestServer*)server;
    Envio *ev1 = EnvioPluginSupport_create_data();    
    Envio *ev2 = EnvioPluginSupport_create_data();       
   
    Recepcion *suma_ret = RecepcionPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    sumaReply *replyData = NULL;

    sumaRequestUtils::extractTypeData((sumaRequest*)requestData, *ev1    , *ev2    );
                                         
    returnedValue = srv->_impl->suma(*ev1    , *ev2    ,*suma_ret    );
           
    replyData = sumaReplyUtils::createTypeData(*suma_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    EnvioPluginSupport_destroy_data(ev1);    
    EnvioPluginSupport_destroy_data(ev2);    
    RecepcionPluginSupport_destroy_data(suma_ret);    
}
