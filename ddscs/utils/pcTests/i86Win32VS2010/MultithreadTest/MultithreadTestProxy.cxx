/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "MultithreadTestProxy.h"
#include "client/ClientRemoteService.h"
#include "MultithreadTestRequestReplyPlugin.h"


MultithreadTestProxy::MultithreadTestProxy(int domainId, unsigned int timeout
, const char *qosLibrary, const char *qosProfile) : DDSCSClient(domainId, qosLibrary, qosProfile)
{
    m_timeout = timeout;
    this->test_Service = new testClientRemoteService("test",
                                  testRequestUtils::registerType(getParticipant()),
    NULL,
    NULL,
                                  testReplyUtils::registerType(getParticipant()),
    NULL,
    NULL,
                                  getParticipant());

}

MultithreadTestProxy::~MultithreadTestProxy()
{
    delete test_Service;
}

unsigned int MultithreadTestProxy::getTimeout()
{
  return m_timeout;
}
 
 void MultithreadTestProxy::setTimeout(unsigned int millis)
 {
    m_timeout = millis;
 }

 
DDSCSMessages
 MultithreadTestProxy::test(Dato & dato1 ,Dato  &dato2, DDS_Long &test_ret) 
{
    DDSCSMessages  returnedValue ;    
    testRequest *instance = NULL;
    testReply *retInstance = testReplyTypeSupport::create_data();
    instance = testRequestUtils::createTypeData(dato1    );
    returnedValue = test_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            testReplyUtils::extractTypeData(retInstance, dato2    , test_ret    );
            //testReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    testReplyTypeSupport::delete_data(retInstance);
    testRequestTypeSupport::delete_data(instance);

    return returnedValue;
}