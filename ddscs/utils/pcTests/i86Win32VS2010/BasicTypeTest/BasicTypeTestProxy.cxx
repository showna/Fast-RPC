/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "BasicTypeTestProxy.h"
#include "client/ClientRemoteService.h"
#include "BasicTypeTestRequestReplyPlugin.h"


BasicTypeTestProxy::BasicTypeTestProxy(int domainId, unsigned int timeout
, const char *qosLibrary, const char *qosProfile) : DDSCSClient(domainId, qosLibrary, qosProfile)
{
    m_timeout = timeout;
    this->getOctet_Service = new getOctetClientRemoteService("getOctet",
                                  getOctetRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getOctetReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getChar_Service = new getCharClientRemoteService("getChar",
                                  getCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getWChar_Service = new getWCharClientRemoteService("getWChar",
                                  getWCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getWCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getShort_Service = new getShortClientRemoteService("getShort",
                                  getShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getUShort_Service = new getUShortClientRemoteService("getUShort",
                                  getUShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getUShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getLong_Service = new getLongClientRemoteService("getLong",
                                  getLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getULong_Service = new getULongClientRemoteService("getULong",
                                  getULongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getULongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getLLong_Service = new getLLongClientRemoteService("getLLong",
                                  getLLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getLLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getULLong_Service = new getULLongClientRemoteService("getULLong",
                                  getULLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getULLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getFloat_Service = new getFloatClientRemoteService("getFloat",
                                  getFloatRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getFloatReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getDouble_Service = new getDoubleClientRemoteService("getDouble",
                                  getDoubleRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getDoubleReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());
    this->getBoolean_Service = new getBooleanClientRemoteService("getBoolean",
                                  getBooleanRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getBooleanReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                                  getParticipant());

}

BasicTypeTestProxy::~BasicTypeTestProxy()
{
    delete getOctet_Service;
    delete getChar_Service;
    delete getWChar_Service;
    delete getShort_Service;
    delete getUShort_Service;
    delete getLong_Service;
    delete getULong_Service;
    delete getLLong_Service;
    delete getULLong_Service;
    delete getFloat_Service;
    delete getDouble_Service;
    delete getBoolean_Service;
}

unsigned int BasicTypeTestProxy::getTimeout()
{
  return m_timeout;
}
 
 void BasicTypeTestProxy::setTimeout(unsigned int millis)
 {
    m_timeout = millis;
 }

 
DDSCSMessages
 BasicTypeTestProxy::getOctet(DDS_Octet oc1 ,DDS_Octet &oc2,DDS_Octet &oc3, DDS_Octet &getOctet_ret) 
{
    DDSCSMessages  returnedValue ;    
    getOctetRequest *instance = NULL;
    getOctetReply *retInstance = getOctetReplyTypeSupport::create_data();
    instance = getOctetRequestUtils::createTypeData(oc1    ,oc2    );
    returnedValue = getOctet_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getOctetReplyUtils::extractTypeData(retInstance, oc2    ,oc3    , getOctet_ret    );
            //getOctetReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getOctetReplyTypeSupport::delete_data(retInstance);
    getOctetRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getChar(DDS_Char ch1 ,DDS_Char &ch2,DDS_Char &ch3, DDS_Char &getChar_ret) 
{
    DDSCSMessages  returnedValue ;    
    getCharRequest *instance = NULL;
    getCharReply *retInstance = getCharReplyTypeSupport::create_data();
    instance = getCharRequestUtils::createTypeData(ch1    ,ch2    );
    returnedValue = getChar_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getCharReplyUtils::extractTypeData(retInstance, ch2    ,ch3    , getChar_ret    );
            //getCharReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getCharReplyTypeSupport::delete_data(retInstance);
    getCharRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getWChar(DDS_Wchar wch1 ,DDS_Wchar &wch2,DDS_Wchar &wch3, DDS_Wchar &getWChar_ret) 
{
    DDSCSMessages  returnedValue ;    
    getWCharRequest *instance = NULL;
    getWCharReply *retInstance = getWCharReplyTypeSupport::create_data();
    instance = getWCharRequestUtils::createTypeData(wch1    ,wch2    );
    returnedValue = getWChar_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getWCharReplyUtils::extractTypeData(retInstance, wch2    ,wch3    , getWChar_ret    );
            //getWCharReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getWCharReplyTypeSupport::delete_data(retInstance);
    getWCharRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getShort(DDS_Short sh1 ,DDS_Short &sh2,DDS_Short &sh3, DDS_Short &getShort_ret) 
{
    DDSCSMessages  returnedValue ;    
    getShortRequest *instance = NULL;
    getShortReply *retInstance = getShortReplyTypeSupport::create_data();
    instance = getShortRequestUtils::createTypeData(sh1    ,sh2    );
    returnedValue = getShort_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getShortReplyUtils::extractTypeData(retInstance, sh2    ,sh3    , getShort_ret    );
            //getShortReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getShortReplyTypeSupport::delete_data(retInstance);
    getShortRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getUShort(DDS_UnsignedShort ush1 ,DDS_UnsignedShort &ush2,DDS_UnsignedShort &ush3, DDS_UnsignedShort &getUShort_ret) 
{
    DDSCSMessages  returnedValue ;    
    getUShortRequest *instance = NULL;
    getUShortReply *retInstance = getUShortReplyTypeSupport::create_data();
    instance = getUShortRequestUtils::createTypeData(ush1    ,ush2    );
    returnedValue = getUShort_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getUShortReplyUtils::extractTypeData(retInstance, ush2    ,ush3    , getUShort_ret    );
            //getUShortReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getUShortReplyTypeSupport::delete_data(retInstance);
    getUShortRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getLong(DDS_Long lo1 ,DDS_Long &lo2,DDS_Long &lo3, DDS_Long &getLong_ret) 
{
    DDSCSMessages  returnedValue ;    
    getLongRequest *instance = NULL;
    getLongReply *retInstance = getLongReplyTypeSupport::create_data();
    instance = getLongRequestUtils::createTypeData(lo1    ,lo2    );
    returnedValue = getLong_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getLongReplyUtils::extractTypeData(retInstance, lo2    ,lo3    , getLong_ret    );
            //getLongReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getLongReplyTypeSupport::delete_data(retInstance);
    getLongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getULong(DDS_UnsignedLong ulo1 ,DDS_UnsignedLong &ulo2,DDS_UnsignedLong &ulo3, DDS_UnsignedLong &getULong_ret) 
{
    DDSCSMessages  returnedValue ;    
    getULongRequest *instance = NULL;
    getULongReply *retInstance = getULongReplyTypeSupport::create_data();
    instance = getULongRequestUtils::createTypeData(ulo1    ,ulo2    );
    returnedValue = getULong_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getULongReplyUtils::extractTypeData(retInstance, ulo2    ,ulo3    , getULong_ret    );
            //getULongReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getULongReplyTypeSupport::delete_data(retInstance);
    getULongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getLLong(DDS_LongLong llo1 ,DDS_LongLong &llo2,DDS_LongLong &llo3, DDS_LongLong &getLLong_ret) 
{
    DDSCSMessages  returnedValue ;    
    getLLongRequest *instance = NULL;
    getLLongReply *retInstance = getLLongReplyTypeSupport::create_data();
    instance = getLLongRequestUtils::createTypeData(llo1    ,llo2    );
    returnedValue = getLLong_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getLLongReplyUtils::extractTypeData(retInstance, llo2    ,llo3    , getLLong_ret    );
            //getLLongReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getLLongReplyTypeSupport::delete_data(retInstance);
    getLLongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getULLong(DDS_UnsignedLongLong ullo1 ,DDS_UnsignedLongLong &ullo2,DDS_UnsignedLongLong &ullo3, DDS_UnsignedLongLong &getULLong_ret) 
{
    DDSCSMessages  returnedValue ;    
    getULLongRequest *instance = NULL;
    getULLongReply *retInstance = getULLongReplyTypeSupport::create_data();
    instance = getULLongRequestUtils::createTypeData(ullo1    ,ullo2    );
    returnedValue = getULLong_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getULLongReplyUtils::extractTypeData(retInstance, ullo2    ,ullo3    , getULLong_ret    );
            //getULLongReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getULLongReplyTypeSupport::delete_data(retInstance);
    getULLongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getFloat(DDS_Float fl1 ,DDS_Float &fl2,DDS_Float &fl3, DDS_Float &getFloat_ret) 
{
    DDSCSMessages  returnedValue ;    
    getFloatRequest *instance = NULL;
    getFloatReply *retInstance = getFloatReplyTypeSupport::create_data();
    instance = getFloatRequestUtils::createTypeData(fl1    ,fl2    );
    returnedValue = getFloat_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getFloatReplyUtils::extractTypeData(retInstance, fl2    ,fl3    , getFloat_ret    );
            //getFloatReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getFloatReplyTypeSupport::delete_data(retInstance);
    getFloatRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getDouble(DDS_Double do1 ,DDS_Double &do2,DDS_Double &do3, DDS_Double &getDouble_ret) 
{
    DDSCSMessages  returnedValue ;    
    getDoubleRequest *instance = NULL;
    getDoubleReply *retInstance = getDoubleReplyTypeSupport::create_data();
    instance = getDoubleRequestUtils::createTypeData(do1    ,do2    );
    returnedValue = getDouble_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getDoubleReplyUtils::extractTypeData(retInstance, do2    ,do3    , getDouble_ret    );
            //getDoubleReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getDoubleReplyTypeSupport::delete_data(retInstance);
    getDoubleRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 BasicTypeTestProxy::getBoolean(DDS_Boolean bo1 ,DDS_Boolean &bo2,DDS_Boolean &bo3, DDS_Boolean &getBoolean_ret) 
{
    DDSCSMessages  returnedValue ;    
    getBooleanRequest *instance = NULL;
    getBooleanReply *retInstance = getBooleanReplyTypeSupport::create_data();
    instance = getBooleanRequestUtils::createTypeData(bo1    ,bo2    );
    returnedValue = getBoolean_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getBooleanReplyUtils::extractTypeData(retInstance, bo2    ,bo3    , getBoolean_ret    );
            //getBooleanReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getBooleanReplyTypeSupport::delete_data(retInstance);
    getBooleanRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
