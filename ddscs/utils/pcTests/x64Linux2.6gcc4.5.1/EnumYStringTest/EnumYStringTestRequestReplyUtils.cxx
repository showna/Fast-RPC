/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "EnumYStringTestRequestReplyUtils.h"
#include "EnumYStringTestRequestReplyPlugin.h"


const char* getEnumRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getEnumRequestTypeSupport::get_type_name();

        if(getEnumRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getEnumRequest* getEnumRequestUtils::createTypeData(Valores v1, Valores v2)
{
    getEnumRequest* instance = getEnumRequestTypeSupport::create_data();

    instance->v1 = v1;
    instance->v2 = v2;
    
    
    return instance;
}

void getEnumRequestUtils::extractTypeData(getEnumRequest* data , Valores &v1, Valores &v2)
{
    v1 = data->v1;
    v2 = data->v2;
    
    
}


const char* getEnumReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getEnumReplyTypeSupport::get_type_name();

        if(getEnumReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getEnumReply* getEnumReplyUtils::createTypeData(Valores v2, Valores v3, Valores& returnedValue)
{
    getEnumReply* instance = getEnumReplyTypeSupport::create_data();

    instance->v2 = v2;
    instance->v3 = v3;
    
    instance->returnedValue = returnedValue;            
    return instance;
}

void getEnumReplyUtils::extractTypeData(getEnumReply* data , Valores &v2, Valores &v3, Valores& returnedValue)
{
    v2 = data->v2;
    v3 = data->v3;
    
    returnedValue = data->returnedValue;            
}


const char* getStringRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringRequestTypeSupport::get_type_name();

        if(getStringRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringRequest* getStringRequestUtils::createTypeData(char* s1, char* s2)
{
    getStringRequest* instance = getStringRequestTypeSupport::create_data();

    if(instance->s1 != NULL)
       DDS::String_free(instance->s1);
    instance->s1 = DDS::String_dup(s1);
    if(instance->s2 != NULL)
       DDS::String_free(instance->s2);
    instance->s2 = DDS::String_dup(s2);
    
    
    return instance;
}

void getStringRequestUtils::extractTypeData(getStringRequest* data , char* &s1, char* &s2)
{
    s1 = data->s1;
    s2 = DDS::String_dup(data->s2);
    
    
}


const char* getStringReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringReplyTypeSupport::get_type_name();

        if(getStringReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringReply* getStringReplyUtils::createTypeData(char* s2, char* s3, char*& returnedValue)
{
    getStringReply* instance = getStringReplyTypeSupport::create_data();

    if(instance->s2 != NULL)
       DDS::String_free(instance->s2);
    instance->s2 = DDS::String_dup(s2);
    if(instance->s3 != NULL)
       DDS::String_free(instance->s3);
    instance->s3 = DDS::String_dup(s3);
    
    if(instance->returnedValue != NULL)
       DDS::String_free(instance->returnedValue);
    instance->returnedValue = DDS::String_dup(returnedValue);            
    return instance;
}

void getStringReplyUtils::extractTypeData(getStringReply* data , char* &s2, char* &s3, char*& returnedValue)
{
    s2 = DDS::String_dup(data->s2);
    s3 = DDS::String_dup(data->s3);
    
    returnedValue = DDS::String_dup(data->returnedValue);            
}


const char* getStringBoundedRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringBoundedRequestTypeSupport::get_type_name();

        if(getStringBoundedRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringBoundedRequest* getStringBoundedRequestUtils::createTypeData(char* sb1, char* sb2)
{
    getStringBoundedRequest* instance = getStringBoundedRequestTypeSupport::create_data();

    if(instance->sb1 != NULL)
       DDS::String_free(instance->sb1);
    instance->sb1 = DDS::String_dup(sb1);
    if(instance->sb2 != NULL)
       DDS::String_free(instance->sb2);
    instance->sb2 = DDS::String_dup(sb2);
    
    
    return instance;
}

void getStringBoundedRequestUtils::extractTypeData(getStringBoundedRequest* data , char* &sb1, char* &sb2)
{
    sb1 = data->sb1;
    sb2 = DDS::String_dup(data->sb2);
    
    
}


const char* getStringBoundedReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringBoundedReplyTypeSupport::get_type_name();

        if(getStringBoundedReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringBoundedReply* getStringBoundedReplyUtils::createTypeData(char* sb2, char* sb3, char*& returnedValue)
{
    getStringBoundedReply* instance = getStringBoundedReplyTypeSupport::create_data();

    if(instance->sb2 != NULL)
       DDS::String_free(instance->sb2);
    instance->sb2 = DDS::String_dup(sb2);
    if(instance->sb3 != NULL)
       DDS::String_free(instance->sb3);
    instance->sb3 = DDS::String_dup(sb3);
    
    if(instance->returnedValue != NULL)
       DDS::String_free(instance->returnedValue);
    instance->returnedValue = DDS::String_dup(returnedValue);            
    return instance;
}

void getStringBoundedReplyUtils::extractTypeData(getStringBoundedReply* data , char* &sb2, char* &sb3, char*& returnedValue)
{
    sb2 = DDS::String_dup(data->sb2);
    sb3 = DDS::String_dup(data->sb3);
    
    returnedValue = DDS::String_dup(data->returnedValue);            
}

 