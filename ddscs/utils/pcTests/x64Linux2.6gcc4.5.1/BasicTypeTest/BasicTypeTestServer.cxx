/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "BasicTypeTestServer.h"
#include "BasicTypeTestRequestReplyPlugin.h"
#include "BasicTypeTestServerRPCSupport.h"

BasicTypeTestServer::BasicTypeTestServer(int domainId, unsigned int threadCount,
const char *qosLibrary, const char *qosProfile) : Server(domainId, threadCount, qosLibrary, qosProfile)
{
    _impl = new BasicTypeTestImpl();
    
    this->setRPC(new getOctetServerRPC("getOctet", this,
                getOctetRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getOctetReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getOctet, getParticipant()));
    this->setRPC(new getCharServerRPC("getChar", this,
                getCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getChar, getParticipant()));
    this->setRPC(new getWCharServerRPC("getWChar", this,
                getWCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getWCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getWChar, getParticipant()));
    this->setRPC(new getShortServerRPC("getShort", this,
                getShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getShort, getParticipant()));
    this->setRPC(new getUShortServerRPC("getUShort", this,
                getUShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getUShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getUShort, getParticipant()));
    this->setRPC(new getLongServerRPC("getLong", this,
                getLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getLong, getParticipant()));
    this->setRPC(new getULongServerRPC("getULong", this,
                getULongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getULongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getULong, getParticipant()));
    this->setRPC(new getLLongServerRPC("getLLong", this,
                getLLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getLLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getLLong, getParticipant()));
    this->setRPC(new getULLongServerRPC("getULLong", this,
                getULLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getULLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getULLong, getParticipant()));
    this->setRPC(new getFloatServerRPC("getFloat", this,
                getFloatRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getFloatReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getFloat, getParticipant()));
    this->setRPC(new getDoubleServerRPC("getDouble", this,
                getDoubleRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getDoubleReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getDouble, getParticipant()));
    this->setRPC(new getBooleanServerRPC("getBoolean", this,
                getBooleanRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getBooleanReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getBoolean, getParticipant()));

}
BasicTypeTestServer::~BasicTypeTestServer()
{
    delete _impl;    
}

void BasicTypeTestServer::getOctet(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Octet  oc1 ;       
    DDS_Octet  oc2 ;       
    DDS_Octet  oc3 ;    
    DDS_Octet  getOctet_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getOctetReply *replyData = NULL;

    getOctetRequestUtils::extractTypeData((getOctetRequest*)requestData, oc1  ,oc2  );
                                         
    returnedValue = srv->_impl->getOctet(oc1  ,oc2  ,oc3  , getOctet_ret  );
           
    replyData = getOctetReplyUtils::createTypeData(oc2  ,oc3  , getOctet_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getOctetReplyTypeSupport::delete_data(replyData);
    getOctetRequestTypeSupport::delete_data((getOctetRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getChar(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Char  ch1 ;       
    DDS_Char  ch2 ;       
    DDS_Char  ch3 ;    
    DDS_Char  getChar_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getCharReply *replyData = NULL;

    getCharRequestUtils::extractTypeData((getCharRequest*)requestData, ch1  ,ch2  );
                                         
    returnedValue = srv->_impl->getChar(ch1  ,ch2  ,ch3  , getChar_ret  );
           
    replyData = getCharReplyUtils::createTypeData(ch2  ,ch3  , getChar_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getCharReplyTypeSupport::delete_data(replyData);
    getCharRequestTypeSupport::delete_data((getCharRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getWChar(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Wchar  wch1 ;       
    DDS_Wchar  wch2 ;       
    DDS_Wchar  wch3 ;    
    DDS_Wchar  getWChar_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getWCharReply *replyData = NULL;

    getWCharRequestUtils::extractTypeData((getWCharRequest*)requestData, wch1  ,wch2  );
                                         
    returnedValue = srv->_impl->getWChar(wch1  ,wch2  ,wch3  , getWChar_ret  );
           
    replyData = getWCharReplyUtils::createTypeData(wch2  ,wch3  , getWChar_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getWCharReplyTypeSupport::delete_data(replyData);
    getWCharRequestTypeSupport::delete_data((getWCharRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getShort(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Short  sh1 ;       
    DDS_Short  sh2 ;       
    DDS_Short  sh3 ;    
    DDS_Short  getShort_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getShortReply *replyData = NULL;

    getShortRequestUtils::extractTypeData((getShortRequest*)requestData, sh1  ,sh2  );
                                         
    returnedValue = srv->_impl->getShort(sh1  ,sh2  ,sh3  , getShort_ret  );
           
    replyData = getShortReplyUtils::createTypeData(sh2  ,sh3  , getShort_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getShortReplyTypeSupport::delete_data(replyData);
    getShortRequestTypeSupport::delete_data((getShortRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getUShort(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedShort  ush1 ;       
    DDS_UnsignedShort  ush2 ;       
    DDS_UnsignedShort  ush3 ;    
    DDS_UnsignedShort  getUShort_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getUShortReply *replyData = NULL;

    getUShortRequestUtils::extractTypeData((getUShortRequest*)requestData, ush1  ,ush2  );
                                         
    returnedValue = srv->_impl->getUShort(ush1  ,ush2  ,ush3  , getUShort_ret  );
           
    replyData = getUShortReplyUtils::createTypeData(ush2  ,ush3  , getUShort_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getUShortReplyTypeSupport::delete_data(replyData);
    getUShortRequestTypeSupport::delete_data((getUShortRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getLong(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Long  lo1 ;       
    DDS_Long  lo2 ;       
    DDS_Long  lo3 ;    
    DDS_Long  getLong_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getLongReply *replyData = NULL;

    getLongRequestUtils::extractTypeData((getLongRequest*)requestData, lo1  ,lo2  );
                                         
    returnedValue = srv->_impl->getLong(lo1  ,lo2  ,lo3  , getLong_ret  );
           
    replyData = getLongReplyUtils::createTypeData(lo2  ,lo3  , getLong_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getLongReplyTypeSupport::delete_data(replyData);
    getLongRequestTypeSupport::delete_data((getLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getULong(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedLong  ulo1 ;       
    DDS_UnsignedLong  ulo2 ;       
    DDS_UnsignedLong  ulo3 ;    
    DDS_UnsignedLong  getULong_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getULongReply *replyData = NULL;

    getULongRequestUtils::extractTypeData((getULongRequest*)requestData, ulo1  ,ulo2  );
                                         
    returnedValue = srv->_impl->getULong(ulo1  ,ulo2  ,ulo3  , getULong_ret  );
           
    replyData = getULongReplyUtils::createTypeData(ulo2  ,ulo3  , getULong_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getULongReplyTypeSupport::delete_data(replyData);
    getULongRequestTypeSupport::delete_data((getULongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getLLong(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_LongLong  llo1 ;       
    DDS_LongLong  llo2 ;       
    DDS_LongLong  llo3 ;    
    DDS_LongLong  getLLong_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getLLongReply *replyData = NULL;

    getLLongRequestUtils::extractTypeData((getLLongRequest*)requestData, llo1  ,llo2  );
                                         
    returnedValue = srv->_impl->getLLong(llo1  ,llo2  ,llo3  , getLLong_ret  );
           
    replyData = getLLongReplyUtils::createTypeData(llo2  ,llo3  , getLLong_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getLLongReplyTypeSupport::delete_data(replyData);
    getLLongRequestTypeSupport::delete_data((getLLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getULLong(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedLongLong  ullo1 ;       
    DDS_UnsignedLongLong  ullo2 ;       
    DDS_UnsignedLongLong  ullo3 ;    
    DDS_UnsignedLongLong  getULLong_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getULLongReply *replyData = NULL;

    getULLongRequestUtils::extractTypeData((getULLongRequest*)requestData, ullo1  ,ullo2  );
                                         
    returnedValue = srv->_impl->getULLong(ullo1  ,ullo2  ,ullo3  , getULLong_ret  );
           
    replyData = getULLongReplyUtils::createTypeData(ullo2  ,ullo3  , getULLong_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getULLongReplyTypeSupport::delete_data(replyData);
    getULLongRequestTypeSupport::delete_data((getULLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getFloat(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Float  fl1 ;       
    DDS_Float  fl2 ;       
    DDS_Float  fl3 ;    
    DDS_Float  getFloat_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getFloatReply *replyData = NULL;

    getFloatRequestUtils::extractTypeData((getFloatRequest*)requestData, fl1  ,fl2  );
                                         
    returnedValue = srv->_impl->getFloat(fl1  ,fl2  ,fl3  , getFloat_ret  );
           
    replyData = getFloatReplyUtils::createTypeData(fl2  ,fl3  , getFloat_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getFloatReplyTypeSupport::delete_data(replyData);
    getFloatRequestTypeSupport::delete_data((getFloatRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getDouble(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Double  do1 ;       
    DDS_Double  do2 ;       
    DDS_Double  do3 ;    
    DDS_Double  getDouble_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getDoubleReply *replyData = NULL;

    getDoubleRequestUtils::extractTypeData((getDoubleRequest*)requestData, do1  ,do2  );
                                         
    returnedValue = srv->_impl->getDouble(do1  ,do2  ,do3  , getDouble_ret  );
           
    replyData = getDoubleReplyUtils::createTypeData(do2  ,do3  , getDouble_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getDoubleReplyTypeSupport::delete_data(replyData);
    getDoubleRequestTypeSupport::delete_data((getDoubleRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getBoolean(DDSRPC::Server *server, void *requestData, DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Boolean  bo1 ;       
    DDS_Boolean  bo2 ;       
    DDS_Boolean  bo3 ;    
    DDS_Boolean  getBoolean_ret ;       
    DDSRPC::ReturnMessage  returnedValue ;        
    getBooleanReply *replyData = NULL;

    getBooleanRequestUtils::extractTypeData((getBooleanRequest*)requestData, bo1  ,bo2  );
                                         
    returnedValue = srv->_impl->getBoolean(bo1  ,bo2  ,bo3  , getBoolean_ret  );
           
    replyData = getBooleanReplyUtils::createTypeData(bo2  ,bo3  , getBoolean_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getBooleanReplyTypeSupport::delete_data(replyData);
    getBooleanRequestTypeSupport::delete_data((getBooleanRequest*)requestData);
    
        
        
        
}