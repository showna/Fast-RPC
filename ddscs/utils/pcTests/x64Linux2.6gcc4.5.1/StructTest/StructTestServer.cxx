/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "StructTestServer.h"
#include "StructTestRequestReplyPlugin.h"
#include "StructTestServerRPCSupport.h"

StructTestServer::StructTestServer(int domainId, unsigned int threadCount,
const char *qosLibrary, const char *qosProfile) : Server(domainId, threadCount, qosLibrary, qosProfile)
{
    _impl = new StructTestImpl();
    
    this->setRPC(new duplicateServerRPC("duplicate", this,
                duplicateRequestUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                duplicateReplyUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                &StructTestServer::duplicate, getParticipant()));
    this->setRPC(new sumaServerRPC("suma", this,
                sumaRequestUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                sumaReplyUtils::registerType(getParticipant()),
    "StructTest_Library",
    "StructTest_Profile",
                &StructTestServer::suma, getParticipant()));

}
StructTestServer::~StructTestServer()
{
    delete _impl;    
}

void StructTestServer::duplicate(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServer *srv = (StructTestServer*)server;
    Envio *ev = NULL;       
   
    Recepcion *duplicate_ret = RecepcionPluginSupport_create_data();       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    duplicateReply *replyData = NULL;

    duplicateRequestUtils::extractTypeData((duplicateRequest*)requestData, ev  );
                                         
    returnedValue = srv->_impl->duplicate(ev  ,duplicate_ret  );
           
    replyData = duplicateReplyUtils::createTypeData(duplicate_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    duplicateReplyTypeSupport::delete_data(replyData);
    duplicateRequestTypeSupport::delete_data((duplicateRequest*)requestData);
    
    RecepcionPluginSupport_destroy_data(duplicate_ret);    
}
void StructTestServer::suma(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServer *srv = (StructTestServer*)server;
    Envio *ev1 = NULL;    
    Envio *ev2 = NULL;       
   
    Recepcion *suma_ret = RecepcionPluginSupport_create_data();       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    sumaReply *replyData = NULL;

    sumaRequestUtils::extractTypeData((sumaRequest*)requestData, ev1  , ev2  );
                                         
    returnedValue = srv->_impl->suma(ev1  , ev2  ,suma_ret  );
           
    replyData = sumaReplyUtils::createTypeData(suma_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    sumaReplyTypeSupport::delete_data(replyData);
    sumaRequestTypeSupport::delete_data((sumaRequest*)requestData);
    
    RecepcionPluginSupport_destroy_data(suma_ret);    
}