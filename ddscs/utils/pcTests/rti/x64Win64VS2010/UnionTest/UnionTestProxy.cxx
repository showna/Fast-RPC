/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "UnionTestProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "UnionTestRequestReplyPlugin.h"
#include "UnionTestAsyncSupport.h"


UnionTestProxyH::UnionTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(transport, domainId, timeout)
{
    this->getEmpleado_Service = new getEmpleadoClientRPC("getEmpleado",
                                  getEmpleadoRequestUtils::registerType(getParticipant()),
                                  getEmpleadoReplyUtils::registerType(getParticipant()),
                                  this);

}

UnionTestProxyH::~UnionTestProxyH()
{
    delete getEmpleado_Service;
}

 
eProsima::DDSRPC::ReturnMessage UnionTestProxyH::getEmpleado(/*in*/ const Empleado* em1, /*inout*/ Empleado* &em2, /*out*/ Empleado* &em3, /*out*/ Empleado* &getEmpleado_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getEmpleadoRequest *instance = NULL;
    getEmpleadoReply* retInstance = getEmpleadoReplyTypeSupport::create_data();

    instance = getEmpleadoRequestUtils::createTypeData(em1  , em2  );
    returnedValue = getEmpleado_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getEmpleadoReplyUtils::extractTypeData(retInstance, em2  , em3  , getEmpleado_ret  );
            //getEmpleadoReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getEmpleadoReplyTypeSupport::delete_data(retInstance);
    getEmpleadoRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

 
eProsima::DDSRPC::ReturnMessage UnionTestProxyH::getEmpleado_async(UnionTest_getEmpleado &obj, /*in*/ const Empleado* em1, /*inout*/ const Empleado* em2) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getEmpleadoRequest *instance = NULL;
    UnionTest_getEmpleadoTask *task = NULL;
    instance = getEmpleadoRequestUtils::createTypeData(em1  , em2  );
    task = new UnionTest_getEmpleadoTask(obj, this);
    returnedValue = getEmpleado_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    getEmpleadoRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

UnionTestProxy::UnionTestProxy(int domainId, long timeout) :
    UnionTestProxyH(new eProsima::DDSRPC::UDPTransport(), domainId, timeout)
{
}

UnionTestProxy::~UnionTestProxy()
{
}

UnionTestWANProxy::UnionTestWANProxy(const char *to_connect, int domainId, long timeout) :
    UnionTestProxyH(new eProsima::DDSRPC::TCPTransport(to_connect), domainId, timeout)
{
}

UnionTestWANProxy::~UnionTestWANProxy()
{
}