/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "UnionTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "UnionTestRequestReplyPlugin.h"

#include "UnionTestServerRPCSupport.h"

UnionTestServerH::UnionTestServerH(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new UnionTestServerImpl();
    
    this->setRPC(new getEmpleadoServerRPC("getEmpleado", this,
                getEmpleadoRequestUtils::registerType(getParticipant()),
                getEmpleadoReplyUtils::registerType(getParticipant()),
                &UnionTestServerH::getEmpleado, getParticipant()));

}
UnionTestServerH::~UnionTestServerH()
{
    delete _impl;    
}

void UnionTestServerH::getEmpleado(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    UnionTestServerH *srv = dynamic_cast<UnionTestServerH*>(server);
    Empleado *em1 = NULL;    
    Empleado *em2 = EmpleadoPluginSupport_create_data();    
    Empleado *em3 = EmpleadoPluginSupport_create_data();    
    Empleado *getEmpleado_ret = EmpleadoPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getEmpleadoReply *replyData = NULL;

    getEmpleadoRequestUtils::extractTypeData((getEmpleadoRequest*)requestData, em1  , em2  );

returnedValue = srv->_impl->getEmpleado(em1  , em2  , em3  , getEmpleado_ret  );

    replyData = getEmpleadoReplyUtils::createTypeData(em2  , em3  , getEmpleado_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getEmpleadoReplyTypeSupport::delete_data(replyData);
    
    getEmpleadoRequestTypeSupport::delete_data((getEmpleadoRequest*)requestData);
    
    EmpleadoPluginSupport_destroy_data(em2);    
    EmpleadoPluginSupport_destroy_data(em3);    
    EmpleadoPluginSupport_destroy_data(getEmpleado_ret);    
}

UnionTestServer::UnionTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    UnionTestServerH(strategy, new eProsima::DDSRPC::UDPTransport(), domainId)
{
}
UnionTestServer::~UnionTestServer()
{   
}

UnionTestWANServer::UnionTestWANServer(eProsima::DDSRPC::ServerStrategy *strategy,
    const char *public_address, const char *server_bind_port,
    int domainId) :
    UnionTestServerH(strategy, new eProsima::DDSRPC::TCPTransport(public_address, server_bind_port), domainId)
{
}
UnionTestWANServer::~UnionTestWANServer()
{   
}