/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "ServerExceptionProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "ServerExceptionRequestReplyPlugin.h"
#include "ServerExceptionAsyncSupport.h"
#include "exceptions/Exceptions.h"

ServerExceptionProxy::ServerExceptionProxy(int domainId, long timeout) :
    Client(NULL, domainId, timeout)
{
    createRPCs();
}

ServerExceptionProxy::ServerExceptionProxy(eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(transport, domainId, timeout)
{
    createRPCs();
}

ServerExceptionProxy::~ServerExceptionProxy()
{
    delete sendException_Service;
    delete sendExceptionTwo_Service;
    delete sendExceptionThree_Service;
}

void ServerExceptionProxy::createRPCs()
{
    this->sendException_Service = new sendExceptionClientRPC("sendException",
                                  sendExceptionRequestUtils::registerType(getParticipant()),
                                  sendExceptionReplyUtils::registerType(getParticipant()),
                                  this);
    this->sendExceptionTwo_Service = new sendExceptionTwoClientRPC("sendExceptionTwo",
                                  sendExceptionTwoRequestUtils::registerType(getParticipant()),
                                  sendExceptionTwoReplyUtils::registerType(getParticipant()),
                                  this);
    this->sendExceptionThree_Service = new sendExceptionThreeClientRPC("sendExceptionThree",
                                  sendExceptionThreeRequestUtils::registerType(getParticipant()),
                                  sendExceptionThreeReplyUtils::registerType(getParticipant()),
                                  this);

}

 
void ServerExceptionProxy::sendException() 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    sendExceptionRequest instance;
    sendExceptionReply retInstance;

    sendExceptionReply_initialize(&retInstance);    
    sendExceptionRequestUtils::setTypeData(instance);
    retcode = sendException_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        sendExceptionReplyUtils::extractTypeData(retInstance, retcode);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

}
 
char* ServerExceptionProxy::sendExceptionTwo(/*in*/ char* message, /*inout*/ char*& message2, /*out*/ char*& message3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    char*  sendExceptionTwo_ret = NULL;    
    sendExceptionTwoRequest instance;
    sendExceptionTwoReply retInstance;

    sendExceptionTwoReply_initialize(&retInstance);    
    sendExceptionTwoRequestUtils::setTypeData(instance, message, message2);
    retcode = sendExceptionTwo_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        sendExceptionTwoReplyUtils::extractTypeData(retInstance, retcode, message2, message3, sendExceptionTwo_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

    return sendExceptionTwo_ret;
}
 
Estructura ServerExceptionProxy::sendExceptionThree(/*in*/ const Estructura& es, /*inout*/ Estructura& es2, /*out*/ Estructura& es3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    Estructura sendExceptionThree_ret;
        
    sendExceptionThreeRequest instance;
    sendExceptionThreeReply retInstance;

    sendExceptionThreeReply_initialize(&retInstance);    
    sendExceptionThreeRequestUtils::setTypeData(instance, es, es2);
    retcode = sendExceptionThree_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        sendExceptionThreeReplyUtils::extractTypeData(retInstance, retcode, es2, es3, sendExceptionThree_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

    return sendExceptionThree_ret;
}

 
void ServerExceptionProxy::sendException_async(ServerException_sendException &obj) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    sendExceptionRequest instance;
    ServerException_sendExceptionTask *task = NULL;
    sendExceptionRequestUtils::setTypeData(instance);
    task = new ServerException_sendExceptionTask(obj, this);
    retcode = sendException_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void ServerExceptionProxy::sendExceptionTwo_async(ServerException_sendExceptionTwo &obj, /*in*/ char* message, /*inout*/ char* message2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    sendExceptionTwoRequest instance;
    ServerException_sendExceptionTwoTask *task = NULL;
    sendExceptionTwoRequestUtils::setTypeData(instance, message, message2);
    task = new ServerException_sendExceptionTwoTask(obj, this);
    retcode = sendExceptionTwo_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void ServerExceptionProxy::sendExceptionThree_async(ServerException_sendExceptionThree &obj, /*in*/ const Estructura& es, /*inout*/ const Estructura& es2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    sendExceptionThreeRequest instance;
    ServerException_sendExceptionThreeTask *task = NULL;
    sendExceptionThreeRequestUtils::setTypeData(instance, es, es2);
    task = new ServerException_sendExceptionThreeTask(obj, this);
    retcode = sendExceptionThree_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}