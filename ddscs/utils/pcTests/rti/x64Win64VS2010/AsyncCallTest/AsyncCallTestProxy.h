#ifndef _AsyncCallTest_PROXY_H_
#define _AsyncCallTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "AsyncCallTestRequestReplyUtils.h"
#include "AsyncCallTestClientRPCSupport.h"
#include "exceptions/Exception.h"

class AsyncCallTest_getLongCallbackHandler
{
    public:
        virtual void getLong(/*inout*/ DDS_Long lo2, /*out*/ DDS_Long lo3, /*out*/ DDS_Long getLong_ret) = 0;
   
        virtual void on_exception(const eProsima::DDSRPC::Exception &ex) = 0;
};
class AsyncCallTest_getBooleanCallbackHandler
{
    public:
        virtual void getBoolean(/*inout*/ DDS_Boolean bo2, /*out*/ DDS_Boolean bo3, /*out*/ DDS_Boolean getBoolean_ret) = 0;
   
        virtual void on_exception(const eProsima::DDSRPC::Exception &ex) = 0;
};
class AsyncCallTest_getStringCallbackHandler
{
    public:
        virtual void getString(/*inout*/ char* s2, /*out*/ char* s3, /*out*/ char* getString_ret) = 0;
   
        virtual void on_exception(const eProsima::DDSRPC::Exception &ex) = 0;
};
class AsyncCallTest_duplicateCallbackHandler
{
    public:
        virtual void duplicate(/*out*/ const Structure& duplicate_ret) = 0;
   
        virtual void on_exception(const eProsima::DDSRPC::Exception &ex) = 0;
};

/**
 * \brief This class implements a specific server's proxy for the defined interface by user.
 */
class AsyncCallTestProxy : public eProsima::DDSRPC::Client
{
    public:
    
        /**
         * \brief Default constructor. The server's proxy will use the default eProsima::DDSRPC::UDPTransport.
         *
         * \param remoteServiceName The name of the remote service that the proxy will offer.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        AsyncCallTestProxy(std::string remoteServiceName, int domainId = 0, long timeout = 10000);

        /**
         * \brief This constructor sets the transport that will be used by the server's proxy.
         *
         * \param remoteServiceName The name of the remote service that the proxy will offer.
         * \param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destrcutor. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        AsyncCallTestProxy(std::string remoteServiceName, eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~AsyncCallTestProxy();
        
         
        DDS_Long getLong(/*in*/ DDS_Long lo1, /*inout*/ DDS_Long& lo2, /*out*/ DDS_Long& lo3);
         
        DDS_Boolean getBoolean(/*in*/ DDS_Boolean bo1, /*inout*/ DDS_Boolean& bo2, /*out*/ DDS_Boolean& bo3);
         
        char* getString(/*in*/ char* s1, /*inout*/ char*& s2, /*out*/ char*& s3);
         
        Structure duplicate(/*in*/ const Structure& ev);
        
         
        void getLong_async(AsyncCallTest_getLongCallbackHandler &obj, /*in*/ DDS_Long lo1, /*inout*/ DDS_Long lo2);
         
        void getBoolean_async(AsyncCallTest_getBooleanCallbackHandler &obj, /*in*/ DDS_Boolean bo1, /*inout*/ DDS_Boolean bo2);
         
        void getString_async(AsyncCallTest_getStringCallbackHandler &obj, /*in*/ char* s1, /*inout*/ char* s2);
         
        void duplicate_async(AsyncCallTest_duplicateCallbackHandler &obj, /*in*/ const Structure& ev);
        
    private:
        /**
         * \brief This function creates all RPC endpoints for each remote procedure.
         */
        void createRPCs();
        
        eProsima::DDSRPC::ClientRPC *getLong_Service;
        eProsima::DDSRPC::ClientRPC *getBoolean_Service;
        eProsima::DDSRPC::ClientRPC *getString_Service;
        eProsima::DDSRPC::ClientRPC *duplicate_Service; 
};

#endif // _AsyncCallTest_PROXY_H_