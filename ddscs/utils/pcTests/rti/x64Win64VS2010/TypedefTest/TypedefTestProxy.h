#ifndef _TypedefTest_PROXY_H_
#define _TypedefTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "TypedefTestRequestReplyUtils.h"
#include "TypedefTestClientRPCSupport.h"

class TypedefTest_getLargo
{
    public:
        virtual void getLargo(/*out*/ largo l2, /*out*/ largo getLargo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getLarguisimo
{
    public:
        virtual void getLarguisimo(/*out*/ larguisimo ll2, /*out*/ larguisimo getLarguisimo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getDatosDef
{
    public:
        virtual void getDatosDef(/*out*/ const DatosDef& d2, /*out*/ const DatosDef& getDatosDef_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getDatosDefondo
{
    public:
        virtual void getDatosDefondo(/*out*/ const DatosDefondo& dd2, /*out*/ const DatosDefondo& getDatosDefondo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getCadena
{
    public:
        virtual void getCadena(/*out*/ cadena c2, /*out*/ cadena getCadena_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getCorrea
{
    public:
        virtual void getCorrea(/*out*/ correa cc2, /*out*/ correa getCorrea_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific server's proxy for the defined interface by user.
 */
class TypedefTestProxy : public eProsima::DDSRPC::Client
{
    public:
    
        /**
         * \brief Default constructor. The server's proxy will use the default eProsima::DDSRPC::UDPTransport.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        TypedefTestProxy(int domainId = 0, long timeout = 10000);

        /**
         * \brief This constructor sets the transport that will be used by the server's proxy.
         *
         * \param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destrcutor. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        TypedefTestProxy(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~TypedefTestProxy();
        
         
        largo getLargo(/*in*/ largo l1, /*out*/ largo& l2);
         
        larguisimo getLarguisimo(/*in*/ larguisimo ll1, /*out*/ larguisimo& ll2);
         
        DatosDef getDatosDef(/*in*/ const DatosDef& d1, /*out*/ DatosDef& d2);
         
        DatosDefondo getDatosDefondo(/*in*/ const DatosDefondo& dd1, /*out*/ DatosDefondo& dd2);
         
        cadena getCadena(/*in*/ cadena c1, /*out*/ cadena& c2);
         
        correa getCorrea(/*in*/ correa cc1, /*out*/ correa& cc2);
        
         
        void getLargo_async(TypedefTest_getLargo &obj, /*in*/ largo l1);
         
        void getLarguisimo_async(TypedefTest_getLarguisimo &obj, /*in*/ larguisimo ll1);
         
        void getDatosDef_async(TypedefTest_getDatosDef &obj, /*in*/ const DatosDef& d1);
         
        void getDatosDefondo_async(TypedefTest_getDatosDefondo &obj, /*in*/ const DatosDefondo& dd1);
         
        void getCadena_async(TypedefTest_getCadena &obj, /*in*/ cadena c1);
         
        void getCorrea_async(TypedefTest_getCorrea &obj, /*in*/ correa cc1);
        
    private:
        /**
         * \brief This function creates all RPC endpoints for each remote procedure.
         */
        void createRPCs();
        
        eProsima::DDSRPC::ClientRPC *getLargo_Service;
        eProsima::DDSRPC::ClientRPC *getLarguisimo_Service;
        eProsima::DDSRPC::ClientRPC *getDatosDef_Service;
        eProsima::DDSRPC::ClientRPC *getDatosDefondo_Service;
        eProsima::DDSRPC::ClientRPC *getCadena_Service;
        eProsima::DDSRPC::ClientRPC *getCorrea_Service; 
};

#endif // _TypedefTest_PROXY_H_