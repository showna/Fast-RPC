#ifndef _TypedefTest_PROXY_H_
#define _TypedefTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "TypedefTestRequestReplyUtils.h"
#include "TypedefTestClientRPCSupport.h"

class TypedefTest_getLargo
{
    public:
        virtual void getLargo(/*out*/ const largo l2, /*out*/ const largo getLargo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getLarguisimo
{
    public:
        virtual void getLarguisimo(/*out*/ const larguisimo ll2, /*out*/ const larguisimo getLarguisimo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getDatosDef
{
    public:
        virtual void getDatosDef(/*out*/ const DatosDef* d2, /*out*/ const DatosDef* getDatosDef_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getDatosDefondo
{
    public:
        virtual void getDatosDefondo(/*out*/ const DatosDefondo* dd2, /*out*/ const DatosDefondo* getDatosDefondo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getCadena
{
    public:
        virtual void getCadena(/*out*/ const cadena c2, /*out*/ const cadena getCadena_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class TypedefTest_getCorrea
{
    public:
        virtual void getCorrea(/*out*/ const correa cc2, /*out*/ const correa getCorrea_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 */
class TypedefTestProxyH : public eProsima::DDSRPC::Client
{
    public:

        /**
         * \brief Default constructor. The client's proxy has to know what network transport
         *        it should use.
         *
         * \param transport The network transport that client's proxy has to use. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        TypedefTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~TypedefTestProxyH();
        
         
        eProsima::DDSRPC::ReturnMessage getLargo(/*in*/ const largo l1, /*out*/ largo &l2, /*out*/ largo &getLargo_ret);
         
        eProsima::DDSRPC::ReturnMessage getLarguisimo(/*in*/ const larguisimo ll1, /*out*/ larguisimo &ll2, /*out*/ larguisimo &getLarguisimo_ret);
         
        eProsima::DDSRPC::ReturnMessage getDatosDef(/*in*/ const DatosDef* d1, /*out*/ DatosDef* &d2, /*out*/ DatosDef* &getDatosDef_ret);
         
        eProsima::DDSRPC::ReturnMessage getDatosDefondo(/*in*/ const DatosDefondo* dd1, /*out*/ DatosDefondo* &dd2, /*out*/ DatosDefondo* &getDatosDefondo_ret);
         
        eProsima::DDSRPC::ReturnMessage getCadena(/*in*/ const cadena c1, /*out*/ cadena &c2, /*out*/ cadena &getCadena_ret);
         
        eProsima::DDSRPC::ReturnMessage getCorrea(/*in*/ const correa cc1, /*out*/ correa &cc2, /*out*/ correa &getCorrea_ret);
        
         
        eProsima::DDSRPC::ReturnMessage getLargo_async(TypedefTest_getLargo &obj, /*in*/ const largo l1);
         
        eProsima::DDSRPC::ReturnMessage getLarguisimo_async(TypedefTest_getLarguisimo &obj, /*in*/ const larguisimo ll1);
         
        eProsima::DDSRPC::ReturnMessage getDatosDef_async(TypedefTest_getDatosDef &obj, /*in*/ const DatosDef* d1);
         
        eProsima::DDSRPC::ReturnMessage getDatosDefondo_async(TypedefTest_getDatosDefondo &obj, /*in*/ const DatosDefondo* dd1);
         
        eProsima::DDSRPC::ReturnMessage getCadena_async(TypedefTest_getCadena &obj, /*in*/ const cadena c1);
         
        eProsima::DDSRPC::ReturnMessage getCorrea_async(TypedefTest_getCorrea &obj, /*in*/ const correa cc1);
        
    private:
        eProsima::DDSRPC::ClientRPC *getLargo_Service;
        eProsima::DDSRPC::ClientRPC *getLarguisimo_Service;
        eProsima::DDSRPC::ClientRPC *getDatosDef_Service;
        eProsima::DDSRPC::ClientRPC *getDatosDefondo_Service;
        eProsima::DDSRPC::ClientRPC *getCadena_Service;
        eProsima::DDSRPC::ClientRPC *getCorrea_Service; 
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the UDPv4 transport.
 */
class TypedefTestProxy : public TypedefTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        TypedefTestProxy(int domainId = 0, long timeout = 10000);
        
        virtual ~TypedefTestProxy();
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the TCPv4 transport.
 */
class TypedefTestWANProxy : public TypedefTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param to_connect Public address and port for the server. By example: "218.18.3.133:7600"
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        TypedefTestWANProxy(const char *to_connect, int domainId = 0, long timeout = 10000);
        
        virtual ~TypedefTestWANProxy();
};

#endif // _TypedefTest_PROXY_H_