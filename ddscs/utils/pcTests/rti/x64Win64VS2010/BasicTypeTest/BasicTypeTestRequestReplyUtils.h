
#ifndef _BasicTypeTest_REQUEST_REPLY_UTILS_H_
#define _BasicTypeTest_REQUEST_REPLY_UTILS_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "BasicTypeTestRequestReplySupport.h"

#include "ndds_namespace_cpp.h"


class getOctetRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getOctetRequest* createTypeData(/*in*/ const DDS_Octet oc1, /*inout*/ const DDS_Octet oc2);
        
        static void extractTypeData(getOctetRequest* data, /*in*/ DDS_Octet &oc1, /*inout*/ DDS_Octet &oc2);
};


class getOctetReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getOctetReply* createTypeData(/*inout*/ const DDS_Octet oc2, /*out*/ const DDS_Octet oc3, /*out*/ const DDS_Octet getOctet_ret);
        
        static void extractTypeData(getOctetReply* data, /*inout*/ DDS_Octet &oc2, /*out*/ DDS_Octet &oc3, /*out*/ DDS_Octet &getOctet_ret);
};


class getCharRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getCharRequest* createTypeData(/*in*/ const DDS_Char ch1, /*inout*/ const DDS_Char ch2);
        
        static void extractTypeData(getCharRequest* data, /*in*/ DDS_Char &ch1, /*inout*/ DDS_Char &ch2);
};


class getCharReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getCharReply* createTypeData(/*inout*/ const DDS_Char ch2, /*out*/ const DDS_Char ch3, /*out*/ const DDS_Char getChar_ret);
        
        static void extractTypeData(getCharReply* data, /*inout*/ DDS_Char &ch2, /*out*/ DDS_Char &ch3, /*out*/ DDS_Char &getChar_ret);
};


class getWCharRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getWCharRequest* createTypeData(/*in*/ const DDS_Wchar wch1, /*inout*/ const DDS_Wchar wch2);
        
        static void extractTypeData(getWCharRequest* data, /*in*/ DDS_Wchar &wch1, /*inout*/ DDS_Wchar &wch2);
};


class getWCharReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getWCharReply* createTypeData(/*inout*/ const DDS_Wchar wch2, /*out*/ const DDS_Wchar wch3, /*out*/ const DDS_Wchar getWChar_ret);
        
        static void extractTypeData(getWCharReply* data, /*inout*/ DDS_Wchar &wch2, /*out*/ DDS_Wchar &wch3, /*out*/ DDS_Wchar &getWChar_ret);
};


class getShortRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getShortRequest* createTypeData(/*in*/ const DDS_Short sh1, /*inout*/ const DDS_Short sh2);
        
        static void extractTypeData(getShortRequest* data, /*in*/ DDS_Short &sh1, /*inout*/ DDS_Short &sh2);
};


class getShortReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getShortReply* createTypeData(/*inout*/ const DDS_Short sh2, /*out*/ const DDS_Short sh3, /*out*/ const DDS_Short getShort_ret);
        
        static void extractTypeData(getShortReply* data, /*inout*/ DDS_Short &sh2, /*out*/ DDS_Short &sh3, /*out*/ DDS_Short &getShort_ret);
};


class getUShortRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getUShortRequest* createTypeData(/*in*/ const DDS_UnsignedShort ush1, /*inout*/ const DDS_UnsignedShort ush2);
        
        static void extractTypeData(getUShortRequest* data, /*in*/ DDS_UnsignedShort &ush1, /*inout*/ DDS_UnsignedShort &ush2);
};


class getUShortReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getUShortReply* createTypeData(/*inout*/ const DDS_UnsignedShort ush2, /*out*/ const DDS_UnsignedShort ush3, /*out*/ const DDS_UnsignedShort getUShort_ret);
        
        static void extractTypeData(getUShortReply* data, /*inout*/ DDS_UnsignedShort &ush2, /*out*/ DDS_UnsignedShort &ush3, /*out*/ DDS_UnsignedShort &getUShort_ret);
};


class getLongRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getLongRequest* createTypeData(/*in*/ const DDS_Long lo1, /*inout*/ const DDS_Long lo2);
        
        static void extractTypeData(getLongRequest* data, /*in*/ DDS_Long &lo1, /*inout*/ DDS_Long &lo2);
};


class getLongReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getLongReply* createTypeData(/*inout*/ const DDS_Long lo2, /*out*/ const DDS_Long lo3, /*out*/ const DDS_Long getLong_ret);
        
        static void extractTypeData(getLongReply* data, /*inout*/ DDS_Long &lo2, /*out*/ DDS_Long &lo3, /*out*/ DDS_Long &getLong_ret);
};


class getULongRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getULongRequest* createTypeData(/*in*/ const DDS_UnsignedLong ulo1, /*inout*/ const DDS_UnsignedLong ulo2);
        
        static void extractTypeData(getULongRequest* data, /*in*/ DDS_UnsignedLong &ulo1, /*inout*/ DDS_UnsignedLong &ulo2);
};


class getULongReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getULongReply* createTypeData(/*inout*/ const DDS_UnsignedLong ulo2, /*out*/ const DDS_UnsignedLong ulo3, /*out*/ const DDS_UnsignedLong getULong_ret);
        
        static void extractTypeData(getULongReply* data, /*inout*/ DDS_UnsignedLong &ulo2, /*out*/ DDS_UnsignedLong &ulo3, /*out*/ DDS_UnsignedLong &getULong_ret);
};


class getLLongRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getLLongRequest* createTypeData(/*in*/ const DDS_LongLong llo1, /*inout*/ const DDS_LongLong llo2);
        
        static void extractTypeData(getLLongRequest* data, /*in*/ DDS_LongLong &llo1, /*inout*/ DDS_LongLong &llo2);
};


class getLLongReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getLLongReply* createTypeData(/*inout*/ const DDS_LongLong llo2, /*out*/ const DDS_LongLong llo3, /*out*/ const DDS_LongLong getLLong_ret);
        
        static void extractTypeData(getLLongReply* data, /*inout*/ DDS_LongLong &llo2, /*out*/ DDS_LongLong &llo3, /*out*/ DDS_LongLong &getLLong_ret);
};


class getULLongRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getULLongRequest* createTypeData(/*in*/ const DDS_UnsignedLongLong ullo1, /*inout*/ const DDS_UnsignedLongLong ullo2);
        
        static void extractTypeData(getULLongRequest* data, /*in*/ DDS_UnsignedLongLong &ullo1, /*inout*/ DDS_UnsignedLongLong &ullo2);
};


class getULLongReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getULLongReply* createTypeData(/*inout*/ const DDS_UnsignedLongLong ullo2, /*out*/ const DDS_UnsignedLongLong ullo3, /*out*/ const DDS_UnsignedLongLong getULLong_ret);
        
        static void extractTypeData(getULLongReply* data, /*inout*/ DDS_UnsignedLongLong &ullo2, /*out*/ DDS_UnsignedLongLong &ullo3, /*out*/ DDS_UnsignedLongLong &getULLong_ret);
};


class getFloatRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getFloatRequest* createTypeData(/*in*/ const DDS_Float fl1, /*inout*/ const DDS_Float fl2);
        
        static void extractTypeData(getFloatRequest* data, /*in*/ DDS_Float &fl1, /*inout*/ DDS_Float &fl2);
};


class getFloatReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getFloatReply* createTypeData(/*inout*/ const DDS_Float fl2, /*out*/ const DDS_Float fl3, /*out*/ const DDS_Float getFloat_ret);
        
        static void extractTypeData(getFloatReply* data, /*inout*/ DDS_Float &fl2, /*out*/ DDS_Float &fl3, /*out*/ DDS_Float &getFloat_ret);
};


class getDoubleRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getDoubleRequest* createTypeData(/*in*/ const DDS_Double do1, /*inout*/ const DDS_Double do2);
        
        static void extractTypeData(getDoubleRequest* data, /*in*/ DDS_Double &do1, /*inout*/ DDS_Double &do2);
};


class getDoubleReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getDoubleReply* createTypeData(/*inout*/ const DDS_Double do2, /*out*/ const DDS_Double do3, /*out*/ const DDS_Double getDouble_ret);
        
        static void extractTypeData(getDoubleReply* data, /*inout*/ DDS_Double &do2, /*out*/ DDS_Double &do3, /*out*/ DDS_Double &getDouble_ret);
};


class getBooleanRequestUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getBooleanRequest* createTypeData(/*in*/ const DDS_Boolean bo1, /*inout*/ const DDS_Boolean bo2);
        
        static void extractTypeData(getBooleanRequest* data, /*in*/ DDS_Boolean &bo1, /*inout*/ DDS_Boolean &bo2);
};


class getBooleanReplyUtils
{
    public:

        static const char* registerType(DDS::DomainParticipant *clientParticipant);
         
        static getBooleanReply* createTypeData(/*inout*/ const DDS_Boolean bo2, /*out*/ const DDS_Boolean bo3, /*out*/ const DDS_Boolean getBoolean_ret);
        
        static void extractTypeData(getBooleanReply* data, /*inout*/ DDS_Boolean &bo2, /*out*/ DDS_Boolean &bo3, /*out*/ DDS_Boolean &getBoolean_ret);
};

 
#endif // _BasicTypeTest_REQUEST_REPLY_UTILS_H_
