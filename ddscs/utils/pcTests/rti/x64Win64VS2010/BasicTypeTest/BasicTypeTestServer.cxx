/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "BasicTypeTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerException.h"
#include "BasicTypeTestRequestReplyPlugin.h"

#include "BasicTypeTestServerRPCSupport.h"

BasicTypeTestServer::BasicTypeTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    Server(strategy, NULL, domainId)
{
    _impl = new BasicTypeTestServerImpl();

    createRPCs();
}

BasicTypeTestServer::BasicTypeTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new BasicTypeTestServerImpl();
    
    createRPCs();
}

BasicTypeTestServer::~BasicTypeTestServer()
{
    delete _impl;    
}

void BasicTypeTestServer::createRPCs()
{
    this->setRPC(new getOctetServerRPC("getOctet", this,
                getOctetRequestUtils::registerType(getParticipant()),
                getOctetReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getOctet, getParticipant()));
    this->setRPC(new getCharServerRPC("getChar", this,
                getCharRequestUtils::registerType(getParticipant()),
                getCharReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getChar, getParticipant()));
    this->setRPC(new getWCharServerRPC("getWChar", this,
                getWCharRequestUtils::registerType(getParticipant()),
                getWCharReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getWChar, getParticipant()));
    this->setRPC(new getShortServerRPC("getShort", this,
                getShortRequestUtils::registerType(getParticipant()),
                getShortReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getShort, getParticipant()));
    this->setRPC(new getUShortServerRPC("getUShort", this,
                getUShortRequestUtils::registerType(getParticipant()),
                getUShortReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getUShort, getParticipant()));
    this->setRPC(new getLongServerRPC("getLong", this,
                getLongRequestUtils::registerType(getParticipant()),
                getLongReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getLong, getParticipant()));
    this->setRPC(new getULongServerRPC("getULong", this,
                getULongRequestUtils::registerType(getParticipant()),
                getULongReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getULong, getParticipant()));
    this->setRPC(new getLLongServerRPC("getLLong", this,
                getLLongRequestUtils::registerType(getParticipant()),
                getLLongReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getLLong, getParticipant()));
    this->setRPC(new getULLongServerRPC("getULLong", this,
                getULLongRequestUtils::registerType(getParticipant()),
                getULLongReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getULLong, getParticipant()));
    this->setRPC(new getFloatServerRPC("getFloat", this,
                getFloatRequestUtils::registerType(getParticipant()),
                getFloatReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getFloat, getParticipant()));
    this->setRPC(new getDoubleServerRPC("getDouble", this,
                getDoubleRequestUtils::registerType(getParticipant()),
                getDoubleReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getDouble, getParticipant()));
    this->setRPC(new getBooleanServerRPC("getBoolean", this,
                getBooleanRequestUtils::registerType(getParticipant()),
                getBooleanReplyUtils::registerType(getParticipant()),
                &BasicTypeTestServer::getBoolean, getParticipant()));

}

void BasicTypeTestServer::getOctet(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Octet  oc1 = 0;    
    DDS_Octet  oc2 = 0;    
    DDS_Octet  oc3 = 0;    
    DDS_Octet  getOctet_ret = 0;       
    getOctetReply replyData;
    
        

    getOctetRequestUtils::extractTypeData(*(getOctetRequest*)requestData, oc1, oc2);

    try
    {
        getOctet_ret = srv->_impl->getOctet(oc1, oc2, oc3);

        getOctetReplyUtils::setTypeData(replyData, oc2, oc3, getOctet_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getOctetRequestTypeSupport::delete_data((getOctetRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getChar(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Char  ch1 = 0;    
    DDS_Char  ch2 = 0;    
    DDS_Char  ch3 = 0;    
    DDS_Char  getChar_ret = 0;       
    getCharReply replyData;
    
        

    getCharRequestUtils::extractTypeData(*(getCharRequest*)requestData, ch1, ch2);

    try
    {
        getChar_ret = srv->_impl->getChar(ch1, ch2, ch3);

        getCharReplyUtils::setTypeData(replyData, ch2, ch3, getChar_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getCharRequestTypeSupport::delete_data((getCharRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getWChar(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Wchar  wch1 = 0;    
    DDS_Wchar  wch2 = 0;    
    DDS_Wchar  wch3 = 0;    
    DDS_Wchar  getWChar_ret = 0;       
    getWCharReply replyData;
    
        

    getWCharRequestUtils::extractTypeData(*(getWCharRequest*)requestData, wch1, wch2);

    try
    {
        getWChar_ret = srv->_impl->getWChar(wch1, wch2, wch3);

        getWCharReplyUtils::setTypeData(replyData, wch2, wch3, getWChar_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getWCharRequestTypeSupport::delete_data((getWCharRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getShort(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Short  sh1 = 0;    
    DDS_Short  sh2 = 0;    
    DDS_Short  sh3 = 0;    
    DDS_Short  getShort_ret = 0;       
    getShortReply replyData;
    
        

    getShortRequestUtils::extractTypeData(*(getShortRequest*)requestData, sh1, sh2);

    try
    {
        getShort_ret = srv->_impl->getShort(sh1, sh2, sh3);

        getShortReplyUtils::setTypeData(replyData, sh2, sh3, getShort_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getShortRequestTypeSupport::delete_data((getShortRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getUShort(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_UnsignedShort  ush1 = 0;    
    DDS_UnsignedShort  ush2 = 0;    
    DDS_UnsignedShort  ush3 = 0;    
    DDS_UnsignedShort  getUShort_ret = 0;       
    getUShortReply replyData;
    
        

    getUShortRequestUtils::extractTypeData(*(getUShortRequest*)requestData, ush1, ush2);

    try
    {
        getUShort_ret = srv->_impl->getUShort(ush1, ush2, ush3);

        getUShortReplyUtils::setTypeData(replyData, ush2, ush3, getUShort_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getUShortRequestTypeSupport::delete_data((getUShortRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Long  lo1 = 0;    
    DDS_Long  lo2 = 0;    
    DDS_Long  lo3 = 0;    
    DDS_Long  getLong_ret = 0;       
    getLongReply replyData;
    
        

    getLongRequestUtils::extractTypeData(*(getLongRequest*)requestData, lo1, lo2);

    try
    {
        getLong_ret = srv->_impl->getLong(lo1, lo2, lo3);

        getLongReplyUtils::setTypeData(replyData, lo2, lo3, getLong_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getLongRequestTypeSupport::delete_data((getLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getULong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_UnsignedLong  ulo1 = 0;    
    DDS_UnsignedLong  ulo2 = 0;    
    DDS_UnsignedLong  ulo3 = 0;    
    DDS_UnsignedLong  getULong_ret = 0;       
    getULongReply replyData;
    
        

    getULongRequestUtils::extractTypeData(*(getULongRequest*)requestData, ulo1, ulo2);

    try
    {
        getULong_ret = srv->_impl->getULong(ulo1, ulo2, ulo3);

        getULongReplyUtils::setTypeData(replyData, ulo2, ulo3, getULong_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getULongRequestTypeSupport::delete_data((getULongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getLLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_LongLong  llo1 = 0;    
    DDS_LongLong  llo2 = 0;    
    DDS_LongLong  llo3 = 0;    
    DDS_LongLong  getLLong_ret = 0;       
    getLLongReply replyData;
    
        

    getLLongRequestUtils::extractTypeData(*(getLLongRequest*)requestData, llo1, llo2);

    try
    {
        getLLong_ret = srv->_impl->getLLong(llo1, llo2, llo3);

        getLLongReplyUtils::setTypeData(replyData, llo2, llo3, getLLong_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getLLongRequestTypeSupport::delete_data((getLLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getULLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_UnsignedLongLong  ullo1 = 0;    
    DDS_UnsignedLongLong  ullo2 = 0;    
    DDS_UnsignedLongLong  ullo3 = 0;    
    DDS_UnsignedLongLong  getULLong_ret = 0;       
    getULLongReply replyData;
    
        

    getULLongRequestUtils::extractTypeData(*(getULLongRequest*)requestData, ullo1, ullo2);

    try
    {
        getULLong_ret = srv->_impl->getULLong(ullo1, ullo2, ullo3);

        getULLongReplyUtils::setTypeData(replyData, ullo2, ullo3, getULLong_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getULLongRequestTypeSupport::delete_data((getULLongRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getFloat(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Float  fl1 = 0;    
    DDS_Float  fl2 = 0;    
    DDS_Float  fl3 = 0;    
    DDS_Float  getFloat_ret = 0;       
    getFloatReply replyData;
    
        

    getFloatRequestUtils::extractTypeData(*(getFloatRequest*)requestData, fl1, fl2);

    try
    {
        getFloat_ret = srv->_impl->getFloat(fl1, fl2, fl3);

        getFloatReplyUtils::setTypeData(replyData, fl2, fl3, getFloat_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getFloatRequestTypeSupport::delete_data((getFloatRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getDouble(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Double  do1 = 0;    
    DDS_Double  do2 = 0;    
    DDS_Double  do3 = 0;    
    DDS_Double  getDouble_ret = 0;       
    getDoubleReply replyData;
    
        

    getDoubleRequestUtils::extractTypeData(*(getDoubleRequest*)requestData, do1, do2);

    try
    {
        getDouble_ret = srv->_impl->getDouble(do1, do2, do3);

        getDoubleReplyUtils::setTypeData(replyData, do2, do3, getDouble_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getDoubleRequestTypeSupport::delete_data((getDoubleRequest*)requestData);
    
        
        
        
}
void BasicTypeTestServer::getBoolean(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    BasicTypeTestServer *srv = dynamic_cast<BasicTypeTestServer*>(server);
    DDS_Boolean  bo1 = RTI_FALSE;    
    DDS_Boolean  bo2 = RTI_FALSE;    
    DDS_Boolean  bo3 = RTI_FALSE;    
    DDS_Boolean  getBoolean_ret = RTI_FALSE;       
    getBooleanReply replyData;
    
        

    getBooleanRequestUtils::extractTypeData(*(getBooleanRequest*)requestData, bo1, bo2);

    try
    {
        getBoolean_ret = srv->_impl->getBoolean(bo1, bo2, bo3);

        getBooleanReplyUtils::setTypeData(replyData, bo2, bo3, getBoolean_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getBooleanRequestTypeSupport::delete_data((getBooleanRequest*)requestData);
    
        
        
        
}