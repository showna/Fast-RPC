/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "MultithreadTestRequestReplyUtils.h"
#include "MultithreadTestRequestReplyPlugin.h"


const char* testRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = testRequestTypeSupport::get_type_name();

        if(testRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void testRequestUtils::setTypeData(testRequest& instance, /*in*/ const Dato& dato1)
{
    instance.dato1 = dato1;
    
}

void testRequestUtils::extractTypeData(testRequest& data, /*in*/ Dato& dato1)
{
    dato1 = data.dato1;  
    
}


const char* testReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = testReplyTypeSupport::get_type_name();

        if(testReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void testReplyUtils::setTypeData(testReply& instance, /*out*/ const Dato& dato2, /*out*/ DDS_Long test_ret)
{
    instance.dato2 = dato2;
    instance.test_ret = test_ret;            
}

void testReplyUtils::extractTypeData(testReply& data, eProsima::DDSRPC::ReturnMessage& retcode, /*out*/ Dato& dato2, /*out*/ DDS_Long& test_ret)
{
retcode = (eProsima::DDSRPC::ReturnMessage)data.ddsrpcRetCode;
    dato2 = data.dato2;  
    test_ret = data.test_ret;            
}

 