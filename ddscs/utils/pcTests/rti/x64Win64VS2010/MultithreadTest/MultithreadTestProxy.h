#ifndef _MultithreadTest_PROXY_H_
#define _MultithreadTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "MultithreadTestRequestReplyUtils.h"
#include "MultithreadTestClientRPCSupport.h"

class MultithreadTest_test
{
    public:
        virtual void test(/*out*/ const Dato* dato2, /*out*/ const DDS_Long test_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 */
class MultithreadTestProxyH : public eProsima::DDSRPC::Client
{
    public:

        /**
         * \brief Default constructor. The client's proxy has to know what network transport
         *        it should use.
         *
         * \param transport The network transport that client's proxy has to use. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        MultithreadTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~MultithreadTestProxyH();
        
         
        eProsima::DDSRPC::ReturnMessage test(/*in*/ const Dato* dato1, /*out*/ Dato* &dato2, /*out*/ DDS_Long &test_ret);
        
         
        eProsima::DDSRPC::ReturnMessage test_async(MultithreadTest_test &obj, /*in*/ const Dato* dato1);
        
    private:
        eProsima::DDSRPC::ClientRPC *test_Service; 
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the UDPv4 transport.
 */
class MultithreadTestProxy : public MultithreadTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        MultithreadTestProxy(int domainId = 0, long timeout = 10000);
        
        virtual ~MultithreadTestProxy();
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the TCPv4 transport.
 */
class MultithreadTestWANProxy : public MultithreadTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param to_connect Public address and port for the server. By example: "218.18.3.133:7600"
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        MultithreadTestWANProxy(const char *to_connect, int domainId = 0, long timeout = 10000);
        
        virtual ~MultithreadTestWANProxy();
};

#endif // _MultithreadTest_PROXY_H_