/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "EnumYStringTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "EnumYStringTestRequestReplyPlugin.h"

#include "EnumYStringTestServerRPCSupport.h"

EnumYStringTestServerH::EnumYStringTestServerH(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new EnumYStringTestServerImpl();
    
    this->setRPC(new getEnumServerRPC("getEnum", this,
                getEnumRequestUtils::registerType(getParticipant()),
                getEnumReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServerH::getEnum, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
                getStringReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServerH::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
                getStringBoundedReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServerH::getStringBounded, getParticipant()));

}
EnumYStringTestServerH::~EnumYStringTestServerH()
{
    delete _impl;    
}

void EnumYStringTestServerH::getEnum(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServerH *srv = dynamic_cast<EnumYStringTestServerH*>(server);
    Valores  v1 = VALOR1;    
    Valores  v2 = VALOR1;    
    Valores  v3 = VALOR1;    
    Valores  getEnum_ret = VALOR1;      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getEnumReply *replyData = NULL;

    getEnumRequestUtils::extractTypeData((getEnumRequest*)requestData, v1  , v2  );

returnedValue = srv->_impl->getEnum(v1  , v2  , v3  , getEnum_ret  );

    replyData = getEnumReplyUtils::createTypeData(v2  , v3  , getEnum_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getEnumReplyTypeSupport::delete_data(replyData);
    
    getEnumRequestTypeSupport::delete_data((getEnumRequest*)requestData);
    
        
        
        
}
void EnumYStringTestServerH::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServerH *srv = dynamic_cast<EnumYStringTestServerH*>(server);
    char*  s1 = NULL;    
    char*  s2 = NULL;    
    char*  s3 = NULL;    
    char*  getString_ret = NULL;      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getStringReply *replyData = NULL;

    getStringRequestUtils::extractTypeData((getStringRequest*)requestData, s1  , s2  );

returnedValue = srv->_impl->getString(s1  , s2  , s3  , getString_ret  );

    replyData = getStringReplyUtils::createTypeData(s2  , s3  , getString_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getStringReplyTypeSupport::delete_data(replyData);
    
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    if(s2 != NULL) free(s2);    
    if(s3 != NULL) free(s3);    
    if(getString_ret != NULL) free(getString_ret);    
}
void EnumYStringTestServerH::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServerH *srv = dynamic_cast<EnumYStringTestServerH*>(server);
    char*  sb1 = NULL;    
    char*  sb2 = NULL;    
    char*  sb3 = NULL;    
    char*  getStringBounded_ret = NULL;      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getStringBoundedReply *replyData = NULL;

    getStringBoundedRequestUtils::extractTypeData((getStringBoundedRequest*)requestData, sb1  , sb2  );

returnedValue = srv->_impl->getStringBounded(sb1  , sb2  , sb3  , getStringBounded_ret  );

    replyData = getStringBoundedReplyUtils::createTypeData(sb2  , sb3  , getStringBounded_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getStringBoundedReplyTypeSupport::delete_data(replyData);
    
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    if(sb2 != NULL) free(sb2);    
    if(sb3 != NULL) free(sb3);    
    if(getStringBounded_ret != NULL) free(getStringBounded_ret);    
}

EnumYStringTestServer::EnumYStringTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    EnumYStringTestServerH(strategy, new eProsima::DDSRPC::UDPTransport(), domainId)
{
}
EnumYStringTestServer::~EnumYStringTestServer()
{   
}

EnumYStringTestWANServer::EnumYStringTestWANServer(eProsima::DDSRPC::ServerStrategy *strategy,
    const char *public_address, const char *server_bind_port,
    int domainId) :
    EnumYStringTestServerH(strategy, new eProsima::DDSRPC::TCPTransport(public_address, server_bind_port), domainId)
{
}
EnumYStringTestWANServer::~EnumYStringTestWANServer()
{   
}