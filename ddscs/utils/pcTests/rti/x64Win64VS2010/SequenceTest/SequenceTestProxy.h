#ifndef _SequenceTest_PROXY_H_
#define _SequenceTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "SequenceTestRequestReplyUtils.h"
#include "SequenceTestClientRPCSupport.h"

class SequenceTest_getSLong
{
    public:
        virtual void getSLong(/*inout*/ const largo* l2, /*out*/ const largo* l3, /*out*/ const largo* getSLong_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class SequenceTest_getString
{
    public:
        virtual void getString(/*inout*/ const cadena* s2, /*out*/ const cadena* s3, /*out*/ const cadena* getString_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class SequenceTest_getStringBounded
{
    public:
        virtual void getStringBounded(/*inout*/ const dattos* sb2, /*out*/ const dattos* sb3, /*out*/ const dattos* getStringBounded_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 */
class SequenceTestProxyH : public eProsima::DDSRPC::Client
{
    public:

        /**
         * \brief Default constructor. The client's proxy has to know what network transport
         *        it should use.
         *
         * \param transport The network transport that client's proxy has to use. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        SequenceTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~SequenceTestProxyH();
        
         
        eProsima::DDSRPC::ReturnMessage getSLong(/*in*/ const largo* l1, /*inout*/ largo* &l2, /*out*/ largo* &l3, /*out*/ largo* &getSLong_ret);
         
        eProsima::DDSRPC::ReturnMessage getString(/*in*/ const cadena* s1, /*inout*/ cadena* &s2, /*out*/ cadena* &s3, /*out*/ cadena* &getString_ret);
         
        eProsima::DDSRPC::ReturnMessage getStringBounded(/*in*/ const dattos* sb1, /*inout*/ dattos* &sb2, /*out*/ dattos* &sb3, /*out*/ dattos* &getStringBounded_ret);
        
         
        eProsima::DDSRPC::ReturnMessage getSLong_async(SequenceTest_getSLong &obj, /*in*/ const largo* l1, /*inout*/ const largo* l2);
         
        eProsima::DDSRPC::ReturnMessage getString_async(SequenceTest_getString &obj, /*in*/ const cadena* s1, /*inout*/ const cadena* s2);
         
        eProsima::DDSRPC::ReturnMessage getStringBounded_async(SequenceTest_getStringBounded &obj, /*in*/ const dattos* sb1, /*inout*/ const dattos* sb2);
        
    private:
        eProsima::DDSRPC::ClientRPC *getSLong_Service;
        eProsima::DDSRPC::ClientRPC *getString_Service;
        eProsima::DDSRPC::ClientRPC *getStringBounded_Service; 
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the UDPv4 transport.
 */
class SequenceTestProxy : public SequenceTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        SequenceTestProxy(int domainId = 0, long timeout = 10000);
        
        virtual ~SequenceTestProxy();
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the TCPv4 transport.
 */
class SequenceTestWANProxy : public SequenceTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param to_connect Public address and port for the server. By example: "218.18.3.133:7600"
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        SequenceTestWANProxy(const char *to_connect, int domainId = 0, long timeout = 10000);
        
        virtual ~SequenceTestWANProxy();
};

#endif // _SequenceTest_PROXY_H_