/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "SequenceTestProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "SequenceTestRequestReplyPlugin.h"
#include "SequenceTestAsyncSupport.h"
#include "exceptions/Exceptions.h"

SequenceTestProxy::SequenceTestProxy(int domainId, long timeout) :
    Client(NULL, domainId, timeout)
{
    createRPCs();
}

SequenceTestProxy::SequenceTestProxy(eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(transport, domainId, timeout)
{
    createRPCs();
}

SequenceTestProxy::~SequenceTestProxy()
{
    delete getSLong_Service;
    delete getString_Service;
    delete getStringBounded_Service;
}

void SequenceTestProxy::createRPCs()
{
    this->getSLong_Service = new getSLongClientRPC("getSLong",
                                  getSLongRequestUtils::registerType(getParticipant()),
                                  getSLongReplyUtils::registerType(getParticipant()),
                                  this);
    this->getString_Service = new getStringClientRPC("getString",
                                  getStringRequestUtils::registerType(getParticipant()),
                                  getStringReplyUtils::registerType(getParticipant()),
                                  this);
    this->getStringBounded_Service = new getStringBoundedClientRPC("getStringBounded",
                                  getStringBoundedRequestUtils::registerType(getParticipant()),
                                  getStringBoundedReplyUtils::registerType(getParticipant()),
                                  this);

}

 
largo SequenceTestProxy::getSLong(/*in*/ const largo& l1, /*inout*/ largo& l2, /*out*/ largo& l3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    largo getSLong_ret;
        
    getSLongRequest instance;
    getSLongReply retInstance;

    getSLongReply_initialize(&retInstance);    
    getSLongRequestUtils::setTypeData(instance, l1, l2);
    retcode = getSLong_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        getSLongReplyUtils::extractTypeData(retInstance, retcode, l2, l3, getSLong_ret); 
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

    return getSLong_ret;
}
 
cadena SequenceTestProxy::getString(/*in*/ const cadena& s1, /*inout*/ cadena& s2, /*out*/ cadena& s3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    cadena getString_ret;
        
    getStringRequest instance;
    getStringReply retInstance;

    getStringReply_initialize(&retInstance);    
    getStringRequestUtils::setTypeData(instance, s1, s2);
    retcode = getString_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        getStringReplyUtils::extractTypeData(retInstance, retcode, s2, s3, getString_ret); 
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

    return getString_ret;
}
 
dattos SequenceTestProxy::getStringBounded(/*in*/ const dattos& sb1, /*inout*/ dattos& sb2, /*out*/ dattos& sb3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    dattos getStringBounded_ret;
        
    getStringBoundedRequest instance;
    getStringBoundedReply retInstance;

    getStringBoundedReply_initialize(&retInstance);    
    getStringBoundedRequestUtils::setTypeData(instance, sb1, sb2);
    retcode = getStringBounded_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        getStringBoundedReplyUtils::extractTypeData(retInstance, retcode, sb2, sb3, getStringBounded_ret); 
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            throw eProsima::DDSRPC::ServerException("Error in server side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
    };
    

    return getStringBounded_ret;
}

 
void SequenceTestProxy::getSLong_async(SequenceTest_getSLong &obj, /*in*/ const largo& l1, /*inout*/ const largo& l2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    getSLongRequest instance;
    SequenceTest_getSLongTask *task = NULL;
    getSLongRequestUtils::setTypeData(instance, l1, l2);
    task = new SequenceTest_getSLongTask(obj, this);
    retcode = getSLong_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void SequenceTestProxy::getString_async(SequenceTest_getString &obj, /*in*/ const cadena& s1, /*inout*/ const cadena& s2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    getStringRequest instance;
    SequenceTest_getStringTask *task = NULL;
    getStringRequestUtils::setTypeData(instance, s1, s2);
    task = new SequenceTest_getStringTask(obj, this);
    retcode = getString_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void SequenceTestProxy::getStringBounded_async(SequenceTest_getStringBounded &obj, /*in*/ const dattos& sb1, /*inout*/ const dattos& sb2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_ERROR;
    getStringBoundedRequest instance;
    SequenceTest_getStringBoundedTask *task = NULL;
    getStringBoundedRequestUtils::setTypeData(instance, sb1, sb2);
    task = new SequenceTest_getStringBoundedTask(obj, this);
    retcode = getStringBounded_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            throw eProsima::DDSRPC::ClientException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}