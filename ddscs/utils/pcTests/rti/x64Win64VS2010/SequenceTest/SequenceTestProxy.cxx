/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "SequenceTestProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "SequenceTestRequestReplyPlugin.h"
#include "SequenceTestAsyncSupport.h"


SequenceTestProxyH::SequenceTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(transport, domainId, timeout)
{
    this->getSLong_Service = new getSLongClientRPC("getSLong",
                                  getSLongRequestUtils::registerType(getParticipant()),
                                  getSLongReplyUtils::registerType(getParticipant()),
                                  this);
    this->getString_Service = new getStringClientRPC("getString",
                                  getStringRequestUtils::registerType(getParticipant()),
                                  getStringReplyUtils::registerType(getParticipant()),
                                  this);
    this->getStringBounded_Service = new getStringBoundedClientRPC("getStringBounded",
                                  getStringBoundedRequestUtils::registerType(getParticipant()),
                                  getStringBoundedReplyUtils::registerType(getParticipant()),
                                  this);

}

SequenceTestProxyH::~SequenceTestProxyH()
{
    delete getSLong_Service;
    delete getString_Service;
    delete getStringBounded_Service;
}

 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getSLong(/*in*/ const largo* l1, /*inout*/ largo* &l2, /*out*/ largo* &l3, /*out*/ largo* &getSLong_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getSLongRequest *instance = NULL;
    getSLongReply* retInstance = getSLongReplyTypeSupport::create_data();

    instance = getSLongRequestUtils::createTypeData(l1  , l2  );
    returnedValue = getSLong_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getSLongReplyUtils::extractTypeData(retInstance, l2  , l3  , getSLong_ret  );
            //getSLongReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getSLongReplyTypeSupport::delete_data(retInstance);
    getSLongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getString(/*in*/ const cadena* s1, /*inout*/ cadena* &s2, /*out*/ cadena* &s3, /*out*/ cadena* &getString_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getStringRequest *instance = NULL;
    getStringReply* retInstance = getStringReplyTypeSupport::create_data();

    instance = getStringRequestUtils::createTypeData(s1  , s2  );
    returnedValue = getString_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getStringReplyUtils::extractTypeData(retInstance, s2  , s3  , getString_ret  );
            //getStringReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getStringReplyTypeSupport::delete_data(retInstance);
    getStringRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getStringBounded(/*in*/ const dattos* sb1, /*inout*/ dattos* &sb2, /*out*/ dattos* &sb3, /*out*/ dattos* &getStringBounded_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getStringBoundedRequest *instance = NULL;
    getStringBoundedReply* retInstance = getStringBoundedReplyTypeSupport::create_data();

    instance = getStringBoundedRequestUtils::createTypeData(sb1  , sb2  );
    returnedValue = getStringBounded_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getStringBoundedReplyUtils::extractTypeData(retInstance, sb2  , sb3  , getStringBounded_ret  );
            //getStringBoundedReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getStringBoundedReplyTypeSupport::delete_data(retInstance);
    getStringBoundedRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getSLong_async(SequenceTest_getSLong &obj, /*in*/ const largo* l1, /*inout*/ const largo* l2) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getSLongRequest *instance = NULL;
    SequenceTest_getSLongTask *task = NULL;
    instance = getSLongRequestUtils::createTypeData(l1  , l2  );
    task = new SequenceTest_getSLongTask(obj, this);
    returnedValue = getSLong_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    getSLongRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getString_async(SequenceTest_getString &obj, /*in*/ const cadena* s1, /*inout*/ const cadena* s2) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getStringRequest *instance = NULL;
    SequenceTest_getStringTask *task = NULL;
    instance = getStringRequestUtils::createTypeData(s1  , s2  );
    task = new SequenceTest_getStringTask(obj, this);
    returnedValue = getString_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    getStringRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage SequenceTestProxyH::getStringBounded_async(SequenceTest_getStringBounded &obj, /*in*/ const dattos* sb1, /*inout*/ const dattos* sb2) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    getStringBoundedRequest *instance = NULL;
    SequenceTest_getStringBoundedTask *task = NULL;
    instance = getStringBoundedRequestUtils::createTypeData(sb1  , sb2  );
    task = new SequenceTest_getStringBoundedTask(obj, this);
    returnedValue = getStringBounded_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    getStringBoundedRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

SequenceTestProxy::SequenceTestProxy(int domainId, long timeout) :
    SequenceTestProxyH(new eProsima::DDSRPC::UDPTransport(), domainId, timeout)
{
}

SequenceTestProxy::~SequenceTestProxy()
{
}

SequenceTestWANProxy::SequenceTestWANProxy(const char *to_connect, int domainId, long timeout) :
    SequenceTestProxyH(new eProsima::DDSRPC::TCPTransport(to_connect), domainId, timeout)
{
}

SequenceTestWANProxy::~SequenceTestWANProxy()
{
}