/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "SequenceTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "SequenceTestRequestReplyPlugin.h"

#include "SequenceTestServerRPCSupport.h"

SequenceTestServerH::SequenceTestServerH(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new SequenceTestServerImpl();
    
    this->setRPC(new getSLongServerRPC("getSLong", this,
                getSLongRequestUtils::registerType(getParticipant()),
                getSLongReplyUtils::registerType(getParticipant()),
                &SequenceTestServerH::getSLong, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
                getStringReplyUtils::registerType(getParticipant()),
                &SequenceTestServerH::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
                getStringBoundedReplyUtils::registerType(getParticipant()),
                &SequenceTestServerH::getStringBounded, getParticipant()));

}
SequenceTestServerH::~SequenceTestServerH()
{
    delete _impl;    
}

void SequenceTestServerH::getSLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServerH *srv = dynamic_cast<SequenceTestServerH*>(server);
    largo *l1 = NULL;    
    largo *l2 = largoPluginSupport_create_data();    
    largo *l3 = largoPluginSupport_create_data();    
    largo *getSLong_ret = largoPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getSLongReply *replyData = NULL;

    getSLongRequestUtils::extractTypeData((getSLongRequest*)requestData, l1  , l2  );

returnedValue = srv->_impl->getSLong(l1  , l2  , l3  , getSLong_ret  );

    replyData = getSLongReplyUtils::createTypeData(l2  , l3  , getSLong_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getSLongReplyTypeSupport::delete_data(replyData);
    
    getSLongRequestTypeSupport::delete_data((getSLongRequest*)requestData);
    
    largoPluginSupport_destroy_data(l2);    
    largoPluginSupport_destroy_data(l3);    
    largoPluginSupport_destroy_data(getSLong_ret);    
}
void SequenceTestServerH::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServerH *srv = dynamic_cast<SequenceTestServerH*>(server);
    cadena *s1 = NULL;    
    cadena *s2 = cadenaPluginSupport_create_data();    
    cadena *s3 = cadenaPluginSupport_create_data();    
    cadena *getString_ret = cadenaPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getStringReply *replyData = NULL;

    getStringRequestUtils::extractTypeData((getStringRequest*)requestData, s1  , s2  );

returnedValue = srv->_impl->getString(s1  , s2  , s3  , getString_ret  );

    replyData = getStringReplyUtils::createTypeData(s2  , s3  , getString_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getStringReplyTypeSupport::delete_data(replyData);
    
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    cadenaPluginSupport_destroy_data(s2);    
    cadenaPluginSupport_destroy_data(s3);    
    cadenaPluginSupport_destroy_data(getString_ret);    
}
void SequenceTestServerH::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServerH *srv = dynamic_cast<SequenceTestServerH*>(server);
    dattos *sb1 = NULL;    
    dattos *sb2 = dattosPluginSupport_create_data();    
    dattos *sb3 = dattosPluginSupport_create_data();    
    dattos *getStringBounded_ret = dattosPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    getStringBoundedReply *replyData = NULL;

    getStringBoundedRequestUtils::extractTypeData((getStringBoundedRequest*)requestData, sb1  , sb2  );

returnedValue = srv->_impl->getStringBounded(sb1  , sb2  , sb3  , getStringBounded_ret  );

    replyData = getStringBoundedReplyUtils::createTypeData(sb2  , sb3  , getStringBounded_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    getStringBoundedReplyTypeSupport::delete_data(replyData);
    
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    dattosPluginSupport_destroy_data(sb2);    
    dattosPluginSupport_destroy_data(sb3);    
    dattosPluginSupport_destroy_data(getStringBounded_ret);    
}

SequenceTestServer::SequenceTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    SequenceTestServerH(strategy, new eProsima::DDSRPC::UDPTransport(), domainId)
{
}
SequenceTestServer::~SequenceTestServer()
{   
}

SequenceTestWANServer::SequenceTestWANServer(eProsima::DDSRPC::ServerStrategy *strategy,
    const char *public_address, const char *server_bind_port,
    int domainId) :
    SequenceTestServerH(strategy, new eProsima::DDSRPC::TCPTransport(public_address, server_bind_port), domainId)
{
}
SequenceTestWANServer::~SequenceTestWANServer()
{   
}