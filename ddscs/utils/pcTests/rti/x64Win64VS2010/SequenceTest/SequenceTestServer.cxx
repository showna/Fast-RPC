/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "SequenceTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "SequenceTestRequestReplyPlugin.h"

#include "SequenceTestServerRPCSupport.h"

SequenceTestServer::SequenceTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    Server(strategy, NULL, domainId)
{
    _impl = new SequenceTestServerImpl();

    createRPCs();
}

SequenceTestServer::SequenceTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new SequenceTestServerImpl();
    
    createRPCs();
}

SequenceTestServer::~SequenceTestServer()
{
    delete _impl;    
}

void SequenceTestServer::createRPCs()
{
    this->setRPC(new getSLongServerRPC("getSLong", this,
                getSLongRequestUtils::registerType(getParticipant()),
                getSLongReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getSLong, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
                getStringReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
                getStringBoundedReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getStringBounded, getParticipant()));

}

void SequenceTestServer::getSLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = dynamic_cast<SequenceTestServer*>(server);
    largo l1;
        
    largo l2;
        
    largo l3;
    memset(&l3, 0, sizeof(largo));    
    largo getSLong_ret;
           
    getSLongReply replyData;
    
    largo_initialize(&l2);    

    getSLongRequestUtils::extractTypeData(*(getSLongRequest*)requestData, l1, l2);

    getSLong_ret = srv->_impl->getSLong(l1, l2, l3);

    getSLongReplyUtils::setTypeData(replyData, l2, l3, getSLong_ret);

    // sendReply takes care of deleting the data
    service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    
    getSLongRequestTypeSupport::delete_data((getSLongRequest*)requestData);
    
    largo_finalize(&getSLong_ret);    
    largo_finalize(&l2);    
    largo_finalize(&l3);    
}
void SequenceTestServer::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = dynamic_cast<SequenceTestServer*>(server);
    cadena s1;
        
    cadena s2;
        
    cadena s3;
    memset(&s3, 0, sizeof(cadena));    
    cadena getString_ret;
           
    getStringReply replyData;
    
    cadena_initialize(&s2);    

    getStringRequestUtils::extractTypeData(*(getStringRequest*)requestData, s1, s2);

    getString_ret = srv->_impl->getString(s1, s2, s3);

    getStringReplyUtils::setTypeData(replyData, s2, s3, getString_ret);

    // sendReply takes care of deleting the data
    service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    cadena_finalize(&getString_ret);    
    cadena_finalize(&s2);    
    cadena_finalize(&s3);    
}
void SequenceTestServer::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = dynamic_cast<SequenceTestServer*>(server);
    dattos sb1;
        
    dattos sb2;
        
    dattos sb3;
    memset(&sb3, 0, sizeof(dattos));    
    dattos getStringBounded_ret;
           
    getStringBoundedReply replyData;
    
    dattos_initialize(&sb2);    

    getStringBoundedRequestUtils::extractTypeData(*(getStringBoundedRequest*)requestData, sb1, sb2);

    getStringBounded_ret = srv->_impl->getStringBounded(sb1, sb2, sb3);

    getStringBoundedReplyUtils::setTypeData(replyData, sb2, sb3, getStringBounded_ret);

    // sendReply takes care of deleting the data
    service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    dattos_finalize(&getStringBounded_ret);    
    dattos_finalize(&sb2);    
    dattos_finalize(&sb3);    
}