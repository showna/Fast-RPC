/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "SequenceTestRequestReplyUtils.h"
#include "SequenceTestRequestReplyPlugin.h"


const char* getSLongRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getSLongRequestTypeSupport::get_type_name();

        if(getSLongRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getSLongRequest* getSLongRequestUtils::createTypeData(/*in*/ const largo* l1, /*inout*/ const largo* l2)
{
    getSLongRequest* instance = getSLongRequestTypeSupport::create_data();

    largoPluginSupport_copy_data(&instance->l1, l1);
    largoPluginSupport_copy_data(&instance->l2, l2);
    
    
    return instance;
}

void getSLongRequestUtils::extractTypeData(getSLongRequest* data , /*in*/ largo* &l1, /*inout*/ largo* &l2)
{
    l1 = &data->l1;
    largoPluginSupport_copy_data(l2, &data->l2);
    
    
}


const char* getSLongReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getSLongReplyTypeSupport::get_type_name();

        if(getSLongReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getSLongReply* getSLongReplyUtils::createTypeData(/*inout*/ const largo* l2, /*out*/ const largo* l3, /*out*/ const largo* getSLong_ret)
{
    getSLongReply* instance = getSLongReplyTypeSupport::create_data();

    largoPluginSupport_copy_data(&instance->l2, l2);
    largoPluginSupport_copy_data(&instance->l3, l3);
    
    largoPluginSupport_copy_data(&instance->getSLong_ret, getSLong_ret);            
    return instance;
}

void getSLongReplyUtils::extractTypeData(getSLongReply* data , /*inout*/ largo* &l2, /*out*/ largo* &l3, /*out*/ largo* &getSLong_ret)
{
    largoPluginSupport_copy_data(l2, &data->l2);
    largoPluginSupport_copy_data(l3, &data->l3);
    
    largoPluginSupport_copy_data(getSLong_ret, &data->getSLong_ret);            
}


const char* getStringRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringRequestTypeSupport::get_type_name();

        if(getStringRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringRequest* getStringRequestUtils::createTypeData(/*in*/ const cadena* s1, /*inout*/ const cadena* s2)
{
    getStringRequest* instance = getStringRequestTypeSupport::create_data();

    cadenaPluginSupport_copy_data(&instance->s1, s1);
    cadenaPluginSupport_copy_data(&instance->s2, s2);
    
    
    return instance;
}

void getStringRequestUtils::extractTypeData(getStringRequest* data , /*in*/ cadena* &s1, /*inout*/ cadena* &s2)
{
    s1 = &data->s1;
    cadenaPluginSupport_copy_data(s2, &data->s2);
    
    
}


const char* getStringReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringReplyTypeSupport::get_type_name();

        if(getStringReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringReply* getStringReplyUtils::createTypeData(/*inout*/ const cadena* s2, /*out*/ const cadena* s3, /*out*/ const cadena* getString_ret)
{
    getStringReply* instance = getStringReplyTypeSupport::create_data();

    cadenaPluginSupport_copy_data(&instance->s2, s2);
    cadenaPluginSupport_copy_data(&instance->s3, s3);
    
    cadenaPluginSupport_copy_data(&instance->getString_ret, getString_ret);            
    return instance;
}

void getStringReplyUtils::extractTypeData(getStringReply* data , /*inout*/ cadena* &s2, /*out*/ cadena* &s3, /*out*/ cadena* &getString_ret)
{
    cadenaPluginSupport_copy_data(s2, &data->s2);
    cadenaPluginSupport_copy_data(s3, &data->s3);
    
    cadenaPluginSupport_copy_data(getString_ret, &data->getString_ret);            
}


const char* getStringBoundedRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringBoundedRequestTypeSupport::get_type_name();

        if(getStringBoundedRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringBoundedRequest* getStringBoundedRequestUtils::createTypeData(/*in*/ const dattos* sb1, /*inout*/ const dattos* sb2)
{
    getStringBoundedRequest* instance = getStringBoundedRequestTypeSupport::create_data();

    dattosPluginSupport_copy_data(&instance->sb1, sb1);
    dattosPluginSupport_copy_data(&instance->sb2, sb2);
    
    
    return instance;
}

void getStringBoundedRequestUtils::extractTypeData(getStringBoundedRequest* data , /*in*/ dattos* &sb1, /*inout*/ dattos* &sb2)
{
    sb1 = &data->sb1;
    dattosPluginSupport_copy_data(sb2, &data->sb2);
    
    
}


const char* getStringBoundedReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getStringBoundedReplyTypeSupport::get_type_name();

        if(getStringBoundedReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getStringBoundedReply* getStringBoundedReplyUtils::createTypeData(/*inout*/ const dattos* sb2, /*out*/ const dattos* sb3, /*out*/ const dattos* getStringBounded_ret)
{
    getStringBoundedReply* instance = getStringBoundedReplyTypeSupport::create_data();

    dattosPluginSupport_copy_data(&instance->sb2, sb2);
    dattosPluginSupport_copy_data(&instance->sb3, sb3);
    
    dattosPluginSupport_copy_data(&instance->getStringBounded_ret, getStringBounded_ret);            
    return instance;
}

void getStringBoundedReplyUtils::extractTypeData(getStringBoundedReply* data , /*inout*/ dattos* &sb2, /*out*/ dattos* &sb3, /*out*/ dattos* &getStringBounded_ret)
{
    dattosPluginSupport_copy_data(sb2, &data->sb2);
    dattosPluginSupport_copy_data(sb3, &data->sb3);
    
    dattosPluginSupport_copy_data(getStringBounded_ret, &data->getStringBounded_ret);            
}

 