#ifndef _SequenceTestSKELETON_H_
#define _SequenceTestSKELETON_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "server/Server.h"
#include "SequenceTestServerImpl.h"
#include "SequenceTestRequestReplyUtils.h"

/**
 * \brief This class implements a specific server for the defined interface by user.
 */
class SequenceTestServerH : public eProsima::DDSRPC::Server
{
    private: 
      SequenceTestServerImpl *_impl;
    public:

        /**
         * \brief Default constructor. The server has to know what network transport
         *        it should use.
         *
         * \param strategy Strategy used by server to work with new requests. Cannot be NULL.
         * \param transport The network transport that server has to use. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         */
        SequenceTestServerH(eProsima::DDSRPC::ServerStrategy *strategy, eProsima::DDSRPC::Transport *transport,
            int domainId = 0);

        /// \brief The default destructor.
        virtual ~SequenceTestServerH();

        static void getSLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service);
        static void getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service);
        static void getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service);
};

/**
 * \brief This class implements a specific server for the defined interface by user.
 *        This server uses the UDPv4 transport.
 */
class SequenceTestServer : public SequenceTestServerH
{
    public:

        /**
         * \brief Default constructor.
         *
         * \param strategy Strategy used by server to work with new requests. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         */
        SequenceTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
            int domainId = 0);

        /// \brief The default destructor.
        virtual ~SequenceTestServer();
};

/**
 * \brief This class implements a specific server for the defined interface by user.
 *        This server uses the TCPv4 transport.
 */
class SequenceTestWANServer : public SequenceTestServerH
{
    public:

        /**
         * \brief Default constructor.
         *
         * \param strategy Strategy used by server to work with new requests. Cannot be NULL.
         * \param public_address Public address and port of the server. The server should be accesible in this address.
         *        The user has to configure its router for this purpose. By example: "218.18.3.133:7600"      *
         * \param server_bind_port Port used by the server in its machine. This port will be use in the router for port forwarding
         *        between the public port and this port.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         */
        SequenceTestWANServer(eProsima::DDSRPC::ServerStrategy *strategy, 
            const char *public_address, const char *server_bind_port,
            int domainId = 0);

        /// \brief The default destructor.
        virtual ~SequenceTestWANServer();
};

#endif // _SequenceTestSKELETON_H_