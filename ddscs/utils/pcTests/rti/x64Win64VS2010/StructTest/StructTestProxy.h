#ifndef _StructTest_PROXY_H_
#define _StructTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "StructTestRequestReplyUtils.h"
#include "StructTestClientRPCSupport.h"

class StructTest_duplicate
{
    public:
        virtual void duplicate(/*out*/ const Recepcion* duplicate_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class StructTest_suma
{
    public:
        virtual void suma(/*out*/ const Recepcion* suma_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 */
class StructTestProxyH : public eProsima::DDSRPC::Client
{
    public:

        /**
         * \brief Default constructor. The client's proxy has to know what network transport
         *        it should use.
         *
         * \param transport The network transport that client's proxy has to use. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        StructTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~StructTestProxyH();
        
         
        eProsima::DDSRPC::ReturnMessage duplicate(/*in*/ const Envio* ev, /*out*/ Recepcion* &duplicate_ret);
         
        eProsima::DDSRPC::ReturnMessage suma(/*in*/ const Envio* ev1, /*in*/ const Envio* ev2, /*out*/ Recepcion* &suma_ret);
        
         
        eProsima::DDSRPC::ReturnMessage duplicate_async(StructTest_duplicate &obj, /*in*/ const Envio* ev);
         
        eProsima::DDSRPC::ReturnMessage suma_async(StructTest_suma &obj, /*in*/ const Envio* ev1, /*in*/ const Envio* ev2);
        
    private:
        eProsima::DDSRPC::ClientRPC *duplicate_Service;
        eProsima::DDSRPC::ClientRPC *suma_Service; 
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the UDPv4 transport.
 */
class StructTestProxy : public StructTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        StructTestProxy(int domainId = 0, long timeout = 10000);
        
        virtual ~StructTestProxy();
};

/**
 * \brief This class implements a specific client's proxy for the defined interface by user.
 *        This client's proxy uses the TCPv4 transport.
 */
class StructTestWANProxy : public StructTestProxyH
{
    public:
    
        /**
         * \brief Default constructor.
         *
         * \param to_connect Public address and port for the server. By example: "218.18.3.133:7600"
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, the call return a eProsima::DDSRPC::SERVER_TIMEOUT.
         */
        StructTestWANProxy(const char *to_connect, int domainId = 0, long timeout = 10000);
        
        virtual ~StructTestWANProxy();
};

#endif // _StructTest_PROXY_H_