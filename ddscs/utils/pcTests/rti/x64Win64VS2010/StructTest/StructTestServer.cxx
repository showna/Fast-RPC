/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "StructTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "StructTestRequestReplyPlugin.h"

#include "StructTestServerRPCSupport.h"

StructTestServerH::StructTestServerH(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new StructTestServerImpl();
    
    this->setRPC(new duplicateServerRPC("duplicate", this,
                duplicateRequestUtils::registerType(getParticipant()),
                duplicateReplyUtils::registerType(getParticipant()),
                &StructTestServerH::duplicate, getParticipant()));
    this->setRPC(new sumaServerRPC("suma", this,
                sumaRequestUtils::registerType(getParticipant()),
                sumaReplyUtils::registerType(getParticipant()),
                &StructTestServerH::suma, getParticipant()));

}
StructTestServerH::~StructTestServerH()
{
    delete _impl;    
}

void StructTestServerH::duplicate(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServerH *srv = dynamic_cast<StructTestServerH*>(server);
    Envio *ev = NULL;    
    Recepcion *duplicate_ret = RecepcionPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    duplicateReply *replyData = NULL;

    duplicateRequestUtils::extractTypeData((duplicateRequest*)requestData, ev  );

returnedValue = srv->_impl->duplicate(ev  , duplicate_ret  );

    replyData = duplicateReplyUtils::createTypeData(duplicate_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    duplicateReplyTypeSupport::delete_data(replyData);
    
    duplicateRequestTypeSupport::delete_data((duplicateRequest*)requestData);
    
    RecepcionPluginSupport_destroy_data(duplicate_ret);    
}
void StructTestServerH::suma(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServerH *srv = dynamic_cast<StructTestServerH*>(server);
    Envio *ev1 = NULL;    
    Envio *ev2 = NULL;    
    Recepcion *suma_ret = RecepcionPluginSupport_create_data();      
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;        
    sumaReply *replyData = NULL;

    sumaRequestUtils::extractTypeData((sumaRequest*)requestData, ev1  , ev2  );

returnedValue = srv->_impl->suma(ev1  , ev2  , suma_ret  );

    replyData = sumaReplyUtils::createTypeData(suma_ret  );

    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);

    sumaReplyTypeSupport::delete_data(replyData);
    
    sumaRequestTypeSupport::delete_data((sumaRequest*)requestData);
    
    RecepcionPluginSupport_destroy_data(suma_ret);    
}

StructTestServer::StructTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    StructTestServerH(strategy, new eProsima::DDSRPC::UDPTransport(), domainId)
{
}
StructTestServer::~StructTestServer()
{   
}

StructTestWANServer::StructTestWANServer(eProsima::DDSRPC::ServerStrategy *strategy,
    const char *public_address, const char *server_bind_port,
    int domainId) :
    StructTestServerH(strategy, new eProsima::DDSRPC::TCPTransport(public_address, server_bind_port), domainId)
{
}
StructTestWANServer::~StructTestWANServer()
{   
}