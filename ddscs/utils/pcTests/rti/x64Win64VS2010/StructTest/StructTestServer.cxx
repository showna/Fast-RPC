/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "StructTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerException.h"
#include "StructTestRequestReplyPlugin.h"

#include "StructTestServerRPCSupport.h"

StructTestServer::StructTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    Server(strategy, NULL, domainId)
{
    _impl = new StructTestServerImpl();

    createRPCs();
}

StructTestServer::StructTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new StructTestServerImpl();
    
    createRPCs();
}

StructTestServer::~StructTestServer()
{
    delete _impl;    
}

void StructTestServer::createRPCs()
{
    this->setRPC(new duplicateServerRPC("duplicate", this,
                duplicateRequestUtils::registerType(getParticipant()),
                duplicateReplyUtils::registerType(getParticipant()),
                &StructTestServer::duplicate, getParticipant()));
    this->setRPC(new sumaServerRPC("suma", this,
                sumaRequestUtils::registerType(getParticipant()),
                sumaReplyUtils::registerType(getParticipant()),
                &StructTestServer::suma, getParticipant()));

}

void StructTestServer::duplicate(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServer *srv = dynamic_cast<StructTestServer*>(server);
    Envio ev;
        
    Recepcion duplicate_ret;
    memset(&duplicate_ret, 0, sizeof(Recepcion));       
    duplicateReply replyData;
    

    duplicateRequestUtils::extractTypeData(*(duplicateRequest*)requestData, ev);

    try
    {
        duplicate_ret = srv->_impl->duplicate(ev);

        duplicateReplyUtils::setTypeData(replyData, duplicate_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    duplicateRequestTypeSupport::delete_data((duplicateRequest*)requestData);
    
    Recepcion_finalize(&duplicate_ret);    
}
void StructTestServer::suma(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    StructTestServer *srv = dynamic_cast<StructTestServer*>(server);
    Envio ev1;
        
    Envio ev2;
        
    Recepcion suma_ret;
    memset(&suma_ret, 0, sizeof(Recepcion));       
    sumaReply replyData;
    

    sumaRequestUtils::extractTypeData(*(sumaRequest*)requestData, ev1, ev2);

    try
    {
        suma_ret = srv->_impl->suma(ev1, ev2);

        sumaReplyUtils::setTypeData(replyData, suma_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    sumaRequestTypeSupport::delete_data((sumaRequest*)requestData);
    
    Recepcion_finalize(&suma_ret);    
}