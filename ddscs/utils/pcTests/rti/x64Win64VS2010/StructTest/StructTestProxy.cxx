/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "StructTestProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "StructTestRequestReplyPlugin.h"
#include "StructTestAsyncSupport.h"


StructTestProxyH::StructTestProxyH(eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(transport, domainId, timeout)
{
    this->duplicate_Service = new duplicateClientRPC("duplicate",
                                  duplicateRequestUtils::registerType(getParticipant()),
                                  duplicateReplyUtils::registerType(getParticipant()),
                                  this);
    this->suma_Service = new sumaClientRPC("suma",
                                  sumaRequestUtils::registerType(getParticipant()),
                                  sumaReplyUtils::registerType(getParticipant()),
                                  this);

}

StructTestProxyH::~StructTestProxyH()
{
    delete duplicate_Service;
    delete suma_Service;
}

 
eProsima::DDSRPC::ReturnMessage StructTestProxyH::duplicate(/*in*/ const Envio* ev, /*out*/ Recepcion* &duplicate_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    duplicateRequest *instance = NULL;
    duplicateReply* retInstance = duplicateReplyTypeSupport::create_data();

    instance = duplicateRequestUtils::createTypeData(ev  );
    returnedValue = duplicate_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            duplicateReplyUtils::extractTypeData(retInstance, duplicate_ret  );
            //duplicateReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    duplicateReplyTypeSupport::delete_data(retInstance);
    duplicateRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage StructTestProxyH::suma(/*in*/ const Envio* ev1, /*in*/ const Envio* ev2, /*out*/ Recepcion* &suma_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    sumaRequest *instance = NULL;
    sumaReply* retInstance = sumaReplyTypeSupport::create_data();

    instance = sumaRequestUtils::createTypeData(ev1  , ev2  );
    returnedValue = suma_Service->execute(instance, retInstance, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            sumaReplyUtils::extractTypeData(retInstance, suma_ret  );
            //sumaReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    sumaReplyTypeSupport::delete_data(retInstance);
    sumaRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

 
eProsima::DDSRPC::ReturnMessage StructTestProxyH::duplicate_async(StructTest_duplicate &obj, /*in*/ const Envio* ev) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    duplicateRequest *instance = NULL;
    StructTest_duplicateTask *task = NULL;
    instance = duplicateRequestUtils::createTypeData(ev  );
    task = new StructTest_duplicateTask(obj, this);
    returnedValue = duplicate_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    duplicateRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage StructTestProxyH::suma_async(StructTest_suma &obj, /*in*/ const Envio* ev1, /*in*/ const Envio* ev2) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue = eProsima::DDSRPC::OPERATION_SUCCESSFUL;    
    sumaRequest *instance = NULL;
    StructTest_sumaTask *task = NULL;
    instance = sumaRequestUtils::createTypeData(ev1  , ev2  );
    task = new StructTest_sumaTask(obj, this);
    returnedValue = suma_Service->executeAsync(instance, task, getTimeout());
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:       
            break;
    };
    
    sumaRequestTypeSupport::delete_data(instance);

    return returnedValue;
}

StructTestProxy::StructTestProxy(int domainId, long timeout) :
    StructTestProxyH(new eProsima::DDSRPC::UDPTransport(), domainId, timeout)
{
}

StructTestProxy::~StructTestProxy()
{
}

StructTestWANProxy::StructTestWANProxy(const char *to_connect, int domainId, long timeout) :
    StructTestProxyH(new eProsima::DDSRPC::TCPTransport(to_connect), domainId, timeout)
{
}

StructTestWANProxy::~StructTestWANProxy()
{
}