#ifndef _BasicTypeTest_ASYNC_SUPPORT_H_
#define _BasicTypeTest_ASYNC_SUPPORT_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/AsyncTask.h"


/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getOctet from the server in an asynchronous call.
 */
class BasicTypeTest_getOctetTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getOctetTask(BasicTypeTest_getOctetCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getOctetTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getOctetCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getOctetCallbackHandler &m_obj;
           
           BasicTypeTest_getOctetReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getChar from the server in an asynchronous call.
 */
class BasicTypeTest_getCharTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getCharTask(BasicTypeTest_getCharCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getCharTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getCharCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getCharCallbackHandler &m_obj;
           
           BasicTypeTest_getCharReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getWChar from the server in an asynchronous call.
 */
class BasicTypeTest_getWCharTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getWCharTask(BasicTypeTest_getWCharCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getWCharTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getWCharCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getWCharCallbackHandler &m_obj;
           
           BasicTypeTest_getWCharReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getShort from the server in an asynchronous call.
 */
class BasicTypeTest_getShortTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getShortTask(BasicTypeTest_getShortCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getShortTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getShortCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getShortCallbackHandler &m_obj;
           
           BasicTypeTest_getShortReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getUShort from the server in an asynchronous call.
 */
class BasicTypeTest_getUShortTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getUShortTask(BasicTypeTest_getUShortCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getUShortTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getUShortCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getUShortCallbackHandler &m_obj;
           
           BasicTypeTest_getUShortReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getLong from the server in an asynchronous call.
 */
class BasicTypeTest_getLongTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getLongTask(BasicTypeTest_getLongCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getLongTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getLongCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getLongCallbackHandler &m_obj;
           
           BasicTypeTest_getLongReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getULong from the server in an asynchronous call.
 */
class BasicTypeTest_getULongTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getULongTask(BasicTypeTest_getULongCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getULongTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getULongCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getULongCallbackHandler &m_obj;
           
           BasicTypeTest_getULongReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getLLong from the server in an asynchronous call.
 */
class BasicTypeTest_getLLongTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getLLongTask(BasicTypeTest_getLLongCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getLLongTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getLLongCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getLLongCallbackHandler &m_obj;
           
           BasicTypeTest_getLLongReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getULLong from the server in an asynchronous call.
 */
class BasicTypeTest_getULLongTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getULLongTask(BasicTypeTest_getULLongCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getULLongTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getULLongCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getULLongCallbackHandler &m_obj;
           
           BasicTypeTest_getULLongReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getFloat from the server in an asynchronous call.
 */
class BasicTypeTest_getFloatTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getFloatTask(BasicTypeTest_getFloatCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getFloatTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getFloatCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getFloatCallbackHandler &m_obj;
           
           BasicTypeTest_getFloatReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getDouble from the server in an asynchronous call.
 */
class BasicTypeTest_getDoubleTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getDoubleTask(BasicTypeTest_getDoubleCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getDoubleTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getDoubleCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getDoubleCallbackHandler &m_obj;
           
           BasicTypeTest_getDoubleReply m_reply;
};

/**
 * \brief This class represents a asynchronous task created to wait the reply of the procedure getBoolean from the server in an asynchronous call.
 */
class BasicTypeTest_getBooleanTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that DDSRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        BasicTypeTest_getBooleanTask(BasicTypeTest_getBooleanCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~BasicTypeTest_getBooleanTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        /**
         * \brief This function returns the object used by the task.
         *
         * \return The object that implements the callbacks.
         */
        BasicTypeTest_getBooleanCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           BasicTypeTest_getBooleanCallbackHandler &m_obj;
           
           BasicTypeTest_getBooleanReply m_reply;
};

#endif // _BasicTypeTest_ASYNC_SUPPORT_H_