/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "ServerExceptionServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerException.h"
#include "ServerExceptionRequestReplyPlugin.h"

#include "ServerExceptionServerRPCSupport.h"

ServerExceptionServer::ServerExceptionServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    Server(strategy, NULL, domainId)
{
    _impl = new ServerExceptionServerImpl();

    createRPCs();
}

ServerExceptionServer::ServerExceptionServer(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new ServerExceptionServerImpl();
    
    createRPCs();
}

ServerExceptionServer::~ServerExceptionServer()
{
    delete _impl;    
}

void ServerExceptionServer::createRPCs()
{
    this->setRPC(new sendExceptionServerRPC("sendException", this,
                sendExceptionRequestUtils::registerType(getParticipant()),
                sendExceptionReplyUtils::registerType(getParticipant()),
                &ServerExceptionServer::sendException, getParticipant()));
    this->setRPC(new sendExceptionTwoServerRPC("sendExceptionTwo", this,
                sendExceptionTwoRequestUtils::registerType(getParticipant()),
                sendExceptionTwoReplyUtils::registerType(getParticipant()),
                &ServerExceptionServer::sendExceptionTwo, getParticipant()));
    this->setRPC(new sendExceptionThreeServerRPC("sendExceptionThree", this,
                sendExceptionThreeRequestUtils::registerType(getParticipant()),
                sendExceptionThreeReplyUtils::registerType(getParticipant()),
                &ServerExceptionServer::sendExceptionThree, getParticipant()));

}

void ServerExceptionServer::sendException(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    ServerExceptionServer *srv = dynamic_cast<ServerExceptionServer*>(server);
   
    sendExceptionReply replyData;
    

    sendExceptionRequestUtils::extractTypeData(*(sendExceptionRequest*)requestData);

    try
    {
srv->_impl->sendException();

        sendExceptionReplyUtils::setTypeData(replyData);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    sendExceptionRequestTypeSupport::delete_data((sendExceptionRequest*)requestData);
    
}
void ServerExceptionServer::sendExceptionTwo(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    ServerExceptionServer *srv = dynamic_cast<ServerExceptionServer*>(server);
    char*  message = NULL;    
    char*  message2 = NULL;    
    char*  message3 = NULL;    
    char*  sendExceptionTwo_ret = NULL;       
    sendExceptionTwoReply replyData;
    
        

    sendExceptionTwoRequestUtils::extractTypeData(*(sendExceptionTwoRequest*)requestData, message, message2);

    try
    {
        sendExceptionTwo_ret = srv->_impl->sendExceptionTwo(message, message2, message3);

        sendExceptionTwoReplyUtils::setTypeData(replyData, message2, message3, sendExceptionTwo_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    sendExceptionTwoRequestTypeSupport::delete_data((sendExceptionTwoRequest*)requestData);
    
    if(sendExceptionTwo_ret != NULL) free(sendExceptionTwo_ret);    
    if(message2 != NULL) free(message2);    
    if(message3 != NULL) free(message3);    
}
void ServerExceptionServer::sendExceptionThree(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    ServerExceptionServer *srv = dynamic_cast<ServerExceptionServer*>(server);
    Estructura es;
        
    Estructura es2;
        
    Estructura es3;
    memset(&es3, 0, sizeof(Estructura));    
    Estructura sendExceptionThree_ret;
    memset(&sendExceptionThree_ret, 0, sizeof(Estructura));       
    sendExceptionThreeReply replyData;
    
    Estructura_initialize(&es2);    

    sendExceptionThreeRequestUtils::extractTypeData(*(sendExceptionThreeRequest*)requestData, es, es2);

    try
    {
        sendExceptionThree_ret = srv->_impl->sendExceptionThree(es, es2, es3);

        sendExceptionThreeReplyUtils::setTypeData(replyData, es2, es3, sendExceptionThree_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    sendExceptionThreeRequestTypeSupport::delete_data((sendExceptionThreeRequest*)requestData);
    
    Estructura_finalize(&sendExceptionThree_ret);    
    Estructura_finalize(&es2);    
    Estructura_finalize(&es3);    
}