/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "ServerExceptionRequestReplyUtils.h"
#include "ServerExceptionRequestReplyPlugin.h"


const char* sendExceptionRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionRequestTypeSupport::get_type_name();

        if(sendExceptionRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionRequestUtils::setTypeData(sendExceptionRequest& instance)
{
    
}

void sendExceptionRequestUtils::extractTypeData(sendExceptionRequest& data)
{
  
    
}


const char* sendExceptionReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionReplyTypeSupport::get_type_name();

        if(sendExceptionReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionReplyUtils::setTypeData(sendExceptionReply& instance)
{
    
}

void sendExceptionReplyUtils::extractTypeData(sendExceptionReply& data, eProsima::DDSRPC::ReturnMessage& retcode)
{
retcode = (eProsima::DDSRPC::ReturnMessage)data.ddsrpcRetCode;
  
    
}


const char* sendExceptionTwoRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionTwoRequestTypeSupport::get_type_name();

        if(sendExceptionTwoRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionTwoRequestUtils::setTypeData(sendExceptionTwoRequest& instance, /*in*/ char* message, /*inout*/ char* message2)
{
    instance.message = message;
    instance.message2 = message2;
    
}

void sendExceptionTwoRequestUtils::extractTypeData(sendExceptionTwoRequest& data, /*in*/ char*& message, /*inout*/ char*& message2)
{
    message = data.message;
    message2 = strdup(data.message2);  
    
}


const char* sendExceptionTwoReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionTwoReplyTypeSupport::get_type_name();

        if(sendExceptionTwoReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionTwoReplyUtils::setTypeData(sendExceptionTwoReply& instance, /*inout*/ char* message2, /*out*/ char* message3, /*out*/ char* sendExceptionTwo_ret)
{
    instance.message2 = message2;
    instance.message3 = message3;
    instance.sendExceptionTwo_ret = sendExceptionTwo_ret;            
}

void sendExceptionTwoReplyUtils::extractTypeData(sendExceptionTwoReply& data, eProsima::DDSRPC::ReturnMessage& retcode, /*inout*/ char*& message2, /*out*/ char*& message3, /*out*/ char*& sendExceptionTwo_ret)
{
retcode = (eProsima::DDSRPC::ReturnMessage)data.ddsrpcRetCode;
    if(message2 != NULL)
    	free(message2);message2 = data.message2;
    message3 = data.message3;  
    sendExceptionTwo_ret = data.sendExceptionTwo_ret;            
}


const char* sendExceptionThreeRequestUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionThreeRequestTypeSupport::get_type_name();

        if(sendExceptionThreeRequestTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionThreeRequestUtils::setTypeData(sendExceptionThreeRequest& instance, /*in*/ const Estructura& es, /*inout*/ const Estructura& es2)
{
    instance.es = es;
    instance.es2 = es2;
    
}

void sendExceptionThreeRequestUtils::extractTypeData(sendExceptionThreeRequest& data, /*in*/ Estructura& es, /*inout*/ Estructura& es2)
{
    es = data.es;
    EstructuraPluginSupport_copy_data(&es2, &data.es2);  
    
}


const char* sendExceptionThreeReplyUtils::registerType(DDS::DomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = sendExceptionThreeReplyTypeSupport::get_type_name();

        if(sendExceptionThreeReplyTypeSupport::register_type(clientParticipant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void sendExceptionThreeReplyUtils::setTypeData(sendExceptionThreeReply& instance, /*inout*/ const Estructura& es2, /*out*/ const Estructura& es3, /*out*/ const Estructura& sendExceptionThree_ret)
{
    instance.es2 = es2;
    instance.es3 = es3;
    instance.sendExceptionThree_ret = sendExceptionThree_ret;            
}

void sendExceptionThreeReplyUtils::extractTypeData(sendExceptionThreeReply& data, eProsima::DDSRPC::ReturnMessage& retcode, /*inout*/ Estructura& es2, /*out*/ Estructura& es3, /*out*/ Estructura& sendExceptionThree_ret)
{
retcode = (eProsima::DDSRPC::ReturnMessage)data.ddsrpcRetCode;
    Estructura_finalize(&es2);es2 = data.es2;
    es3 = data.es3;  
    sendExceptionThree_ret = data.sendExceptionThree_ret;            
}

 