#ifndef _ServerException_PROXY_H_
#define _ServerException_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "ServerExceptionRequestReplyUtils.h"
#include "ServerExceptionClientRPCSupport.h"

class ServerException_sendException
{
    public:
        virtual void sendException()
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class ServerException_sendExceptionTwo
{
    public:
        virtual void sendExceptionTwo(/*inout*/ char* message2, /*out*/ char* message3, /*out*/ char* sendExceptionTwo_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};
class ServerException_sendExceptionThree
{
    public:
        virtual void sendExceptionThree(/*inout*/ const Estructura& es2, /*out*/ const Estructura& es3, /*out*/ const Estructura& sendExceptionThree_ret)
        {
        }
   
        virtual void error(eProsima::DDSRPC::ReturnMessage message)
        {
        }
};

/**
 * \brief This class implements a specific server's proxy for the defined interface by user.
 */
class ServerExceptionProxy : public eProsima::DDSRPC::Client
{
    public:
    
        /**
         * \brief Default constructor. The server's proxy will use the default eProsima::DDSRPC::UDPTransport.
         *
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        ServerExceptionProxy(int domainId = 0, long timeout = 10000);

        /**
         * \brief This constructor sets the transport that will be used by the server's proxy.
         *
         * \param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destrcutor. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         */
        ServerExceptionProxy(eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~ServerExceptionProxy();
        
         
        void sendException();
         
        char* sendExceptionTwo(/*in*/ char* message, /*inout*/ char*& message2, /*out*/ char*& message3);
         
        Estructura sendExceptionThree(/*in*/ const Estructura& es, /*inout*/ Estructura& es2, /*out*/ Estructura& es3);
        
         
        void sendException_async(ServerException_sendException &obj);
         
        void sendExceptionTwo_async(ServerException_sendExceptionTwo &obj, /*in*/ char* message, /*inout*/ char* message2);
         
        void sendExceptionThree_async(ServerException_sendExceptionThree &obj, /*in*/ const Estructura& es, /*inout*/ const Estructura& es2);
        
    private:
        /**
         * \brief This function creates all RPC endpoints for each remote procedure.
         */
        void createRPCs();
        
        eProsima::DDSRPC::ClientRPC *sendException_Service;
        eProsima::DDSRPC::ClientRPC *sendExceptionTwo_Service;
        eProsima::DDSRPC::ClientRPC *sendExceptionThree_Service; 
};

#endif // _ServerException_PROXY_H_