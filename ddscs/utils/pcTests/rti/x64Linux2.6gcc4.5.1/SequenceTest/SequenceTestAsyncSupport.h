#ifndef _SequenceTest_ASYNC_SUPPORT_H_
#define _SequenceTest_ASYNC_SUPPORT_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/AsyncTask.h"


class SequenceTest_getSLongTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /// \brief The default constructor.
        SequenceTest_getSLongTask(SequenceTest_getSLongCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~SequenceTest_getSLongTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        SequenceTest_getSLongCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           SequenceTest_getSLongCallbackHandler &m_obj;
           
           SequenceTest_getSLongReply m_reply;
};

class SequenceTest_getStringTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /// \brief The default constructor.
        SequenceTest_getStringTask(SequenceTest_getStringCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~SequenceTest_getStringTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        SequenceTest_getStringCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           SequenceTest_getStringCallbackHandler &m_obj;
           
           SequenceTest_getStringReply m_reply;
};

class SequenceTest_getStringBoundedTask : public eProsima::DDSRPC::AsyncTask
{
    public:

        /// \brief The default constructor.
        SequenceTest_getStringBoundedTask(SequenceTest_getStringBoundedCallbackHandler &obj,
           eProsima::DDSRPC::Client *client);

        /// \brief The default destructor.
        virtual ~SequenceTest_getStringBoundedTask();
        
        virtual void execute();
        
        virtual void on_exception(const eProsima::DDSRPC::SystemException &ex);
        
        SequenceTest_getStringBoundedCallbackHandler& getObject();
        
        void* getReplyInstance();
        
        private:
        
           SequenceTest_getStringBoundedCallbackHandler &m_obj;
           
           SequenceTest_getStringBoundedReply m_reply;
};

#endif // _SequenceTest_ASYNC_SUPPORT_H_