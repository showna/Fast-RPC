/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file AsyncCallTestServer.cxx
 * This source file contains the definition of the server for interface AsyncCallTest.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "AsyncCallTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerInternalException.h"
#include "AsyncCallTestRequestReplyPlugin.h"

#include "AsyncCallTestServerRPCSupport.h"

AsyncCallTestServer::AsyncCallTestServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    int domainId) :
    Server(serviceName, strategy, NULL, domainId)
{
    _impl = new AsyncCallTestServerImpl();

    createRPCs();
}

AsyncCallTestServer::AsyncCallTestServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    eProsima::RPCDDS::Transport *transport, int domainId) :
    Server(serviceName, strategy, transport, domainId)
{
    _impl = new AsyncCallTestServerImpl();
    
    createRPCs();
}

AsyncCallTestServer::~AsyncCallTestServer()
{
    delete _impl;    
}

void AsyncCallTestServer::createRPCs()
{
    this->setRPC(new AsyncCallTest_getLongServerRPC("getLong", this,
                AsyncCallTest_getLongRequestUtils::registerType(getParticipant()),
                AsyncCallTest_getLongReplyUtils::registerType(getParticipant()),
                &AsyncCallTestServer::getLong));
    this->setRPC(new AsyncCallTest_getBooleanServerRPC("getBoolean", this,
                AsyncCallTest_getBooleanRequestUtils::registerType(getParticipant()),
                AsyncCallTest_getBooleanReplyUtils::registerType(getParticipant()),
                &AsyncCallTestServer::getBoolean));
    this->setRPC(new AsyncCallTest_getStringServerRPC("getString", this,
                AsyncCallTest_getStringRequestUtils::registerType(getParticipant()),
                AsyncCallTest_getStringReplyUtils::registerType(getParticipant()),
                &AsyncCallTestServer::getString));
    this->setRPC(new AsyncCallTest_duplicateServerRPC("duplicate", this,
                AsyncCallTest_duplicateRequestUtils::registerType(getParticipant()),
                AsyncCallTest_duplicateReplyUtils::registerType(getParticipant()),
                &AsyncCallTestServer::duplicate));

}

void AsyncCallTestServer::getLong(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    AsyncCallTestServer *srv = dynamic_cast<AsyncCallTestServer*>(server);
    DDS_Long  lo1 = 0;
    DDS_Long  lo2 = 0;
    DDS_Long  lo3 = 0;
    DDS_Long  getLong_ret = 0;   
    AsyncCallTest_getLongReply replyData;
    

    AsyncCallTest_getLongRequestUtils::extractTypeData(*(AsyncCallTest_getLongRequest*)requestData, lo1, lo2);

    try
    {
        getLong_ret = srv->_impl->getLong(lo1, lo2, lo3);

        AsyncCallTest_getLongReplyUtils::setTypeData(replyData, lo2, lo3, getLong_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    AsyncCallTest_getLongRequestTypeSupport::delete_data((AsyncCallTest_getLongRequest*)requestData);
    

}
void AsyncCallTestServer::getBoolean(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    AsyncCallTestServer *srv = dynamic_cast<AsyncCallTestServer*>(server);
    DDS_Boolean  bo1 = RTI_FALSE;
    DDS_Boolean  bo2 = RTI_FALSE;
    DDS_Boolean  bo3 = RTI_FALSE;
    DDS_Boolean  getBoolean_ret = RTI_FALSE;   
    AsyncCallTest_getBooleanReply replyData;
    

    AsyncCallTest_getBooleanRequestUtils::extractTypeData(*(AsyncCallTest_getBooleanRequest*)requestData, bo1, bo2);

    try
    {
        getBoolean_ret = srv->_impl->getBoolean(bo1, bo2, bo3);

        AsyncCallTest_getBooleanReplyUtils::setTypeData(replyData, bo2, bo3, getBoolean_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    AsyncCallTest_getBooleanRequestTypeSupport::delete_data((AsyncCallTest_getBooleanRequest*)requestData);
    

}
void AsyncCallTestServer::getString(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    AsyncCallTestServer *srv = dynamic_cast<AsyncCallTestServer*>(server);
    char*  s1 = NULL;
    char*  s2 = NULL;
    char*  s3 = NULL;
    char*  getString_ret = NULL;   
    AsyncCallTest_getStringReply replyData;
    

    AsyncCallTest_getStringRequestUtils::extractTypeData(*(AsyncCallTest_getStringRequest*)requestData, s1, s2);

    try
    {
        getString_ret = srv->_impl->getString(s1, s2, s3);

        AsyncCallTest_getStringReplyUtils::setTypeData(replyData, s2, s3, getString_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    AsyncCallTest_getStringRequestTypeSupport::delete_data((AsyncCallTest_getStringRequest*)requestData);
    
    if(getString_ret != NULL) free(getString_ret);
    if(s2 != NULL) free(s2);
    if(s3 != NULL) free(s3);
}
void AsyncCallTestServer::duplicate(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    AsyncCallTestServer *srv = dynamic_cast<AsyncCallTestServer*>(server);
    Structure ev;
    Structure duplicate_ret;
    memset(&duplicate_ret, 0, sizeof(Structure));   
    AsyncCallTest_duplicateReply replyData;
    

    AsyncCallTest_duplicateRequestUtils::extractTypeData(*(AsyncCallTest_duplicateRequest*)requestData, ev);

    try
    {
        duplicate_ret = srv->_impl->duplicate(ev);

        AsyncCallTest_duplicateReplyUtils::setTypeData(replyData, duplicate_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    AsyncCallTest_duplicateRequestTypeSupport::delete_data((AsyncCallTest_duplicateRequest*)requestData);
    
    Structure_finalize(&duplicate_ret);
}