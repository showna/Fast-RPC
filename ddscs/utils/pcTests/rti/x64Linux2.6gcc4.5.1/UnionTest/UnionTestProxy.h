#ifndef _UnionTest_PROXY_H_
#define _UnionTest_PROXY_H_

/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "client/Client.h"
#include "UnionTestRequestReplyUtils.h"
#include "UnionTestClientRPCSupport.h"
#include "exceptions/Exception.h"

/**
 * \brief This abstract class defines the callbacks that DDSRPC will call in an asynchronous call.
 *        These callback has to be implemented in a derived class.
 */
class UnionTest_getEmpleadoCallbackHandler
{
    public:
        /**
         * This function is called when is received the reply from the server.
         */
        virtual void getEmpleado(/*inout*/ const Empleado& em2, /*out*/ const Empleado& em3, /*out*/ const Empleado& getEmpleado_ret) = 0;
        
        /**
         * \brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * \param ex The exception that will be launched.
         */
        virtual void on_exception(const eProsima::DDSRPC::Exception &ex) = 0;
};

/**
 * \brief This class implements a specific server's proxy for the defined interface UnionTest.
 */
class UnionTestProxy : public eProsima::DDSRPC::Client
{
    public:
    
        /**
         * \brief Default constructor. The server's proxy will use the default eProsima::DDSRPC::UDPTransport.
         *
         * \param remoteServiceName The service's name that the remote server uses and the proxy will use to connect with it. 
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         * \exception eProsima::DDSRPC::InitializeException This exception is thrown when the initialization was wrong.
         */
        UnionTestProxy(std::string remoteServiceName, int domainId = 0, long timeout = 10000);

        /**
         * \brief This constructor sets the transport that will be used by the server's proxy.
         *
         * \param remoteServiceName The service's name that the remote server uses and the proxy will use to connect with it. 
         * \param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destrcutor. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::DDSRPC::ServerTimeoutException is thrown.
         * \exception eProsima::DDSRPC::InitializeException This exception is thrown when the initialization was wrong.
         */
        UnionTestProxy(std::string remoteServiceName, eProsima::DDSRPC::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~UnionTestProxy();
        
         
        Empleado getEmpleado(/*in*/ const Empleado& em1, /*inout*/ Empleado& em2, /*out*/ Empleado& em3);
        
         
        void getEmpleado_async(UnionTest_getEmpleadoCallbackHandler &obj, /*in*/ const Empleado& em1, /*inout*/ const Empleado& em2);
        
    private:
        /**
         * \brief This function creates all RPC endpoints for each remote procedure.
         */
        void createRPCs();
        
        eProsima::DDSRPC::ClientRPC *getEmpleado_Service; 
};

#endif // _UnionTest_PROXY_H_