/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "EnumYStringTestProxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "EnumYStringTestRequestReplyPlugin.h"
#include "EnumYStringTestAsyncSupport.h"
#include "exceptions/Exceptions.h"

EnumYStringTestProxy::EnumYStringTestProxy(std::string remoteServiceName, int domainId, long timeout) :
    Client(remoteServiceName, NULL, domainId, timeout)
{
    createRPCs();
}

EnumYStringTestProxy::EnumYStringTestProxy(std::string remoteServiceName, eProsima::DDSRPC::Transport *transport, int domainId, long timeout) :
    Client(remoteServiceName, transport, domainId, timeout)
{
    createRPCs();
}

EnumYStringTestProxy::~EnumYStringTestProxy()
{
    delete getEnum_Service;
    delete getString_Service;
    delete getStringBounded_Service;
}

void EnumYStringTestProxy::createRPCs()
{
    this->getEnum_Service = new EnumYStringTest_getEnumClientRPC("getEnum",
                                  EnumYStringTest_getEnumRequestUtils::registerType(getParticipant()),
                                  EnumYStringTest_getEnumReplyUtils::registerType(getParticipant()),
                                  this);
    this->getString_Service = new EnumYStringTest_getStringClientRPC("getString",
                                  EnumYStringTest_getStringRequestUtils::registerType(getParticipant()),
                                  EnumYStringTest_getStringReplyUtils::registerType(getParticipant()),
                                  this);
    this->getStringBounded_Service = new EnumYStringTest_getStringBoundedClientRPC("getStringBounded",
                                  EnumYStringTest_getStringBoundedRequestUtils::registerType(getParticipant()),
                                  EnumYStringTest_getStringBoundedReplyUtils::registerType(getParticipant()),
                                  this);

}

 
Valores EnumYStringTestProxy::getEnum(/*in*/ Valores v1, /*inout*/ Valores& v2, /*out*/ Valores& v3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    Valores  getEnum_ret = VALOR1;    
    EnumYStringTest_getEnumRequest instance;
    EnumYStringTest_getEnumReply retInstance;

    EnumYStringTest_getEnumReply_initialize(&retInstance);    
    EnumYStringTest_getEnumRequestUtils::setTypeData(instance, v1, v2);
    retcode = getEnum_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        EnumYStringTest_getEnumReplyUtils::extractTypeData(retInstance, retcode, v2, v3, getEnum_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ServerInternalException(retInstance.header.ddsrpcRetMsg);
            break;
    };
    

    return getEnum_ret;
}
 
char* EnumYStringTestProxy::getString(/*in*/ char* s1, /*inout*/ char*& s2, /*out*/ char*& s3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    char*  getString_ret = NULL;    
    EnumYStringTest_getStringRequest instance;
    EnumYStringTest_getStringReply retInstance;

    EnumYStringTest_getStringReply_initialize(&retInstance);    
    EnumYStringTest_getStringRequestUtils::setTypeData(instance, s1, s2);
    retcode = getString_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        EnumYStringTest_getStringReplyUtils::extractTypeData(retInstance, retcode, s2, s3, getString_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ServerInternalException(retInstance.header.ddsrpcRetMsg);
            break;
    };
    

    return getString_ret;
}
 
char* EnumYStringTestProxy::getStringBounded(/*in*/ char* sb1, /*inout*/ char*& sb2, /*out*/ char*& sb3) 
{
    eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    char*  getStringBounded_ret = NULL;    
    EnumYStringTest_getStringBoundedRequest instance;
    EnumYStringTest_getStringBoundedReply retInstance;

    EnumYStringTest_getStringBoundedReply_initialize(&retInstance);    
    EnumYStringTest_getStringBoundedRequestUtils::setTypeData(instance, sb1, sb2);
    retcode = getStringBounded_Service->execute(&instance, &retInstance, getTimeout());
    
    if(retcode == eProsima::DDSRPC::OPERATION_SUCCESSFUL)
    {
        EnumYStringTest_getStringBoundedReplyUtils::extractTypeData(retInstance, retcode, sb2, sb3, getStringBounded_ret);  
    }
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
            throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            throw eProsima::DDSRPC::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::DDSRPC::SERVER_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ServerInternalException(retInstance.header.ddsrpcRetMsg);
            break;
    };
    

    return getStringBounded_ret;
}

 
void EnumYStringTestProxy::getEnum_async(EnumYStringTest_getEnumCallbackHandler &obj, /*in*/ Valores v1, /*inout*/ Valores v2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    EnumYStringTest_getEnumRequest instance;
    EnumYStringTest_getEnumTask *task = NULL;
    EnumYStringTest_getEnumRequestUtils::setTypeData(instance, v1, v2);
    task = new EnumYStringTest_getEnumTask(obj, this);
    retcode = getEnum_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void EnumYStringTestProxy::getString_async(EnumYStringTest_getStringCallbackHandler &obj, /*in*/ char* s1, /*inout*/ char* s2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    EnumYStringTest_getStringRequest instance;
    EnumYStringTest_getStringTask *task = NULL;
    EnumYStringTest_getStringRequestUtils::setTypeData(instance, s1, s2);
    task = new EnumYStringTest_getStringTask(obj, this);
    retcode = getString_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
 
void EnumYStringTestProxy::getStringBounded_async(EnumYStringTest_getStringBoundedCallbackHandler &obj, /*in*/ char* sb1, /*inout*/ char* sb2) 
{
	eProsima::DDSRPC::ReturnMessage retcode = eProsima::DDSRPC::CLIENT_INTERNAL_ERROR;
    EnumYStringTest_getStringBoundedRequest instance;
    EnumYStringTest_getStringBoundedTask *task = NULL;
    EnumYStringTest_getStringBoundedRequestUtils::setTypeData(instance, sb1, sb2);
    task = new EnumYStringTest_getStringBoundedTask(obj, this);
    retcode = getStringBounded_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::DDSRPC::CLIENT_INTERNAL_ERROR:
            throw eProsima::DDSRPC::ClientInternalException("Error in client side");
            break;
        case eProsima::DDSRPC::NO_SERVER:
             throw eProsima::DDSRPC::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}