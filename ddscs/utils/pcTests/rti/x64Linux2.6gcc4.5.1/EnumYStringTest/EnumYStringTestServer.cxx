/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "EnumYStringTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerException.h"
#include "EnumYStringTestRequestReplyPlugin.h"

#include "EnumYStringTestServerRPCSupport.h"

EnumYStringTestServer::EnumYStringTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    int domainId) :
    Server(strategy, NULL, domainId)
{
    _impl = new EnumYStringTestServerImpl();

    createRPCs();
}

EnumYStringTestServer::EnumYStringTestServer(eProsima::DDSRPC::ServerStrategy *strategy,
    eProsima::DDSRPC::Transport *transport, int domainId) :
    Server(strategy, transport, domainId)
{
    _impl = new EnumYStringTestServerImpl();
    
    createRPCs();
}

EnumYStringTestServer::~EnumYStringTestServer()
{
    delete _impl;    
}

void EnumYStringTestServer::createRPCs()
{
    this->setRPC(new getEnumServerRPC("getEnum", this,
                getEnumRequestUtils::registerType(getParticipant()),
                getEnumReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServer::getEnum, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
                getStringReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServer::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
                getStringBoundedReplyUtils::registerType(getParticipant()),
                &EnumYStringTestServer::getStringBounded, getParticipant()));

}

void EnumYStringTestServer::getEnum(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = dynamic_cast<EnumYStringTestServer*>(server);
    Valores  v1 = VALOR1;    
    Valores  v2 = VALOR1;    
    Valores  v3 = VALOR1;    
    Valores  getEnum_ret = VALOR1;       
    getEnumReply replyData;
    
        

    getEnumRequestUtils::extractTypeData(*(getEnumRequest*)requestData, v1, v2);

    try
    {
        getEnum_ret = srv->_impl->getEnum(v1, v2, v3);

        getEnumReplyUtils::setTypeData(replyData, v2, v3, getEnum_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getEnumRequestTypeSupport::delete_data((getEnumRequest*)requestData);
    
        
        
        
}
void EnumYStringTestServer::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = dynamic_cast<EnumYStringTestServer*>(server);
    char*  s1 = NULL;    
    char*  s2 = NULL;    
    char*  s3 = NULL;    
    char*  getString_ret = NULL;       
    getStringReply replyData;
    
        

    getStringRequestUtils::extractTypeData(*(getStringRequest*)requestData, s1, s2);

    try
    {
        getString_ret = srv->_impl->getString(s1, s2, s3);

        getStringReplyUtils::setTypeData(replyData, s2, s3, getString_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    if(getString_ret != NULL) free(getString_ret);    
    if(s2 != NULL) free(s2);    
    if(s3 != NULL) free(s3);    
}
void EnumYStringTestServer::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = dynamic_cast<EnumYStringTestServer*>(server);
    char*  sb1 = NULL;    
    char*  sb2 = NULL;    
    char*  sb3 = NULL;    
    char*  getStringBounded_ret = NULL;       
    getStringBoundedReply replyData;
    
        

    getStringBoundedRequestUtils::extractTypeData(*(getStringBoundedRequest*)requestData, sb1, sb2);

    try
    {
        getStringBounded_ret = srv->_impl->getStringBounded(sb1, sb2, sb3);

        getStringBoundedReplyUtils::setTypeData(replyData, sb2, sb3, getStringBounded_ret);

        service->sendReply(requestData, &replyData, eProsima::DDSRPC::OPERATION_SUCCESSFUL);
    }
    catch(eProsima::DDSRPC::ServerException)
    {
        service->sendReply(requestData, NULL, eProsima::DDSRPC::SERVER_ERROR);
    }
    
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    if(getStringBounded_ret != NULL) free(getStringBounded_ret);    
    if(sb2 != NULL) free(sb2);    
    if(sb3 != NULL) free(sb3);    
}