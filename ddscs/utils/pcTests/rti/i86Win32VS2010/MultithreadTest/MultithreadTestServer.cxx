/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file MultithreadTestServer.cxx
 * This source file contains the definition of the server for interface MultithreadTest.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "MultithreadTestServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerInternalException.h"
#include "MultithreadTestRequestReplyPlugin.h"

#include "MultithreadTestServerRPCSupport.h"

MultithreadTestServer::MultithreadTestServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    int domainId) :
    Server(serviceName, strategy, NULL, domainId)
{
    _impl = new MultithreadTestServerImpl();

    createRPCs();
}

MultithreadTestServer::MultithreadTestServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    eProsima::RPCDDS::Transport *transport, int domainId) :
    Server(serviceName, strategy, transport, domainId)
{
    _impl = new MultithreadTestServerImpl();
    
    createRPCs();
}

MultithreadTestServer::~MultithreadTestServer()
{
    delete _impl;    
}

void MultithreadTestServer::createRPCs()
{
    this->setRPC(new MultithreadTest_testServerRPC("test", this,
                MultithreadTest_testRequestUtils::registerType(getParticipant()),
                MultithreadTest_testReplyUtils::registerType(getParticipant()),
                &MultithreadTestServer::test));

}

void MultithreadTestServer::test(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    MultithreadTestServer *srv = dynamic_cast<MultithreadTestServer*>(server);
    Dato dato1;
    Dato dato2;
    memset(&dato2, 0, sizeof(Dato));
    DDS_Long  test_ret = 0;   
    MultithreadTest_testReply replyData;
    

    MultithreadTest_testRequestUtils::extractTypeData(*(MultithreadTest_testRequest*)requestData, dato1);

    try
    {
        test_ret = srv->_impl->test(dato1, dato2);

        MultithreadTest_testReplyUtils::setTypeData(replyData, dato2, test_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    MultithreadTest_testRequestTypeSupport::delete_data((MultithreadTest_testRequest*)requestData);
    
    Dato_finalize(&dato2);
}