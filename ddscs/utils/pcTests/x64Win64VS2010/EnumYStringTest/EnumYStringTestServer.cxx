/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "EnumYStringTestServer.h"
#include "EnumYStringTestRequestReplyPlugin.h"
#include "EnumYStringTestServerRPCSupport.h"

EnumYStringTestServer::EnumYStringTestServer(int domainId, unsigned int threadCount,
const char *qosLibrary, const char *qosProfile) : Server(domainId, threadCount, qosLibrary, qosProfile)
{
    _impl = new EnumYStringTestImpl();
    
    this->setRPC(new getEnumServerRPC("getEnum", this,
                getEnumRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                getEnumReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                &EnumYStringTestServer::getEnum, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                getStringReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                &EnumYStringTestServer::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                getStringBoundedReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                &EnumYStringTestServer::getStringBounded, getParticipant()));

}
EnumYStringTestServer::~EnumYStringTestServer()
{
    delete _impl;    
}

void EnumYStringTestServer::getEnum(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = (EnumYStringTestServer*)server;
    Valores  v1 ;       
    Valores  v2 ;       
    Valores  v3 ;    
    Valores  getEnum_ret ;       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getEnumReply *replyData = NULL;

    getEnumRequestUtils::extractTypeData((getEnumRequest*)requestData, v1  ,v2  );
                                         
    returnedValue = srv->_impl->getEnum(v1  ,v2  ,v3  , getEnum_ret  );
           
    replyData = getEnumReplyUtils::createTypeData(v2  ,v3  , getEnum_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getEnumReplyTypeSupport::delete_data(replyData);
    getEnumRequestTypeSupport::delete_data((getEnumRequest*)requestData);
    
        
        
        
}
void EnumYStringTestServer::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = (EnumYStringTestServer*)server;
    char*  s1  = NULL;       
    char*  s2  = NULL;       
    char*  s3  = NULL;    
    char*  getString_ret  = NULL;       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getStringReply *replyData = NULL;

    getStringRequestUtils::extractTypeData((getStringRequest*)requestData, s1  ,s2  );
                                         
    returnedValue = srv->_impl->getString(s1  ,s2  ,s3  , getString_ret  );
           
    replyData = getStringReplyUtils::createTypeData(s2  ,s3  , getString_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getStringReplyTypeSupport::delete_data(replyData);
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    if(s2 != NULL) DDS::String_free(s2);    
    if(s3 != NULL) DDS::String_free(s3);    
    if(getString_ret != NULL) DDS::String_free(getString_ret);    
}
void EnumYStringTestServer::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    EnumYStringTestServer *srv = (EnumYStringTestServer*)server;
    char*  sb1  = NULL;       
    char*  sb2  = NULL;       
    char*  sb3  = NULL;    
    char*  getStringBounded_ret  = NULL;       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getStringBoundedReply *replyData = NULL;

    getStringBoundedRequestUtils::extractTypeData((getStringBoundedRequest*)requestData, sb1  ,sb2  );
                                         
    returnedValue = srv->_impl->getStringBounded(sb1  ,sb2  ,sb3  , getStringBounded_ret  );
           
    replyData = getStringBoundedReplyUtils::createTypeData(sb2  ,sb3  , getStringBounded_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getStringBoundedReplyTypeSupport::delete_data(replyData);
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    if(sb2 != NULL) DDS::String_free(sb2);    
    if(sb3 != NULL) DDS::String_free(sb3);    
    if(getStringBounded_ret != NULL) DDS::String_free(getStringBounded_ret);    
}