/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "EnumYStringTestProxy.h"
#include "client/ClientRPC.h"
#include "EnumYStringTestRequestReplyPlugin.h"


EnumYStringTestProxy::EnumYStringTestProxy(int domainId, unsigned int timeout
, const char *qosLibrary, const char *qosProfile) : Client(domainId, qosLibrary, qosProfile)
{
    m_timeout = timeout;
    this->getEnum_Service = new getEnumClientRPC("getEnum",
                                  getEnumRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getEnumReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getParticipant());
    this->getString_Service = new getStringClientRPC("getString",
                                  getStringRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getStringReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getParticipant());
    this->getStringBounded_Service = new getStringBoundedClientRPC("getStringBounded",
                                  getStringBoundedRequestUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getStringBoundedReplyUtils::registerType(getParticipant()),
    "EnumYStringTest_Library",
    "EnumYStringTest_Profile",
                                  getParticipant());

}

EnumYStringTestProxy::~EnumYStringTestProxy()
{
    delete getEnum_Service;
    delete getString_Service;
    delete getStringBounded_Service;
}

unsigned int EnumYStringTestProxy::getTimeout()
{
  return m_timeout;
}
 
 void EnumYStringTestProxy::setTimeout(unsigned int millis)
 {
    m_timeout = millis;
 }

 
eProsima::DDSRPC::ReturnMessage
 EnumYStringTestProxy::getEnum(Valores v1 ,Valores &v2,Valores &v3, Valores &getEnum_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue ;    
    getEnumRequest *instance = NULL;
    getEnumReply *retInstance = getEnumReplyTypeSupport::create_data();
    instance = getEnumRequestUtils::createTypeData(v1    ,v2    );
    returnedValue = getEnum_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getEnumReplyUtils::extractTypeData(retInstance, v2    ,v3    , getEnum_ret    );
            //getEnumReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getEnumReplyTypeSupport::delete_data(retInstance);
    getEnumRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage
 EnumYStringTestProxy::getString(char* s1 ,char* &s2,char* &s3, char* &getString_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue ;    
    getStringRequest *instance = NULL;
    getStringReply *retInstance = getStringReplyTypeSupport::create_data();
    instance = getStringRequestUtils::createTypeData(s1    ,s2    );
    returnedValue = getString_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getStringReplyUtils::extractTypeData(retInstance, s2    ,s3    , getString_ret    );
            //getStringReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getStringReplyTypeSupport::delete_data(retInstance);
    getStringRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
eProsima::DDSRPC::ReturnMessage
 EnumYStringTestProxy::getStringBounded(char* sb1 ,char* &sb2,char* &sb3, char* &getStringBounded_ret) 
{
    eProsima::DDSRPC::ReturnMessage  returnedValue ;    
    getStringBoundedRequest *instance = NULL;
    getStringBoundedReply *retInstance = getStringBoundedReplyTypeSupport::create_data();
    instance = getStringBoundedRequestUtils::createTypeData(sb1    ,sb2    );
    returnedValue = getStringBounded_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case eProsima::DDSRPC::CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case eProsima::DDSRPC::RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case eProsima::DDSRPC::SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case eProsima::DDSRPC::SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case eProsima::DDSRPC::WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case eProsima::DDSRPC::OPERATION_SUCCESSFUL:
            getStringBoundedReplyUtils::extractTypeData(retInstance, sb2    ,sb3    , getStringBounded_ret    );
            //getStringBoundedReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getStringBoundedReplyTypeSupport::delete_data(retInstance);
    getStringBoundedRequestTypeSupport::delete_data(instance);

    return returnedValue;
}