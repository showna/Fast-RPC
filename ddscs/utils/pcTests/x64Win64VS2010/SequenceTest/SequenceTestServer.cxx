/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "SequenceTestServer.h"
#include "SequenceTestRequestReplyPlugin.h"
#include "SequenceTestServerRPCSupport.h"

SequenceTestServer::SequenceTestServer(int domainId, unsigned int threadCount,
const char *qosLibrary, const char *qosProfile) : Server(domainId, threadCount, qosLibrary, qosProfile)
{
    _impl = new SequenceTestImpl();
    
    this->setRPC(new getSLongServerRPC("getSLong", this,
                getSLongRequestUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                getSLongReplyUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                &SequenceTestServer::getSLong, getParticipant()));
    this->setRPC(new getStringServerRPC("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                getStringReplyUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                &SequenceTestServer::getString, getParticipant()));
    this->setRPC(new getStringBoundedServerRPC("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                getStringBoundedReplyUtils::registerType(getParticipant()),
    "SequenceTest_Library",
    "SequenceTest_Profile",
                &SequenceTestServer::getStringBounded, getParticipant()));

}
SequenceTestServer::~SequenceTestServer()
{
    delete _impl;    
}

void SequenceTestServer::getSLong(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    largo *l1 = NULL;       
    largo *l2 = largoPluginSupport_create_data();       
    largo *l3 = largoPluginSupport_create_data();    
    largo *getSLong_ret = largoPluginSupport_create_data();       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getSLongReply *replyData = NULL;

    getSLongRequestUtils::extractTypeData((getSLongRequest*)requestData, l1  ,l2  );
                                         
    returnedValue = srv->_impl->getSLong(l1  ,l2  ,l3  , getSLong_ret  );
           
    replyData = getSLongReplyUtils::createTypeData(l2  ,l3  , getSLong_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getSLongReplyTypeSupport::delete_data(replyData);
    getSLongRequestTypeSupport::delete_data((getSLongRequest*)requestData);
    
    largoPluginSupport_destroy_data(l2);    
    largoPluginSupport_destroy_data(l3);    
    largoPluginSupport_destroy_data(getSLong_ret);    
}
void SequenceTestServer::getString(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    cadena *s1 = NULL;       
    cadena *s2 = cadenaPluginSupport_create_data();       
    cadena *s3 = cadenaPluginSupport_create_data();    
    cadena *getString_ret = cadenaPluginSupport_create_data();       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getStringReply *replyData = NULL;

    getStringRequestUtils::extractTypeData((getStringRequest*)requestData, s1  ,s2  );
                                         
    returnedValue = srv->_impl->getString(s1  ,s2  ,s3  , getString_ret  );
           
    replyData = getStringReplyUtils::createTypeData(s2  ,s3  , getString_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getStringReplyTypeSupport::delete_data(replyData);
    getStringRequestTypeSupport::delete_data((getStringRequest*)requestData);
    
    cadenaPluginSupport_destroy_data(s2);    
    cadenaPluginSupport_destroy_data(s3);    
    cadenaPluginSupport_destroy_data(getString_ret);    
}
void SequenceTestServer::getStringBounded(eProsima::DDSRPC::Server *server, void *requestData, eProsima::DDSRPC::ServerRPC *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    dattos *sb1 = NULL;       
    dattos *sb2 = dattosPluginSupport_create_data();       
    dattos *sb3 = dattosPluginSupport_create_data();    
    dattos *getStringBounded_ret = dattosPluginSupport_create_data();       
    eProsima::DDSRPC::ReturnMessage  returnedValue ;        
    getStringBoundedReply *replyData = NULL;

    getStringBoundedRequestUtils::extractTypeData((getStringBoundedRequest*)requestData, sb1  ,sb2  );
                                         
    returnedValue = srv->_impl->getStringBounded(sb1  ,sb2  ,sb3  , getStringBounded_ret  );
           
    replyData = getStringBoundedReplyUtils::createTypeData(sb2  ,sb3  , getStringBounded_ret  );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    getStringBoundedReplyTypeSupport::delete_data(replyData);
    getStringBoundedRequestTypeSupport::delete_data((getStringBoundedRequest*)requestData);
    
    dattosPluginSupport_destroy_data(sb2);    
    dattosPluginSupport_destroy_data(sb3);    
    dattosPluginSupport_destroy_data(getStringBounded_ret);    
}