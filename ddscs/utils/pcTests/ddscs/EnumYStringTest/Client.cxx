/** 
 * Generated by DDSCS                                                    *
 * Example client. Method params should be initialized before execution  *
 */

#include "EnumYStringTestProxy.h"
#include "EnumYStringTestRequestReplyPlugin.h"

int main()
{
    int domainId = 0;
    unsigned int timeoutInMillis = 4000;
    EnumYStringTestProxy *proxy = new EnumYStringTestProxy(domainId, timeoutInMillis,
"EnumYStringTest_Library", "EnumYStringTest_Profile");
    DDS_Duration_t period = {5,0};
    
    Valores  v1 = VALOR1;       
    Valores  v2 = VALOR2;       
    Valores  v3 ;    
    Valores  getEnum_ret ;       
    DDSCSMessages  getEnumRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getEnumRetValue = proxy->getEnum(v1    ,v2    ,v3    , getEnum_ret    );
    printf("getEnum: v2 = %s, v3 = %s, getEnum_ret =%s\n",
        (v2 == VALOR1 ? "VALOR1" : "VALOR2"),
        (v3 == VALOR1 ? "VALOR1" : "VALOR2"),
        (getEnum_ret == VALOR1 ? "VALOR1" : "VALOR2"));
        
        
        
        
    char*  s1  = DDS_String_dup("PRUEBA");       
    char*  s2  = DDS_String_dup("PRUEBA2");       
    char*  s3  = NULL;    
    char*  getString_ret  = NULL;       
    DDSCSMessages  getStringRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getStringRetValue = proxy->getString(s1    ,s2    ,s3    , getString_ret    );
    printf("getString: s2 = %s, s3 = %s, getString_ret = %s\n", s2, s3, getString_ret);
    
    if(s1 != NULL) DDS_String_free(s1);    
    if(s2 != NULL) DDS_String_free(s2);    
    if(s3 != NULL) DDS_String_free(s3);    
    if(getString_ret != NULL) DDS_String_free(getString_ret);    
    char*  sb1  = DDS_String_dup("PRUEBA");       
    char*  sb2  = DDS_String_dup("PRUEBA2");       
    char*  sb3  = NULL;    
    char*  getStringBounded_ret  = NULL;       
    DDSCSMessages  getStringBoundedRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getStringBoundedRetValue = proxy->getStringBounded(sb1    ,sb2    ,sb3    , getStringBounded_ret    );
    printf("getStringBounded: sb2 = %s, sb3 = %s, getStringBounded_ret = %s\n", sb2, sb3, getStringBounded_ret);
    
    if(sb1 != NULL) DDS_String_free(sb1);    
    if(sb2 != NULL) DDS_String_free(sb2);    
    if(sb3 != NULL) DDS_String_free(sb3);    
    if(getStringBounded_ret != NULL) DDS_String_free(getStringBounded_ret);    

   delete(proxy);
   NDDSUtility::sleep(period);
}
