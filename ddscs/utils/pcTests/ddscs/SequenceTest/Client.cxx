/** 
 * Generated by DDSCS                                                    *
 * Example client. Method params should be initialized before execution  *
 */

#include "SequenceTestProxy.h"
#include "SequenceTestRequestReplyPlugin.h"

int main()
{
    int domainId = 0;
    unsigned int timeoutInMillis = 4000;
    SequenceTestProxy *proxy = new SequenceTestProxy(domainId, timeoutInMillis);
    DDS_Duration_t period = {5,0};
    
    largo *l1 = largoPluginSupport_create_data();       
    largo *l2 = largoPluginSupport_create_data();       
    largo *l3 = largoPluginSupport_create_data();    
    largo *getSLong_ret = largoPluginSupport_create_data();       
    DDSCSMessages  getSLongRetValue ;

    l1->ensure_length(2, 2);
    l1->set_at(0, 1);
    l1->set_at(1, 2);
    l2->ensure_length(2, 2);
    l2->set_at(0, 3);
    l2->set_at(1, 4);

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getSLongRetValue = proxy->getSLong(*l1    ,*l2    ,*l3    , *getSLong_ret    );
    printf("getSLong: l2[0] = %d, l2[1] = %d, l3[0] = %d, l3[1] = %d, getSLong_ret[0] = %d, getSLong_ret[1] = %d\n",
        l2->get_at(0), l2->get_at(1), l3->get_at(0), l3->get_at(1), getSLong_ret->get_at(0), getSLong_ret->get_at(1));
    
    largoPluginSupport_destroy_data(l1);    
    largoPluginSupport_destroy_data(l2);    
    largoPluginSupport_destroy_data(l3);    
    largoPluginSupport_destroy_data(getSLong_ret);    
    cadena *s1 = cadenaPluginSupport_create_data();       
    cadena *s2 = cadenaPluginSupport_create_data();       
    cadena *s3 = cadenaPluginSupport_create_data();    
    cadena *getString_ret = cadenaPluginSupport_create_data();       
    DDSCSMessages  getStringRetValue ;  
    char *cadena;
    char *& ref = cadena;

    s1->ensure_length(2, 2);
    cadena = DDS_String_dup("PRUEBA");
    s1->set_at(0, (const char*&)ref);
    cadena = DDS_String_dup("PRUEBA2");
    s1->set_at(1, (const char*&)ref);
    s2->ensure_length(2, 2);
    cadena = DDS_String_dup("PRUEBA3");
    s2->set_at(0, (const char*&)ref);
    cadena = DDS_String_dup("PRUEBA4");
    s2->set_at(1, (const char*&)ref);

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getStringRetValue = proxy->getString(*s1    ,*s2    ,*s3    , *getString_ret    );
    printf("getString: s2[0] = %s, s2[1] = %s, s3[0] = %s, s3[1] = %s, ret[0] = %s, ret[1] = %s\n",
        s2->get_at(0), s2->get_at(1), s3->get_at(0), s3->get_at(1), getString_ret->get_at(0), getString_ret->get_at(1));
    
    cadenaPluginSupport_destroy_data(s1);    
    cadenaPluginSupport_destroy_data(s2);    
    cadenaPluginSupport_destroy_data(s3);    
    cadenaPluginSupport_destroy_data(getString_ret);    
    dattos *sb1 = dattosPluginSupport_create_data();       
    dattos *sb2 = dattosPluginSupport_create_data();       
    dattos *sb3 = dattosPluginSupport_create_data();    
    dattos *getStringBounded_ret = dattosPluginSupport_create_data();       
    DDSCSMessages  getStringBoundedRetValue ;     

    Datos data;
    sb1->ensure_length(2, 2);
    data.count = 1;
    data.message = DDS_String_dup("PRUEBA");
    sb1->set_at(0, data);
    data.count = 2;
    DDS_String_free(data.message);
    data.message = DDS_String_dup("PRUEBA2");
    sb1->set_at(1, data);
    sb2->ensure_length(2, 2);
    data.count = 3;
    DDS_String_free(data.message);
    data.message = DDS_String_dup("PRUEBA3");
    sb2->set_at(0, data);
    data.count = 4;
    DDS_String_free(data.message);
    data.message = DDS_String_dup("PRUEBA4");
    sb2->set_at(1, data);

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getStringBoundedRetValue = proxy->getStringBounded(*sb1    ,*sb2    ,*sb3    , *getStringBounded_ret    );
    printf("getStringBounded: sb2[0].count %d, sb2[0].message = %s,  sb2[1].count %d, sb2[1].message = %s, " \
        "sb3[0].count %d, sb3[0].message = %s, sb3[1].count %d, sb3[1].message = %s, ret[0].count %d, ret[0].message = %s, ret[1].count %d, ret[1].message = %s\n",
        sb2->get_at(0).count, sb2->get_at(0).message, sb2->get_at(1).count, sb2->get_at(1).message,
        sb3->get_at(0).count, sb3->get_at(0).message, sb3->get_at(1).count, sb3->get_at(1).message,
        getStringBounded_ret->get_at(0).count, getStringBounded_ret->get_at(0).message, getStringBounded_ret->get_at(1).count, getStringBounded_ret->get_at(1).message);
    
    dattosPluginSupport_destroy_data(sb1);    
    dattosPluginSupport_destroy_data(sb2);    
    dattosPluginSupport_destroy_data(sb3);    
    dattosPluginSupport_destroy_data(getStringBounded_ret);    

   delete(proxy);
   NDDSUtility::sleep(period);
}