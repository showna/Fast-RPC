/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "SequenceTestServer.h"
#include "SequenceTestRequestReplyPlugin.h"
#include "SequenceTestServerRemoteServiceSupport.h"

SequenceTestServer::SequenceTestServer(int domainId, unsigned int threadCount) : DDSCSServer(domainId, threadCount)
{
    _impl = new SequenceTestImpl();
    

        this->setRemoteService(new getSLongServerRemoteService("getSLong", this,
                getSLongRequestUtils::registerType(getParticipant()),
                getSLongReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getSLong, getParticipant()));

        this->setRemoteService(new getStringServerRemoteService("getString", this,
                getStringRequestUtils::registerType(getParticipant()),
                getStringReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getString, getParticipant()));

        this->setRemoteService(new getStringBoundedServerRemoteService("getStringBounded", this,
                getStringBoundedRequestUtils::registerType(getParticipant()),
                getStringBoundedReplyUtils::registerType(getParticipant()),
                &SequenceTestServer::getStringBounded, getParticipant()));

}
SequenceTestServer::~SequenceTestServer()
{
    delete _impl;    
}

void SequenceTestServer::getSLong(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    largo *l1 = largoPluginSupport_create_data();       
    largo *l2 = largoPluginSupport_create_data();       
    largo *l3 = largoPluginSupport_create_data();    
    largo *getSLong_ret = largoPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    getSLongReply *replyData = NULL;

    getSLongRequestUtils::extractTypeData((getSLongRequest*)requestData, *l1    ,*l2    );
                                         
    returnedValue = srv->_impl->getSLong(*l1    ,*l2    ,*l3    , *getSLong_ret    );
           
    replyData = getSLongReplyUtils::createTypeData(*l2    ,*l3    , *getSLong_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    largoPluginSupport_destroy_data(l1);    
    largoPluginSupport_destroy_data(l2);    
    largoPluginSupport_destroy_data(l3);    
    largoPluginSupport_destroy_data(getSLong_ret);           
}
void SequenceTestServer::getString(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    cadena *s1 = cadenaPluginSupport_create_data();       
    cadena *s2 = cadenaPluginSupport_create_data();       
    cadena *s3 = cadenaPluginSupport_create_data();    
    cadena *getString_ret = cadenaPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    getStringReply *replyData = NULL;

    getStringRequestUtils::extractTypeData((getStringRequest*)requestData, *s1    ,*s2    );
                                         
    returnedValue = srv->_impl->getString(*s1    ,*s2    ,*s3    , *getString_ret    );
           
    replyData = getStringReplyUtils::createTypeData(*s2    ,*s3    , *getString_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    cadenaPluginSupport_destroy_data(s1);    
    cadenaPluginSupport_destroy_data(s2);    
    cadenaPluginSupport_destroy_data(s3);    
    cadenaPluginSupport_destroy_data(getString_ret);           
}
void SequenceTestServer::getStringBounded(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    SequenceTestServer *srv = (SequenceTestServer*)server;
    dattos *sb1 = dattosPluginSupport_create_data();       
    dattos *sb2 = dattosPluginSupport_create_data();       
    dattos *sb3 = dattosPluginSupport_create_data();    
    dattos *getStringBounded_ret = dattosPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    getStringBoundedReply *replyData = NULL;

    getStringBoundedRequestUtils::extractTypeData((getStringBoundedRequest*)requestData, *sb1    ,*sb2    );
                                         
    returnedValue = srv->_impl->getStringBounded(*sb1    ,*sb2    ,*sb3    , *getStringBounded_ret    );
           
    replyData = getStringBoundedReplyUtils::createTypeData(*sb2    ,*sb3    , *getStringBounded_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    dattosPluginSupport_destroy_data(sb1);    
    dattosPluginSupport_destroy_data(sb2);    
    dattosPluginSupport_destroy_data(sb3);    
    dattosPluginSupport_destroy_data(getStringBounded_ret);           
}