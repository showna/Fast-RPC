/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "UnionTestServer.h"
#include "UnionTestRequestReplyPlugin.h"
#include "UnionTestServerRemoteServiceSupport.h"

UnionTestServer::UnionTestServer(int domainId, unsigned int threadCount) : DDSCSServer(domainId, threadCount)
{
    _impl = new UnionTestImpl();
    

        this->setRemoteService(new getEmpleadoServerRemoteService("getEmpleado", this,
                getEmpleadoRequestUtils::registerType(getParticipant()),
                getEmpleadoReplyUtils::registerType(getParticipant()),
                &UnionTestServer::getEmpleado, getParticipant()));

}
UnionTestServer::~UnionTestServer()
{
    delete _impl;    
}

void UnionTestServer::getEmpleado(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    UnionTestServer *srv = (UnionTestServer*)server;
    Empleado *em1 = EmpleadoPluginSupport_create_data();       
    Empleado *em2 = EmpleadoPluginSupport_create_data();       
    Empleado *em3 = EmpleadoPluginSupport_create_data();    
    Empleado *getEmpleado_ret = EmpleadoPluginSupport_create_data();       
    DDSCSMessages  returnedValue ;        
    getEmpleadoReply *replyData = NULL;

    getEmpleadoRequestUtils::extractTypeData((getEmpleadoRequest*)requestData, *em1    ,*em2    );
                                         
    returnedValue = srv->_impl->getEmpleado(*em1    ,*em2    ,*em3    , *getEmpleado_ret    );
           
    replyData = getEmpleadoReplyUtils::createTypeData(*em2    ,*em3    , *getEmpleado_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
    EmpleadoPluginSupport_destroy_data(em1);    
    EmpleadoPluginSupport_destroy_data(em2);    
    EmpleadoPluginSupport_destroy_data(em3);    
    EmpleadoPluginSupport_destroy_data(getEmpleado_ret);    
}