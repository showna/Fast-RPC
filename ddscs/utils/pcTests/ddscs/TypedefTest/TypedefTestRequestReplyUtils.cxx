/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "TypedefTestRequestReplyUtils.h"
#include "TypedefTestRequestReplyPlugin.h"


const char* getLargoRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getLargoRequestTypeSupport::get_type_name();

        if(getLargoRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getLargoRequest* getLargoRequestUtils::createTypeData(largo l1)
{
    getLargoRequest* instance = getLargoRequestTypeSupport::create_data();

    instance->l1 = l1;
    
    
    return instance;
}

void getLargoRequestUtils::extractTypeData(getLargoRequest* data , largo &l1)
{
    l1 = data->l1;
    
    
}


const char* getLargoReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getLargoReplyTypeSupport::get_type_name();

        if(getLargoReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getLargoReply* getLargoReplyUtils::createTypeData(largo l2, largo& returnedValue)
{
    getLargoReply* instance = getLargoReplyTypeSupport::create_data();

    instance->l2 = l2;
    
    instance->returnedValue = returnedValue;            
    return instance;
}

void getLargoReplyUtils::extractTypeData(getLargoReply* data , largo &l2, largo& returnedValue)
{
    l2 = data->l2;
    
    returnedValue = data->returnedValue;            
}


const char* getLarguisimoRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getLarguisimoRequestTypeSupport::get_type_name();

        if(getLarguisimoRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getLarguisimoRequest* getLarguisimoRequestUtils::createTypeData(larguisimo ll1)
{
    getLarguisimoRequest* instance = getLarguisimoRequestTypeSupport::create_data();

    instance->ll1 = ll1;
    
    
    return instance;
}

void getLarguisimoRequestUtils::extractTypeData(getLarguisimoRequest* data , larguisimo &ll1)
{
    ll1 = data->ll1;
    
    
}


const char* getLarguisimoReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getLarguisimoReplyTypeSupport::get_type_name();

        if(getLarguisimoReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getLarguisimoReply* getLarguisimoReplyUtils::createTypeData(larguisimo ll2, larguisimo& returnedValue)
{
    getLarguisimoReply* instance = getLarguisimoReplyTypeSupport::create_data();

    instance->ll2 = ll2;
    
    instance->returnedValue = returnedValue;            
    return instance;
}

void getLarguisimoReplyUtils::extractTypeData(getLarguisimoReply* data , larguisimo &ll2, larguisimo& returnedValue)
{
    ll2 = data->ll2;
    
    returnedValue = data->returnedValue;            
}


const char* getDatosDefRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getDatosDefRequestTypeSupport::get_type_name();

        if(getDatosDefRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getDatosDefRequest* getDatosDefRequestUtils::createTypeData(DatosDef & d1)
{
    getDatosDefRequest* instance = getDatosDefRequestTypeSupport::create_data();

    DatosDefPluginSupport_copy_data(&instance->d1, &d1);
    
    
    return instance;
}

void getDatosDefRequestUtils::extractTypeData(getDatosDefRequest* data , DatosDef  &d1)
{
    DatosDefPluginSupport_copy_data(&d1, &data->d1);
    
    
}


const char* getDatosDefReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getDatosDefReplyTypeSupport::get_type_name();

        if(getDatosDefReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getDatosDefReply* getDatosDefReplyUtils::createTypeData(DatosDef & d2, DatosDef& returnedValue)
{
    getDatosDefReply* instance = getDatosDefReplyTypeSupport::create_data();

    DatosDefPluginSupport_copy_data(&instance->d2, &d2);
    
    DatosDefPluginSupport_copy_data(&instance->returnedValue, &returnedValue);            
    return instance;
}

void getDatosDefReplyUtils::extractTypeData(getDatosDefReply* data , DatosDef  &d2, DatosDef& returnedValue)
{
    DatosDefPluginSupport_copy_data(&d2, &data->d2);
    
    DatosDefPluginSupport_copy_data(&returnedValue, &data->returnedValue);            
}


const char* getDatosDefondoRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getDatosDefondoRequestTypeSupport::get_type_name();

        if(getDatosDefondoRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getDatosDefondoRequest* getDatosDefondoRequestUtils::createTypeData(DatosDefondo & dd1)
{
    getDatosDefondoRequest* instance = getDatosDefondoRequestTypeSupport::create_data();

    DatosDefondoPluginSupport_copy_data(&instance->dd1, &dd1);
    
    
    return instance;
}

void getDatosDefondoRequestUtils::extractTypeData(getDatosDefondoRequest* data , DatosDefondo  &dd1)
{
    DatosDefondoPluginSupport_copy_data(&dd1, &data->dd1);
    
    
}


const char* getDatosDefondoReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getDatosDefondoReplyTypeSupport::get_type_name();

        if(getDatosDefondoReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getDatosDefondoReply* getDatosDefondoReplyUtils::createTypeData(DatosDefondo & dd2, DatosDefondo& returnedValue)
{
    getDatosDefondoReply* instance = getDatosDefondoReplyTypeSupport::create_data();

    DatosDefondoPluginSupport_copy_data(&instance->dd2, &dd2);
    
    DatosDefondoPluginSupport_copy_data(&instance->returnedValue, &returnedValue);            
    return instance;
}

void getDatosDefondoReplyUtils::extractTypeData(getDatosDefondoReply* data , DatosDefondo  &dd2, DatosDefondo& returnedValue)
{
    DatosDefondoPluginSupport_copy_data(&dd2, &data->dd2);
    
    DatosDefondoPluginSupport_copy_data(&returnedValue, &data->returnedValue);            
}


const char* getCadenaRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getCadenaRequestTypeSupport::get_type_name();

        if(getCadenaRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getCadenaRequest* getCadenaRequestUtils::createTypeData(cadena c1)
{
    getCadenaRequest* instance = getCadenaRequestTypeSupport::create_data();

    if(instance->c1 != NULL)
       DDS_String_free(instance->c1);
    instance->c1 = DDS_String_dup(c1);
    
    
    return instance;
}

void getCadenaRequestUtils::extractTypeData(getCadenaRequest* data , cadena &c1)
{
    c1 = DDS_String_dup(data->c1);
    
    
}


const char* getCadenaReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getCadenaReplyTypeSupport::get_type_name();

        if(getCadenaReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getCadenaReply* getCadenaReplyUtils::createTypeData(cadena c2, cadena& returnedValue)
{
    getCadenaReply* instance = getCadenaReplyTypeSupport::create_data();

    if(instance->c2 != NULL)
       DDS_String_free(instance->c2);
    instance->c2 = DDS_String_dup(c2);
    
    if(instance->returnedValue != NULL)
       DDS_String_free(instance->returnedValue);
    instance->returnedValue = DDS_String_dup(returnedValue);            
    return instance;
}

void getCadenaReplyUtils::extractTypeData(getCadenaReply* data , cadena &c2, cadena& returnedValue)
{
    c2 = DDS_String_dup(data->c2);
    
    returnedValue = DDS_String_dup(data->returnedValue);            
}


const char* getCorreaRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getCorreaRequestTypeSupport::get_type_name();

        if(getCorreaRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getCorreaRequest* getCorreaRequestUtils::createTypeData(correa cc1)
{
    getCorreaRequest* instance = getCorreaRequestTypeSupport::create_data();

    if(instance->cc1 != NULL)
       DDS_String_free(instance->cc1);
    instance->cc1 = DDS_String_dup(cc1);
    
    
    return instance;
}

void getCorreaRequestUtils::extractTypeData(getCorreaRequest* data , correa &cc1)
{
    cc1 = DDS_String_dup(data->cc1);
    
    
}


const char* getCorreaReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = getCorreaReplyTypeSupport::get_type_name();

        if(getCorreaReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

getCorreaReply* getCorreaReplyUtils::createTypeData(correa cc2, correa& returnedValue)
{
    getCorreaReply* instance = getCorreaReplyTypeSupport::create_data();

    if(instance->cc2 != NULL)
       DDS_String_free(instance->cc2);
    instance->cc2 = DDS_String_dup(cc2);
    
    if(instance->returnedValue != NULL)
       DDS_String_free(instance->returnedValue);
    instance->returnedValue = DDS_String_dup(returnedValue);            
    return instance;
}

void getCorreaReplyUtils::extractTypeData(getCorreaReply* data , correa &cc2, correa& returnedValue)
{
    cc2 = DDS_String_dup(data->cc2);
    
    returnedValue = DDS_String_dup(data->returnedValue);            
}

 
