/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "TypedefTestProxy.h"
#include "client/ClientRemoteService.h"
#include "TypedefTestRequestReplyPlugin.h"


TypedefTestProxy::TypedefTestProxy(int domainId, unsigned int timeout) : DDSCSClient(domainId)
{
    m_timeout = timeout;

        this->getLargo_Service = new getLargoClientRemoteService("getLargo",
                                  getLargoRequestUtils::registerType(getParticipant()),
                                  getLargoReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->getLarguisimo_Service = new getLarguisimoClientRemoteService("getLarguisimo",
                                  getLarguisimoRequestUtils::registerType(getParticipant()),
                                  getLarguisimoReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->getDatosDef_Service = new getDatosDefClientRemoteService("getDatosDef",
                                  getDatosDefRequestUtils::registerType(getParticipant()),
                                  getDatosDefReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->getDatosDefondo_Service = new getDatosDefondoClientRemoteService("getDatosDefondo",
                                  getDatosDefondoRequestUtils::registerType(getParticipant()),
                                  getDatosDefondoReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->getCadena_Service = new getCadenaClientRemoteService("getCadena",
                                  getCadenaRequestUtils::registerType(getParticipant()),
                                  getCadenaReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->getCorrea_Service = new getCorreaClientRemoteService("getCorrea",
                                  getCorreaRequestUtils::registerType(getParticipant()),
                                  getCorreaReplyUtils::registerType(getParticipant()),
                                  getParticipant());

}

TypedefTestProxy::~TypedefTestProxy()
{
    delete getLargo_Service;
    delete getLarguisimo_Service;
    delete getDatosDef_Service;
    delete getDatosDefondo_Service;
    delete getCadena_Service;
    delete getCorrea_Service;
}

unsigned int TypedefTestProxy::getTimeout()
{
  return m_timeout;
}
 
 void TypedefTestProxy::setTimeout(unsigned int millis)
 {
    m_timeout = millis;
 }

 
DDSCSMessages
 TypedefTestProxy::getLargo(largo l1 ,largo &l2, largo &getLargo_ret) 
{
    DDSCSMessages  returnedValue ;    
    getLargoRequest *instance = NULL;
    getLargoReply *retInstance = getLargoReplyTypeSupport::create_data();
    instance = getLargoRequestUtils::createTypeData(l1    );
    returnedValue = getLargo_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getLargoReplyUtils::extractTypeData(retInstance, l2    , getLargo_ret    );
            //getLargoReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getLargoReplyTypeSupport::delete_data(retInstance);
    getLargoRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 TypedefTestProxy::getLarguisimo(larguisimo ll1 ,larguisimo &ll2, larguisimo &getLarguisimo_ret) 
{
    DDSCSMessages  returnedValue ;    
    getLarguisimoRequest *instance = NULL;
    getLarguisimoReply *retInstance = getLarguisimoReplyTypeSupport::create_data();
    instance = getLarguisimoRequestUtils::createTypeData(ll1    );
    returnedValue = getLarguisimo_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getLarguisimoReplyUtils::extractTypeData(retInstance, ll2    , getLarguisimo_ret    );
            //getLarguisimoReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getLarguisimoReplyTypeSupport::delete_data(retInstance);
    getLarguisimoRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 TypedefTestProxy::getDatosDef(DatosDef & d1 ,DatosDef  &d2, DatosDef  &getDatosDef_ret) 
{
    DDSCSMessages  returnedValue ;    
    getDatosDefRequest *instance = NULL;
    getDatosDefReply *retInstance = getDatosDefReplyTypeSupport::create_data();
    instance = getDatosDefRequestUtils::createTypeData(d1    );
    returnedValue = getDatosDef_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getDatosDefReplyUtils::extractTypeData(retInstance, d2    , getDatosDef_ret    );
            //getDatosDefReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getDatosDefReplyTypeSupport::delete_data(retInstance);
    getDatosDefRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 TypedefTestProxy::getDatosDefondo(DatosDefondo & dd1 ,DatosDefondo  &dd2, DatosDefondo  &getDatosDefondo_ret) 
{
    DDSCSMessages  returnedValue ;    
    getDatosDefondoRequest *instance = NULL;
    getDatosDefondoReply *retInstance = getDatosDefondoReplyTypeSupport::create_data();
    instance = getDatosDefondoRequestUtils::createTypeData(dd1    );
    returnedValue = getDatosDefondo_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getDatosDefondoReplyUtils::extractTypeData(retInstance, dd2    , getDatosDefondo_ret    );
            //getDatosDefondoReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getDatosDefondoReplyTypeSupport::delete_data(retInstance);
    getDatosDefondoRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 TypedefTestProxy::getCadena(cadena c1 ,cadena &c2, cadena &getCadena_ret) 
{
    DDSCSMessages  returnedValue ;    
    getCadenaRequest *instance = NULL;
    getCadenaReply *retInstance = getCadenaReplyTypeSupport::create_data();
    instance = getCadenaRequestUtils::createTypeData(c1    );
    returnedValue = getCadena_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getCadenaReplyUtils::extractTypeData(retInstance, c2    , getCadena_ret    );
            //getCadenaReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getCadenaReplyTypeSupport::delete_data(retInstance);
    getCadenaRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 TypedefTestProxy::getCorrea(correa cc1 ,correa &cc2, correa &getCorrea_ret) 
{
    DDSCSMessages  returnedValue ;    
    getCorreaRequest *instance = NULL;
    getCorreaReply *retInstance = getCorreaReplyTypeSupport::create_data();
    instance = getCorreaRequestUtils::createTypeData(cc1    );
    returnedValue = getCorrea_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            getCorreaReplyUtils::extractTypeData(retInstance, cc2    , getCorrea_ret    );
            //getCorreaReplyTypeSupport::print_data(retInstance);          
            break;
    };
    
    getCorreaReplyTypeSupport::delete_data(retInstance);
    getCorreaRequestTypeSupport::delete_data(instance);

    return returnedValue;
}