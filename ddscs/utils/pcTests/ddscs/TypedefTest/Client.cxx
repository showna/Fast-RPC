/** 
 * Generated by DDSCS                                                    *
 * Example client. Method params should be initialized before execution  *
 */

#include "TypedefTestProxy.h"
#include "TypedefTestRequestReplyPlugin.h"

int main()
{
    int domainId = 0;
    unsigned int timeoutInMillis = 4000;
    TypedefTestProxy *proxy = new TypedefTestProxy(domainId, timeoutInMillis);
    DDS_Duration_t period = {5,0};
    
    largo  l1 = 1;       
   
    largo  l2 ;    
    largo  getLargo_ret ;       
    DDSCSMessages  getLargoRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getLargoRetValue = proxy->getLargo(l1    ,l2    , getLargo_ret    );
    printf("getLargo: l2 = %d, getLargo_reg = %d\n", l2, getLargo_ret);
        
        
        
    larguisimo  ll1 = 1;       
   
    larguisimo  ll2 ;    
    larguisimo  getLarguisimo_ret ;       
    DDSCSMessages  getLarguisimoRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getLarguisimoRetValue = proxy->getLarguisimo(ll1    ,ll2    , getLarguisimo_ret    );
    printf("getLarguisimo: ll2 = %d, getLarguisimo_reg = %d\n", ll2, getLarguisimo_ret);
    
        
        
        
    DatosDef *d1 = DatosDefPluginSupport_create_data();       
   
    DatosDef *d2 = DatosDefPluginSupport_create_data();    
    DatosDef *getDatosDef_ret = DatosDefPluginSupport_create_data();       
    DDSCSMessages  getDatosDefRetValue ;       

    d1->count = 1;
    d1->message = DDS_String_dup("PRUEBA");;

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getDatosDefRetValue = proxy->getDatosDef(*d1    ,*d2    , *getDatosDef_ret    );
    printf("getDatosDef: d2->count = %d, d2->message = %s, ret->count = %d, ret->message = %s\n",
        d2->count, d2->message, getDatosDef_ret->count, getDatosDef_ret->message);
    
    DatosDefPluginSupport_destroy_data(d1);    
    DatosDefPluginSupport_destroy_data(d2);    
    DatosDefPluginSupport_destroy_data(getDatosDef_ret);    
    DatosDefondo *dd1 = DatosDefondoPluginSupport_create_data();       
   
    DatosDefondo *dd2 = DatosDefondoPluginSupport_create_data();    
    DatosDefondo *getDatosDefondo_ret = DatosDefondoPluginSupport_create_data();       
    DDSCSMessages  getDatosDefondoRetValue ;        

    dd1->count = 1;
    dd1->message = DDS_String_dup("PRUEBA");

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getDatosDefondoRetValue = proxy->getDatosDefondo(*dd1    ,*dd2    , *getDatosDefondo_ret    );
    printf("getDatosDefondo: dd2->count = %d, dd2->message = %s, ret->count = %d, ret->message = %s\n",
        dd2->count, dd2->message, getDatosDefondo_ret->count, getDatosDefondo_ret->message);
    
    DatosDefondoPluginSupport_destroy_data(dd1);    
    DatosDefondoPluginSupport_destroy_data(dd2);    
    DatosDefondoPluginSupport_destroy_data(getDatosDefondo_ret);    
    cadena  c1  = DDS_String_dup("PRUEBA");       
   
    cadena  c2  = NULL;    
    cadena  getCadena_ret  = NULL;       
    DDSCSMessages  getCadenaRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getCadenaRetValue = proxy->getCadena(c1    ,c2    , getCadena_ret    );
    printf("getCadena: c2 = %s, ret = %s\n", c2, getCadena_ret);
    
    if(c1 != NULL) DDS_String_free(c1);    
    if(c2 != NULL) DDS_String_free(c2);    
    if(getCadena_ret != NULL) DDS_String_free(getCadena_ret);    
    correa  cc1  = DDS_String_dup("PRUEBA");       
   
    correa  cc2  = NULL;    
    correa  getCorrea_ret  = NULL;       
    DDSCSMessages  getCorreaRetValue ;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getCorreaRetValue = proxy->getCorrea(cc1    ,cc2    , getCorrea_ret    );
    printf("getCorrea: cc2 = %s, ret = %s\n", cc2, getCorrea_ret);
    
    if(cc1 != NULL) DDS_String_free(cc1);    
    if(cc2 != NULL) DDS_String_free(cc2);    
    if(getCorrea_ret != NULL) DDS_String_free(getCorrea_ret);    

   delete(proxy);
   NDDSUtility::sleep(period);
}
