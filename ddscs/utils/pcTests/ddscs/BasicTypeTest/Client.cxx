/** 
 * Generated by DDSCS                                                    *
 * Example client. Method params should be initialized before execution  *
 */

#include "BasicTypeTestProxy.h"
#include "BasicTypeTestRequestReplyPlugin.h"

int main()
{
    int domainId = 0;
    unsigned int timeoutInMillis = 4000;
    BasicTypeTestProxy *proxy = new BasicTypeTestProxy(domainId, timeoutInMillis,
"BasicTypeTest_Library", "BasicTypeTest_Profile");
    DDS_Duration_t period = {5,0};
    
    DDS_Octet  oc1 = 1;       
    DDS_Octet  oc2 = 2;       
    DDS_Octet  oc3;    
    DDS_Octet  getOctet_ret;       
    DDSCSMessages  getOctetRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getOctetRetValue = proxy->getOctet(oc1    ,oc2    ,oc3    , getOctet_ret    );
    printf("getOctet: oc2 = %hhu, oc3 = %hhu, ret = %hhu\n", oc2, oc3, getOctet_ret);

    DDS_Char  ch1 = 1;       
    DDS_Char  ch2 = 2;       
    DDS_Char  ch3;    
    DDS_Char  getChar_ret;       
    DDSCSMessages  getCharRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getCharRetValue = proxy->getChar(ch1    ,ch2    ,ch3    , getChar_ret    );
    printf("getChar: ch2 = %hhd, ch3 = %hhd, ret = %hhd\n", ch2, ch3, getChar_ret);

    DDS_Wchar  wch1 = 1;       
    DDS_Wchar  wch2 = 2;       
    DDS_Wchar  wch3;    
    DDS_Wchar  getWChar_ret;       
    DDSCSMessages  getWCharRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getWCharRetValue = proxy->getWChar(wch1    ,wch2    ,wch3    , getWChar_ret    );
    printf("getWChar: wch2 = %u, wch3 = %u, ret = %u\n", wch2, wch3, getWChar_ret);

    DDS_Short  sh1 = 1;       
    DDS_Short  sh2 = 2;       
    DDS_Short  sh3;    
    DDS_Short  getShort_ret;       
    DDSCSMessages  getShortRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getShortRetValue = proxy->getShort(sh1    ,sh2    ,sh3    , getShort_ret    );
    printf("getShort: sh2 = %hd, sh3 = %hd, ret = %hd\n", sh2, sh3, getShort_ret);

    DDS_UnsignedShort  ush1 = 1;       
    DDS_UnsignedShort  ush2 = 2;       
    DDS_UnsignedShort  ush3;    
    DDS_UnsignedShort  getUShort_ret;       
    DDSCSMessages  getUShortRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getUShortRetValue = proxy->getUShort(ush1    ,ush2    ,ush3    , getUShort_ret    );
    printf("getUShort: ush2 = %hu, ush3 = %hu, ret = %hu\n", ush2, ush3, getUShort_ret);

    DDS_Long  lo1 = 1;       
    DDS_Long  lo2 = 2;       
    DDS_Long  lo3;    
    DDS_Long  getLong_ret;       
    DDSCSMessages  getLongRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getLongRetValue = proxy->getLong(lo1    ,lo2    ,lo3    , getLong_ret    );
    printf("getLong: lo2 = %d, lo3 = %d, retu = %d\n", lo2, lo3, getLong_ret);

    DDS_UnsignedLong  ulo1 = 1;       
    DDS_UnsignedLong  ulo2 = 2;       
    DDS_UnsignedLong  ulo3;    
    DDS_UnsignedLong  getULong_ret;       
    DDSCSMessages  getULongRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getULongRetValue = proxy->getULong(ulo1    ,ulo2    ,ulo3    , getULong_ret    );
    printf("getULong: ulo2 = %u, ulo3 = %u, ret = %u\n", ulo2, ulo3, getULong_ret);

    DDS_LongLong  llo1 = 1;       
    DDS_LongLong  llo2 = 2;       
    DDS_LongLong  llo3;    
    DDS_LongLong  getLLong_ret;       
    DDSCSMessages  getLLongRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getLLongRetValue = proxy->getLLong(llo1    ,llo2    ,llo3    , getLLong_ret    );
    printf("getLLong: llo2 = %lld, llo3 = %lld, ret = %lld\n", llo2, llo3, getLLong_ret);

    DDS_UnsignedLongLong  ullo1 = 1;       
    DDS_UnsignedLongLong  ullo2 = 2;       
    DDS_UnsignedLongLong  ullo3;    
    DDS_UnsignedLongLong  getULLong_ret;       
    DDSCSMessages  getULLongRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getULLongRetValue = proxy->getULLong(ullo1    ,ullo2    ,ullo3    , getULLong_ret    );
    printf("getULLong: ullo2 = %llu, ullo3 = %llu, retu = %llu\n", ullo2, ullo3, getULLong_ret);

    DDS_Float  fl1 = 1.0;       
    DDS_Float  fl2 = 2.0;       
    DDS_Float  fl3;    
    DDS_Float  getFloat_ret;       
    DDSCSMessages  getFloatRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getFloatRetValue = proxy->getFloat(fl1    ,fl2    ,fl3    , getFloat_ret    );
    printf("getFloat: fl2 = %f, fl3 = %f, ret = %f\n", fl2, fl3, getFloat_ret);

    DDS_Double  do1 = 1.0;       
    DDS_Double  do2 = 2.0;       
    DDS_Double  do3;    
    DDS_Double  getDouble_ret;       
    DDSCSMessages  getDoubleRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getDoubleRetValue = proxy->getDouble(do1    ,do2    ,do3    , getDouble_ret    );
    printf("getDouble: do2 = %Lf, do3 = %Lf, ret = %Lf\n", do2, do3, getDouble_ret);

    DDS_Boolean  bo1 = RTI_TRUE;       
    DDS_Boolean  bo2 = RTI_FALSE;       
    DDS_Boolean  bo3;    
    DDS_Boolean  getBoolean_ret;       
    DDSCSMessages  getBooleanRetValue;        

    /**
     * Dynamic memory passed to the proxy will be freed before return *
     * Pass a copy if you want to keep it                             *
     */
    getBooleanRetValue = proxy->getBoolean(bo1    ,bo2    ,bo3    , getBoolean_ret    );
    printf("getBoolean: bo2 = %s, bo3 = %s, ret = %s\n", (bo2 == RTI_TRUE ? "true" : "false"), (bo3 == RTI_TRUE ? "true" : "false"),
        (getBoolean_ret == RTI_TRUE ? "true" : "false"));


   delete(proxy);
   NDDSUtility::sleep(period);
}
