/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "BasicTypeTestServer.h"
#include "BasicTypeTestRequestReplyPlugin.h"
#include "BasicTypeTestServerRemoteServiceSupport.h"

BasicTypeTestServer::BasicTypeTestServer(int domainId, const char *qosLibrary,
    const char *qosProfile, unsigned int threadCount) : DDSCSServer(domainId, qosLibrary, qosProfile, threadCount)
{
    _impl = new BasicTypeTestImpl();
    

        this->setRemoteService(new getOctetServerRemoteService("getOctet", this,
                getOctetRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getOctetReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getOctet, getParticipant()));

        this->setRemoteService(new getCharServerRemoteService("getChar", this,
                getCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getChar, getParticipant()));

        this->setRemoteService(new getWCharServerRemoteService("getWChar", this,
                getWCharRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getWCharReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getWChar, getParticipant()));

        this->setRemoteService(new getShortServerRemoteService("getShort", this,
                getShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getShort, getParticipant()));

        this->setRemoteService(new getUShortServerRemoteService("getUShort", this,
                getUShortRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getUShortReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getUShort, getParticipant()));

        this->setRemoteService(new getLongServerRemoteService("getLong", this,
                getLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getLong, getParticipant()));

        this->setRemoteService(new getULongServerRemoteService("getULong", this,
                getULongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getULongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getULong, getParticipant()));

        this->setRemoteService(new getLLongServerRemoteService("getLLong", this,
                getLLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getLLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getLLong, getParticipant()));

        this->setRemoteService(new getULLongServerRemoteService("getULLong", this,
                getULLongRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getULLongReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getULLong, getParticipant()));

        this->setRemoteService(new getFloatServerRemoteService("getFloat", this,
                getFloatRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getFloatReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getFloat, getParticipant()));

        this->setRemoteService(new getDoubleServerRemoteService("getDouble", this,
                getDoubleRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getDoubleReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getDouble, getParticipant()));

        this->setRemoteService(new getBooleanServerRemoteService("getBoolean", this,
                getBooleanRequestUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                getBooleanReplyUtils::registerType(getParticipant()),
    "BasicTypeTest_Library",
    "BasicTypeTest_Profile",
                &BasicTypeTestServer::getBoolean, getParticipant()));

}
BasicTypeTestServer::~BasicTypeTestServer()
{
    delete _impl;    
}

void BasicTypeTestServer::getOctet(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Octet  oc1 ;       
    DDS_Octet  oc2 ;       
    DDS_Octet  oc3 ;    
    DDS_Octet  getOctet_ret ;       
    DDSCSMessages  returnedValue ;        
    getOctetReply *replyData = NULL;

    getOctetRequestUtils::extractTypeData((getOctetRequest*)requestData, oc1    ,oc2    );
                                         
    returnedValue = srv->_impl->getOctet(oc1    ,oc2    ,oc3    , getOctet_ret    );
           
    replyData = getOctetReplyUtils::createTypeData(oc2    ,oc3    , getOctet_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getChar(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Char  ch1 ;       
    DDS_Char  ch2 ;       
    DDS_Char  ch3 ;    
    DDS_Char  getChar_ret ;       
    DDSCSMessages  returnedValue ;        
    getCharReply *replyData = NULL;

    getCharRequestUtils::extractTypeData((getCharRequest*)requestData, ch1    ,ch2    );
                                         
    returnedValue = srv->_impl->getChar(ch1    ,ch2    ,ch3    , getChar_ret    );
           
    replyData = getCharReplyUtils::createTypeData(ch2    ,ch3    , getChar_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getWChar(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Wchar  wch1 ;       
    DDS_Wchar  wch2 ;       
    DDS_Wchar  wch3 ;    
    DDS_Wchar  getWChar_ret ;       
    DDSCSMessages  returnedValue ;        
    getWCharReply *replyData = NULL;

    getWCharRequestUtils::extractTypeData((getWCharRequest*)requestData, wch1    ,wch2    );
                                         
    returnedValue = srv->_impl->getWChar(wch1    ,wch2    ,wch3    , getWChar_ret    );
           
    replyData = getWCharReplyUtils::createTypeData(wch2    ,wch3    , getWChar_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getShort(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Short  sh1 ;       
    DDS_Short  sh2 ;       
    DDS_Short  sh3 ;    
    DDS_Short  getShort_ret ;       
    DDSCSMessages  returnedValue ;        
    getShortReply *replyData = NULL;

    getShortRequestUtils::extractTypeData((getShortRequest*)requestData, sh1    ,sh2    );
                                         
    returnedValue = srv->_impl->getShort(sh1    ,sh2    ,sh3    , getShort_ret    );
           
    replyData = getShortReplyUtils::createTypeData(sh2    ,sh3    , getShort_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getUShort(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedShort  ush1 ;       
    DDS_UnsignedShort  ush2 ;       
    DDS_UnsignedShort  ush3 ;    
    DDS_UnsignedShort  getUShort_ret ;       
    DDSCSMessages  returnedValue ;        
    getUShortReply *replyData = NULL;

    getUShortRequestUtils::extractTypeData((getUShortRequest*)requestData, ush1    ,ush2    );
                                         
    returnedValue = srv->_impl->getUShort(ush1    ,ush2    ,ush3    , getUShort_ret    );
           
    replyData = getUShortReplyUtils::createTypeData(ush2    ,ush3    , getUShort_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getLong(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Long  lo1 ;       
    DDS_Long  lo2 ;       
    DDS_Long  lo3 ;    
    DDS_Long  getLong_ret ;       
    DDSCSMessages  returnedValue ;        
    getLongReply *replyData = NULL;

    getLongRequestUtils::extractTypeData((getLongRequest*)requestData, lo1    ,lo2    );
                                         
    returnedValue = srv->_impl->getLong(lo1    ,lo2    ,lo3    , getLong_ret    );
           
    replyData = getLongReplyUtils::createTypeData(lo2    ,lo3    , getLong_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getULong(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedLong  ulo1 ;       
    DDS_UnsignedLong  ulo2 ;       
    DDS_UnsignedLong  ulo3 ;    
    DDS_UnsignedLong  getULong_ret ;       
    DDSCSMessages  returnedValue ;        
    getULongReply *replyData = NULL;

    getULongRequestUtils::extractTypeData((getULongRequest*)requestData, ulo1    ,ulo2    );
                                         
    returnedValue = srv->_impl->getULong(ulo1    ,ulo2    ,ulo3    , getULong_ret    );
           
    replyData = getULongReplyUtils::createTypeData(ulo2    ,ulo3    , getULong_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getLLong(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_LongLong  llo1 ;       
    DDS_LongLong  llo2 ;       
    DDS_LongLong  llo3 ;    
    DDS_LongLong  getLLong_ret ;       
    DDSCSMessages  returnedValue ;        
    getLLongReply *replyData = NULL;

    getLLongRequestUtils::extractTypeData((getLLongRequest*)requestData, llo1    ,llo2    );
                                         
    returnedValue = srv->_impl->getLLong(llo1    ,llo2    ,llo3    , getLLong_ret    );
           
    replyData = getLLongReplyUtils::createTypeData(llo2    ,llo3    , getLLong_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getULLong(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_UnsignedLongLong  ullo1 ;       
    DDS_UnsignedLongLong  ullo2 ;       
    DDS_UnsignedLongLong  ullo3 ;    
    DDS_UnsignedLongLong  getULLong_ret ;       
    DDSCSMessages  returnedValue ;        
    getULLongReply *replyData = NULL;

    getULLongRequestUtils::extractTypeData((getULLongRequest*)requestData, ullo1    ,ullo2    );
                                         
    returnedValue = srv->_impl->getULLong(ullo1    ,ullo2    ,ullo3    , getULLong_ret    );
           
    replyData = getULLongReplyUtils::createTypeData(ullo2    ,ullo3    , getULLong_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getFloat(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Float  fl1 ;       
    DDS_Float  fl2 ;       
    DDS_Float  fl3 ;    
    DDS_Float  getFloat_ret ;       
    DDSCSMessages  returnedValue ;        
    getFloatReply *replyData = NULL;

    getFloatRequestUtils::extractTypeData((getFloatRequest*)requestData, fl1    ,fl2    );
                                         
    returnedValue = srv->_impl->getFloat(fl1    ,fl2    ,fl3    , getFloat_ret    );
           
    replyData = getFloatReplyUtils::createTypeData(fl2    ,fl3    , getFloat_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getDouble(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Double  do1 ;       
    DDS_Double  do2 ;       
    DDS_Double  do3 ;    
    DDS_Double  getDouble_ret ;       
    DDSCSMessages  returnedValue ;        
    getDoubleReply *replyData = NULL;

    getDoubleRequestUtils::extractTypeData((getDoubleRequest*)requestData, do1    ,do2    );
                                         
    returnedValue = srv->_impl->getDouble(do1    ,do2    ,do3    , getDouble_ret    );
           
    replyData = getDoubleReplyUtils::createTypeData(do2    ,do3    , getDouble_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
void BasicTypeTestServer::getBoolean(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    BasicTypeTestServer *srv = (BasicTypeTestServer*)server;
    DDS_Boolean  bo1 ;       
    DDS_Boolean  bo2 ;       
    DDS_Boolean  bo3 ;    
    DDS_Boolean  getBoolean_ret ;       
    DDSCSMessages  returnedValue ;        
    getBooleanReply *replyData = NULL;

    getBooleanRequestUtils::extractTypeData((getBooleanRequest*)requestData, bo1    ,bo2    );
                                         
    returnedValue = srv->_impl->getBoolean(bo1    ,bo2    ,bo3    , getBoolean_ret    );
           
    replyData = getBooleanReplyUtils::createTypeData(bo2    ,bo3    , getBoolean_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
    
        
        
        
               
}
