/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file Client.cxx
 * This source file shows a simple example of how to create a proxy for interface SimpleDelay.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "SimpleDelayProxy.h"
#include "SimpleDelayRequestReplyPlugin.h"
#include "transports/UDPTransport.h"
#include "exceptions/Exceptions.h"

#include <iostream>
#include <boost/chrono.hpp>
#include "boost/config/user.hpp"
#include "boost/thread.hpp"

static boost::thread thread1, thread2, thread3, thread4;
static int run = 0;

void* executeThread(SimpleDelayProxy *proxy)
{
    const char* const METHOD_NAME = "executeThread";
    int count = 0;

    // Wait until start.
    while(!run)
    {
        boost::this_thread::sleep(boost::posix_time::microseconds(200));
    }

    for(; count < 10000; ++count)
    {
        Estructura es, ret;
        Estructura_initialize(&es);
        es.valor1 = count;
        es.valor2 = count*2;
        es.valor3 = "Esto es una prueba para el test de performance rpcdds vs thrift vs rpcdds";
        es.seq.ensure_length(250, 250);
        for(int i = 0; i < 250; ++i)
            es.seq[i] = i;

        try
        {
            ret = proxy->duplicate(es);
        }
        catch(eProsima::RPCDDS::Exception &ex)
        {
            printf("Error in operation (%d). %s\n", count, ex.what());
        }
        es.valor3 = NULL;
        Estructura_finalize(&es);
    }

    return NULL;
}

int main(int argc, char **argv)
{
    boost::chrono::duration<double> program_seconds;

    if(argc == 2)
    {
        uint8_t ip[4];

        // Check that the parameter is a IP address.
        if(sscanf(argv[1], "%hhu.%hhu.%hhu.%hhu", &ip[0], &ip[1], &ip[2], &ip[3]) == 4)
        {
            eProsima::RPCDDS::UDPTransport *udpt1 = NULL;
            eProsima::RPCDDS::UDPTransport *udpt2 = NULL;
            eProsima::RPCDDS::UDPTransport *udpt3 = NULL;
            eProsima::RPCDDS::UDPTransport *udpt4 = NULL;
            SimpleDelayProxy *proxy1 = NULL;
            SimpleDelayProxy *proxy2 = NULL;
            SimpleDelayProxy *proxy3 = NULL;
            SimpleDelayProxy *proxy4 = NULL;

            // Creation of the proxy for interface "SimpleDelay".
            try
            {
                udpt1 = new eProsima::RPCDDS::UDPTransport(argv[1]);
                proxy1 = new SimpleDelayProxy("SimpleDelayService", udpt1);
                udpt2 = new eProsima::RPCDDS::UDPTransport(argv[1]);
                proxy2 = new SimpleDelayProxy("SimpleDelayService", udpt2);
                udpt3 = new eProsima::RPCDDS::UDPTransport(argv[1]);
                proxy3 = new SimpleDelayProxy("SimpleDelayService", udpt3);
                udpt4 = new eProsima::RPCDDS::UDPTransport(argv[1]);
                proxy4 = new SimpleDelayProxy("SimpleDelayService", udpt4);
            }
            catch(eProsima::RPCDDS::InitializeException &ex)
            {
                std::cout << ex.what() << std::endl;
                return -1;
            }

            Sleep(10000);
            
            thread1 = boost::thread(executeThread, proxy1);
            thread2 = boost::thread(executeThread, proxy2);
            thread3 = boost::thread(executeThread, proxy3);
            thread4 = boost::thread(executeThread, proxy4);

            run = 1;

            boost::chrono::system_clock::time_point program_start = boost::chrono::system_clock::now();

            thread1.join();
            thread2.join();
            thread3.join();
            thread4.join();
            run = 0;

            program_seconds = boost::chrono::system_clock::now() - program_start;

            // Print total execution time.
            std::cout << "Program execution in " << program_seconds.count() << " seconds." << std::endl;

            delete(proxy1);
            delete(proxy2);
            delete(proxy3);
            delete(proxy4);
        }
        else
        {
            std::cout << "Parameter is not a valid IPv4 address." << std::endl;
        }
    }
    else
    {
        std::cout << "The server IP address is expected." << std::endl;
    }

    return 0;
}
