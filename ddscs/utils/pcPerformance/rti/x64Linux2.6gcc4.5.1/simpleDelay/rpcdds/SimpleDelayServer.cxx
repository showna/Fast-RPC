/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file SimpleDelayServer.cxx
 * This source file contains the definition of the server for interface SimpleDelay.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "SimpleDelayServer.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "exceptions/ServerInternalException.h"
#include "SimpleDelayRequestReplyPlugin.h"

#include "SimpleDelayServerRPCSupport.h"

SimpleDelayServer::SimpleDelayServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    int domainId) :
    Server(serviceName, strategy, NULL, domainId)
{
    _impl = new SimpleDelayServerImpl();

    createRPCs();
}

SimpleDelayServer::SimpleDelayServer(std::string serviceName, eProsima::RPCDDS::ServerStrategy *strategy,
    eProsima::RPCDDS::Transport *transport, int domainId) :
    Server(serviceName, strategy, transport, domainId)
{
    _impl = new SimpleDelayServerImpl();
    
    createRPCs();
}

SimpleDelayServer::~SimpleDelayServer()
{
    delete _impl;    
}

void SimpleDelayServer::createRPCs()
{
    this->setRPC(new SimpleDelay_sumaServerRPC("suma", this,
                SimpleDelay_sumaRequestUtils::registerType(getParticipant()),
                SimpleDelay_sumaReplyUtils::registerType(getParticipant()),
                &SimpleDelayServer::suma));
    this->setRPC(new SimpleDelay_duplicateServerRPC("duplicate", this,
                SimpleDelay_duplicateRequestUtils::registerType(getParticipant()),
                SimpleDelay_duplicateReplyUtils::registerType(getParticipant()),
                &SimpleDelayServer::duplicate));

}

void SimpleDelayServer::suma(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    SimpleDelayServer *srv = dynamic_cast<SimpleDelayServer*>(server);
    DDS_Long  value1 = 0;
    DDS_Long  value2 = 0;
    DDS_Long  suma_ret = 0;   
    SimpleDelay_sumaReply replyData;
    

    SimpleDelay_sumaRequestUtils::extractTypeData(*(SimpleDelay_sumaRequest*)requestData, value1, value2);

    try
    {
        suma_ret = srv->_impl->suma(value1, value2);

        SimpleDelay_sumaReplyUtils::setTypeData(replyData, suma_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    SimpleDelay_sumaRequestTypeSupport::delete_data((SimpleDelay_sumaRequest*)requestData);
    
}
void SimpleDelayServer::duplicate(eProsima::RPCDDS::Server *server, void *requestData, eProsima::RPCDDS::ServerRPC *service) 
{ 
    SimpleDelayServer *srv = dynamic_cast<SimpleDelayServer*>(server);
    Estructura es;
    Estructura duplicate_ret;
    memset(&duplicate_ret, 0, sizeof(Estructura));   
    SimpleDelay_duplicateReply replyData;
    

    SimpleDelay_duplicateRequestUtils::extractTypeData(*(SimpleDelay_duplicateRequest*)requestData, es);

    try
    {
        duplicate_ret = srv->_impl->duplicate(es);

        SimpleDelay_duplicateReplyUtils::setTypeData(replyData, duplicate_ret);
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
        replyData.header.rpcddsRetMsg = NULL;

        service->sendReply(requestData, &replyData);
    }
    catch(const eProsima::RPCDDS::ServerInternalException &ex)
    {
        memset(&replyData, 0, sizeof(replyData));
        replyData.header.rpcddsRetCode = eProsima::RPCDDS::SERVER_INTERNAL_ERROR;
        replyData.header.rpcddsRetMsg = (char*)ex.what();
        
        service->sendReply(requestData, &replyData);
    }
    
    SimpleDelay_duplicateRequestTypeSupport::delete_data((SimpleDelay_duplicateRequest*)requestData);
    
    Estructura_finalize(&duplicate_ret);
}