/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <netinet/in.h>
#include <boost/shared_ptr.hpp>
#include <boost/chrono.hpp>


#include "SimpleDelay.h"
#include "SimpleDelay.tcc"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TSocket.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;

int main(int argc, char** argv)
{
    if(argc == 2)
    {
        uint8_t ip[4];

        // Check that the parameter is a IP address.
        if(sscanf(argv[1], "%hhu.%hhu.%hhu.%hhu", &ip[0], &ip[1], &ip[2], &ip[3]) == 4)
        {
            boost::shared_ptr<TSocket> socket(new TSocket(argv[1], 9090));
            boost::shared_ptr<TBufferedTransport> transport(new TBufferedTransport(socket));
            boost::shared_ptr<TBinaryProtocol> protocol(new TBinaryProtocol(transport));
            SimpleDelayClient client(protocol);

            try
            {
                transport->open();

                boost::chrono::system_clock::time_point program_start = boost::chrono::system_clock::now();

                boost::chrono::system_clock::time_point procedure_start = boost::chrono::system_clock::now();
                // Testing suma procedure.
                for(int i = 0; i < 200; ++i)
                {
                    boost::chrono::system_clock::time_point call_start = boost::chrono::system_clock::now();
                    int32_t result = client.suma(10, i);
                    boost::chrono::duration<double> call_seconds = boost::chrono::system_clock::now() - call_start;
                    std::cout << i << " > suma: " << result << " - in " << call_seconds.count() << " seconds." << std::endl;
                }

                boost::chrono::duration<double> procedure_seconds = boost::chrono::system_clock::now() - procedure_start;
                std::cout << "Executed 200 suma procedures in " << procedure_seconds.count() << " seconds." << std::endl;

                procedure_start = boost::chrono::system_clock::now();
                // Testing ducplicate procedure.
                for(int i = 0; i < 200; ++i)
                {
                    Estructura es, ret;
                    es.valor1 = i;
                    es.valor2 = i*2;
                    es.valor3 = "Ricardo";

                    boost::chrono::system_clock::time_point call_start = boost::chrono::system_clock::now();
                    client.duplicate(ret, es);
                    boost::chrono::duration<double> call_seconds = boost::chrono::system_clock::now() - call_start;
                    std::cout << i << " > duplicate: {" << ret.valor1 << "," << ret.valor2 << "," << es.valor3 << "} - in " << call_seconds.count() << " seconds." << std::endl;
                }

                procedure_seconds = boost::chrono::system_clock::now() - procedure_start;
                std::cout << "Executed 200 duplicate procedures in " << procedure_seconds.count() << " seconds." << std::endl;

                boost::chrono::duration<double> program_seconds = boost::chrono::system_clock::now() - program_start;
                std::cout << "Program execution in " << program_seconds.count() << " seconds." << std::endl;

                transport->close();
            } catch (TException &tx) {
                printf("ERROR: %s\n", tx.what());
                std::cout << "Error: " << tx.what() << std::endl;
            }
        }
        else
        {
            std::cout << "Parameter is not a valid IPv4 address." << std::endl;
        }
    }
    else
    {
        std::cout << "The server IP address is expected." << std::endl;
    }

    return 0;
}


