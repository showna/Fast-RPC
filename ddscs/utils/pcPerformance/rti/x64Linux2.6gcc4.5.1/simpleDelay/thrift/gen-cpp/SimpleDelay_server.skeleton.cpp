// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "SimpleDelay.h"
#include <netinet/in.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;

using boost::shared_ptr;

class SimpleDelayHandler : virtual public SimpleDelayIf {
 public:
  SimpleDelayHandler() {
    // Your initialization goes here
  }

  int32_t suma(const int32_t value1, const int32_t value2) {
    // Your implementation goes here
    //printf("suma\n");
    return value1 + value2;
  }

  void duplicate(Estructura& _return, const Estructura& es) {
    // Your implementation goes here
    //printf("duplicate\n");
    _return.short1 = es.short1;
    _return.short2 = es.short2;
    _return.long1 = es.long1;
    _return.long2 = es.long2;
    _return.llong1 = es.llong1;
    _return.llong2 = es.llong2;
    _return.double1 = es.double1;
    _return.double2 = es.double2;
    _return.string1 = es.string1;
    _return.string2 = es.string2;
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<SimpleDelayHandler> handler(new SimpleDelayHandler());
  shared_ptr<TProcessor> processor(new SimpleDelayProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager();
  shared_ptr<PosixThreadFactory> threadFactory(new PosixThreadFactory());

  threadManager->threadFactory(threadFactory);
  threadManager->start();

  TThreadPoolServer server(processor, serverTransport, transportFactory, protocolFactory, threadManager);
  server.serve();
  return 0;
}

