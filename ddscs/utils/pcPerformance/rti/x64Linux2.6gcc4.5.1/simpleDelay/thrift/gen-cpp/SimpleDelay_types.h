/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SimpleDelay_TYPES_H
#define SimpleDelay_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _Estructura__isset {
  _Estructura__isset() : valor1(false), valor2(false), valor3(false) {}
  bool valor1;
  bool valor2;
  bool valor3;
} _Estructura__isset;

class Estructura {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  Estructura() : valor1(0), valor2(0), valor3() {
  }

  virtual ~Estructura() throw() {}

  int32_t valor1;
  int32_t valor2;
  std::string valor3;

  _Estructura__isset __isset;

  void __set_valor1(const int32_t val) {
    valor1 = val;
  }

  void __set_valor2(const int32_t val) {
    valor2 = val;
  }

  void __set_valor3(const std::string& val) {
    valor3 = val;
  }

  bool operator == (const Estructura & rhs) const
  {
    if (!(valor1 == rhs.valor1))
      return false;
    if (!(valor2 == rhs.valor2))
      return false;
    if (!(valor3 == rhs.valor3))
      return false;
    return true;
  }
  bool operator != (const Estructura &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Estructura & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

void swap(Estructura &a, Estructura &b);



#include "SimpleDelay_types.tcc"

#endif
