group server : cplusplus;

headerServer(interfaceName,funNames, funDecls) ::= <<
#ifndef _$interfaceName;format="toUpper"$SKELETON_H_
#define _$interfaceName;format="toUpper"$SKELETON_H_

#include "client/DDSCSServer.h"
$include(funNames); separator="\n"$

class $interfaceName$Skeleton : public DDSCSServer
{
    private: 
      $interfaceName$Impl _impl;
    public:

        /// \brief The default constructor.
        $interfaceName$Server();

        /// \brief The default destructor.
        virtual ~$interfaceName$Server(){}

        $funDecls; separator=";\n"$;
};

#endif // _$interfaceName$SKELETON_H_
>>

headerImpl(interfaceName, funNames, funDecls) ::= <<
#ifndef _$interfaceName;format="toUpper"$IMPL_H_
#define _$interfaceName;format="toUpper"$IMPL_H_

class $interfaceName$Impl
{
    public:

        /// \brief The default constructor.
        $interfaceName$Impl();

        /// \brief The default destructor.
        virtual ~$interfaceName$Impl(){}

        $funDecls; separator=";\n"$;
};

#endif // _$interfaceName$IMPL_H_
>>

emptyFunctionImpl(interfaceName,type,name,inputParams,inoutParams,outputParams) ::= <<
$functionHeader(class=interfaceName,...)$ 
{
  returnedValue.retCode = SERVER_ERROR;
} 
>>

functionImpl(interfaceName,type,name,inputParams,inoutParams,outputParams) ::= <<
$functionHeader(class=interfaceName,...)$ 
{ 
    $inputParams:{$typeInitMap.(it.type)$ $it.name$;}; separator="\n"$   
    $inoutParams:{$typeInitMap.(it.type)$ $it.name$;}; separator="\n"$   
    $outputParams:{$typeInitMap.(it.type)$ $it.name$;}; separator="\n"$   
    $name$Reply *replyData = NULL;

    $name$RequestUtils::extractTypeData(($name$Request*)requestData$if(inputParams)$,
                                         $endif$$inputParams:{$it.name$}; separator=", "$$if(inoutParams)$,
                                         $endif$$inoutParams:{$it.name$}; separator=", "$);
    $name$($inputParams:{$it.name$}; separator=","$$if(inoutParams)$,
           $endif$$inoutParams:{$it.name$}; separator=", "$$if(outputParams)$,
           $endif$$outputParams:{$it.name$}; separator=", "$);
    replyData = $funNames$ReplyUtils::createTypeData( $inoutParams:{$it.name$}; separator=", "$$if(outputParams)$,
                                                      $endif$$outputParams:{$it.name$}; separator=", "$);
    server->sendReply("$funNames$", requestData, replyData);
    $name$RequestUtils::deleteData(requestData);
    $name$RequestUtils::deleteData(replyData);
}
>>

createRemoteService(interfaceName, funNames) ::= <<
    this->createRemoteService("$funNames$", $funNames$RequestUtils::registerType(getParticipant()),
            $funNames$ReplyUtils::registerType(getParticipant()),
            $funNames$RequestUtils::createEmptyData, $funNames$RequestUtils::deleteData,
            $funNames$ReplyUtils::createEmptyData, $funNames$ReplyUtils::deleteData,
            $interfaceName$Server::$funNames$);
>>



definitionServer(interfaceName, funNames, funImpls) ::= <<
#include "client/$interfaceName$Server.h"

$interfaceName$Server::$interfaceName$Server() : DDSCSServer()
{
    $createRemoteService(...); separator="\n"$
}

$funImpls; separator="\n"$
>>

definitionImpl(interfaceName, funNames, funImpls) ::= <<
#include "client/$interfaceName$Impl.h"

$funImpls; separator="\n"$
>>


