/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group Utils : cplusplus;


check(returnType) ::= <<
$if(typeInitMap.(returnType))$
$typeInitMap.(returnType)$
$else$
$returnType$&
$endif$
>>

lastParam(params, returnType) ::= <<
$if(params)$, $endif$$check(returnType)$ returnedValue
>>

header(funName, type="Request", params, returnType) ::= <<
#ifndef _$funName;format="toUpper"$_$type;format="toUpper"$_UTILS_H_
#define _$funName;format="toUpper"$_$type;format="toUpper"$_UTILS_H_

$doNotEditC()$

#include "dds_cpp/dds_cpp_domain.h"
#include "$funName$$type$Support.h"

class $funName$$type$Utils
{
    public:

        static const char* registerType(DDSDomainParticipant *clientParticipant);
        
        static void* createEmptyData();
        
        static void deleteData(void *data);
 
        static $funName$$type$* createTypeData($argDecl(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$);
        
        static void extractTypeData($funName$$type$* data, $argDeclRef(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$);
};

#endif // _$funName;format="toUpper"$_$type;format="toUpper"$_UTILS_H_
>>

createDataHelper(type, name) ::= <<
$if(typeInitMap.(type))$
instance->$name$ = $name$;
$else$
$type$PluginSupport_copy_data(&instance->$name$, &$name$);
$endif$
>>    

extractDataHelper(param) ::= <<
$if(typeInitMap.(param.type))$
$param.name$ = instance->$param.name$;
$else$
$param.type$PluginSupport_copy_data(&$param.name$, &instance->$param.name$);
$endif$
>>    


definition(interfaceName,funName, type="Request", params, returnType) ::= <<
$doNotEditC()$

#include "$funName$$type$Utils.h"
#include "$interfaceName$Plugin.h"

const char* $funName$$type$Utils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = $funName$$type$TypeSupport::get_type_name();

        if($funName$$type$TypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void* $funName$$type$Utils::createEmptyData()
{
    return $funName$$type$TypeSupport::create_data();
}

void $funName$$type$Utils::deleteData(void *data)
{
    $funName$$type$TypeSupport::delete_data(($funName$$type$*)data);
}

$funName$$type$* $funName$$type$Utils::createTypeData($argDecl(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$)
{
    $funName$$type$* instance = $funName$$type$TypeSupport::create_data();

    $params:{$createDataHelper(type=it.type, name=it.name)$};separator="\n"$
    
    $if(returnType)$
    $createDataHelper(type=returnType, name="returnedValue")$        
    $endif$    
    return instance;
}

void $funName$$type$Utils::extractTypeData($funName$$type$* data, $argDeclRef(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$)
{
    $params:{n | $n.name$ = data->$n.name$;};separator="\n"$
    $if(returnType)$
    returnedValue = data->returnedValue;
    $endif$    
}

>>


