/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group Utils : cplusplus;

/************************************************************************
 *                                                                      *
 *   External Templates: Common Templates for C++ code generation       *
 *                                                                      *
 ************************************************************************
 */

/**
 * headerFile: External Template
 * Produces header file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   name       : interface Name.
 *   type       : Request_Reply
 *   classes    : List of class headers.
 * Uses:
 */ 
headerFile(name, classes) ::= <<

#ifndef _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_
#define _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_

$doNotEditC()$

#include "dds_cpp/dds_cpp_domain.h"
#include "$name$RequestReplySupport.h"

$classes:{$it$};separator="\n"$
 
#endif // _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_

>>

/**
 * definitionFile: External Template
 * Produces definition file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   name       : interface Name.
 *   type       : Request_Reply
 *   classes    : List of class Implementations.
 * Uses:
 */ 
definitionFile(name, classes) ::= <<
$doNotEditC()$

#include "$name$RequestReplyUtils.h"
#include "$name$RequestReplyPlugin.h"

$classes:{$it$};separator="\n"$
 
>>

/**
 * header: External Template
 * Produces header file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   funName    : name of the function the generated Request/Reply topic data utils belongs to.
 *   type       : Request/Reply
 *   params     : List of previous arguments in the function call. Nullable.
 *   returnType : function return type.
 *
 * Uses:
 *   argDecl    - inherited(cplusplus)
 *   argDeclRef - inherited(cplusplus)
 *   lastParam  - local
 */ 
header(funName, type="Request", params, returnType) ::= <<

class $funName$$type$Utils
{
    public:

        static const char* registerType(DDSDomainParticipant *clientParticipant);
         
        static $funName$$type$* createTypeData($argDecl(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$);
        
        static void extractTypeData($funName$$type$* data$if(params)$, $endif$$argDeclRef(params);separator=", "$$if(returnType)$$lastParam(params="data", returnType=returnType)$$endif$);
};

>>

/**
 * definition: External Template
 * Produces Implementation file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   funName       : name of the function the generated Request/Reply topic data utils belongs to.
 *   type          : Request/Reply
 *   params        : List of previous arguments in the function call. Nullable.
 *   returnType    : function return type.
 *
 * Uses:
 *   argDecl           - inherited(cplusplus)
 *   argDeclRef        - inherited(cplusplus)
 *   lastParam         - local
 *   createDataHelper  - local
 *   extractDataHelper - local
 */ 
 definition(funName, type="Request", params, returnType, string) ::= <<

const char* $funName$$type$Utils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = $funName$$type$TypeSupport::get_type_name();

        if($funName$$type$TypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

$funName$$type$* $funName$$type$Utils::createTypeData($argDecl(params);separator=", "$$if(returnType)$$lastParam(params=params, returnType=returnType)$$endif$)
{
    $funName$$type$* instance = $funName$$type$TypeSupport::create_data();

    $params:{$createDataHelper(type=it.type, name=it.name, string=it.string)$};separator="\n"$
    
    $if(returnType)$
    $createDataHelper(type=returnType, name="returnedValue", string=string)$        
    $endif$    
    return instance;
}

void $funName$$type$Utils::extractTypeData($funName$$type$* data $if(params)$, $endif$$argDeclRef(params);separator=", "$$if(returnType)$$lastParam(params="data", returnType=returnType)$$endif$)
{
    $params:{$extractDataHelper(type=it.type, name=it.name, string=it.string)$};separator="\n"$
    
    $if(returnType)$
    $extractDataHelper(type=returnType, name="returnedValue", string=string)$        
    $endif$    
}

>>

/************************************************************************
 *                                                                      *
 *   Internal Templates: For internal use only.                         *
 *                                                                      *
 ************************************************************************
 */

/**
 * check: Internal Template
 * Checks if the returned value should be passed by value or by reference
 *  
 * Params:
 *   returnType   : return type of a function. Should not be null nor "void"
 *
 * Uses:
 *  typeInitMap - inherited(cplusplus)
 */ 
check(returnType) ::= <<
$if(typeInitMap.(returnType))$$typeInitMap.(returnType)$&
$else$
$returnType$&
$endif$
>>

/**
 * lastParam: Internal Template
 * Includes the return value of the function in a call to
 * Utils extractTypeData or createTypeData methods.
 * Params:
 *   params     : List of previous arguments in the function call. Nullable.
 *   returnType : function return type.
 *
 * Uses:
 *   check - local
 */ 
lastParam(params, returnType) ::= <<
$if(params)$, $endif$$check(returnType)$ returnedValue
>>

/**
 * createDataHelper: Internal Template
 * Produces code to fill a field of a newly created topic data.
 * Determines if it can be just assigned (basic type)
 * or has to be copied using PluginSupport_copy_data()
 * Params:
 *   type : param/field type.
 *   name : param/field name.
 *
 * Uses:
 *   typeInitMap - inherited(cplusplus)
 */ 
createDataHelper(type, name, string) ::= <<
$if(typeInitMap.(type))$
$if(string)$
if(instance->$name$ != NULL)
   DDS_String_free(instance->$name$);
instance->$name$ = DDS_String_dup($name$);
$else$
instance->$name$ = $name$;
$endif$
$else$
$type$PluginSupport_copy_data(&instance->$name$, &$name$);
$endif$
>>    

/**
 * extractDataHelper: Internal Template
 * Produces code to extract field values from a receivedtopic data.
 * Determines if it can be just assigned (basic type)
 * or has to be copied using PluginSupport_copy_data()
 * Params:
 *   type : param/field type.
 *   name : param/field name.
 *
 * Uses:
 *   typeInitMap - inherited(cplusplus)
 */ 
extractDataHelper(type, name, string) ::= <<
$if(typeInitMap.(type))$
$if(string)$
$name$ = DDS_String_dup(data->$name$);
$else$
$name$ = data->$name$;
$endif$
$else$
$type$PluginSupport_copy_data(&$name$, &data->$name$);
$endif$
>>    

