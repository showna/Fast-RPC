/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group cplusplus;

/************************************************************************
 *                                                                      *
 *   External Templates: Common Templates for C++ code generation       *
 *                                                                      *
 ************************************************************************
 */

/**
 * functionHeader: External Template
 * Produces a function header to be used in declaration & implementation 
 * Params:
 *   type         : function return type.
 *   class        : Class name. Must be null for declaration and not null for implementation
 *   inputParams  : list of input params objects.
 *   inoutParams  : list of inout params objects.
 *   outputParams : list of output params objects.
 *
 * Uses:
 *  argDecl    - local
 *  argDeclRef - local
 */ 
functionHeader(type,class,name,inputParams,inoutParams,outputParams) ::= << 
$functionReturnType(type)$ $class$$if(class)$::$endif$$name$($argDecl(inputParams);separator=", "$ $if(inputParams)$$if(inoutParams)$,
              $endif$$endif$$argDeclRef(inoutParams);separator=", "$$if([inputParams,inoutParams])$$if(outputParams)$,$endif$
              $endif$$argDeclRef(outputParams);separator=", "$)
>>


/************************************************************************
 *                                                                      *
 *   Internal Templates: For internal use only.                         *
 *                                                                      *
 ************************************************************************
 */

/**
 * typeInitMap: Internal Template
 * Maps IDL basic types to RTI DDS C types
 * returns a basic type or null so it also can be used in conditions
 * to check if a type is basic or not.
 * Params:
 *   key     :  IDL type name.
 *
 * Uses:
 */ 
typeInitMap ::= [
        "char":"DDS_Char",
        "wchar":"DDS_Wchar",
        "octet":"DDS_Octet",
        "short":"DDS_Short",
        "unsigned short":"DDS_UnsignedShort",
        "long":"DDS_Long",
        "unsigned long":"DDS_UnsignedLong",
        "long long":"DDS_LongLong",
        "unsigned long long":"DDS_UnsignedLongLong",
        "float":"DDS_Float",
        "double":"DDS_Double",
        "long double":"DDS_LongDouble",
        "boolean":"DDS_Boolean",
        "string":"char*",
        "DDSCSMessages":"DDSCSMessages",
        default:
]

/**
 * voidInitMap: Internal Template
 * returns void or null.  To be used in conditions
 * to check if a function return type is void or not.
 * Params:
 *   key     :  IDL type name.
 *
 * Uses:
 */ 
voidInitMap ::= [
        "void":"void",
        default: // not void
]

/**
 * doNotEditC: Internal Template
 * Produces a C style comment disclaimer.
 * Params:
 *   version     :  DDSCS version. Default value should be used.
 *
 * Uses:
 */ 
 doNotEditC(version="1.0") ::= <<
/** 
 * Generated by DDSCS: Do not edit.  Version $version$ *
 */
>>

/**
 * doNotEditCplusplus: Internal Template
 * Produces a C++ style comment disclaimer.
 * Params:
 *   version     :  DDSCS version. Default value should be used.
 *
 * Uses:
 */ 
doNotEditCplusplus(version="1.0") ::= <<
// 
// Generated by DDSCS: Do not edit.  Version $version$ *
//
>>

/**
 * varDecl: Internal Template
 * Declares a variable of function Return Type if not void.
 * If it is an user defined type also initializes it using
 * PluginSupport generated by rtiddsgen
 * Params:
 *   type     : Variable type.
 *   name     : Variable name. 
 *
 * Uses:
 *   voidInitMap - local
 *   typeInitMap - local
 */ 
varDecl(type, name, create) ::= <<
$if(!voidInitMap.(type))$
$if(typeInitMap.(type))$
$typeInitMap.(type)$  $name$;
$else$
$type$ *$name$$if(create)$ = $type$PluginSupport_create_data()$endif$;
$endif$    
$endif$
>>

argType(type, in) ::= <<
$if(typeInitMap.(type))$
$typeInitMap.(type)$
$else$
$type$ $if(in)$&$endif$
$endif$
>>

/**
 * argDecl: Internal Template
 * Produces a function signature (type1 arg1, type2 arg2...)
 * used in function declaration & definition
 * Params:
 *   arg   : List of arguments each one has "type" and "name" properties.
 *
 * Uses:
 */ 

argDecl(arg) ::= <<
$arg:{n | $argType(type=n.type, in="true")$ $n.name$};separator=", "$
>>

/**
 * argDecl: Internal Template
 * Produces a function signature whose parameters 
 * are passed by reference  (type1 &arg1, type2 &arg2...)
 * Params:
 *   arg   : List of arguments each one has "type" and "name" properties.
 *
 * Uses:
 */ 
argDeclRef(arg) ::= <<
$arg:{n | $argType(type=n.type)$ &$n.name$};separator=", "$
>>

/**
 * functionReturnType: Internal Template
 * Produces a function signature whose parameters 
 * are passed by reference  (type1 &arg1, type2 &arg2...)
 * Params:
 *   arg   : List of arguments each one has "type" and "name" properties.
 *
 * Uses:
 */ 
functionReturnType(type) ::= <<
$if(typeInitMap.(type))$
$typeInitMap.(type)$
$elseif(voidInitMap.(type))$
$voidInitMap.(type)$
$else$
$type$*
$endif$
>>


/**
 * varUse: Internal Template
 * Uses the variable as a parameter to a funcion call 
 * checking if ti is a pointer or not. 
 * Params:
 *   type     : Variable type.
 *   name     : Variable name. 
 *
 * Uses:
 */ 
 varUse(type, name) ::= <<
$if(typeInitMap.(type))$$name$
$else$
*$name$
$endif$    
>>


/**
 * nextParam: Internal Template
 * Adds arguments to a function call preceeding them by a comma
 * if there are previous arguments. 
 * Params:
 *   previous   : List of previous arguments in the function call. Nullable.
 *   params     : List of next arguments in the function call. Nullable.
 *
 * Uses:
 */ 
 nextParam(previous, params) ::= <<
$if(previous)$
$if(params)$,
$endif$
$endif$
$params:{$varUse(type = it.type, name = it.name)$};separator=", "$
>>

/**
 * include: Internal Template
 * Produces include sentences for  Request and Reply utils header files.
 * Params:
 *   funNames   : List of function names, whose Request and Reply utils
 *                should be included.
 *
 * Uses:
 */ 
include(funNames) ::= <<
$funNames:{
#include "$it$RequestUtils.h"
#include "$it$ReplyUtils.h"
}$
>>
