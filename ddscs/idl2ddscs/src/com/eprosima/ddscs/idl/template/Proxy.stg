group Proxy : cplusplus;

header(interfaceName,funNames, funDecls) ::= <<
#ifndef _$interfaceName;format="toUpper"$PROXY_H_
#define _$interfaceName;format="toUpper"$PROXY_H_

#include "client/DDSCSClient.h"
$include(funNames); separator="\n"$

class $interfaceName$Proxy : public DDSCSClient
{
    public:

        /// \brief The default constructor.
        $interfaceName$Proxy();

        /// \brief The default destructor.
        virtual ~$interfaceName$Proxy(){}

        $funDecls; separator=";\n"$;
};

#endif // _$interfaceName$PROXY_H_
>>

functionImpl(interfaceName,type,name,inputParams,inoutParams,outputParams) ::= <<
$functionHeader(class={$interfaceName$Proxy},...)$ 
{
    DDSCSMessages retValue;
    $returnVarDecl(type)$    
    const char serviceName[50] = "$name$";
    $name$Request *instance = NULL;
    $name$Reply *retInstance = ($name$Reply*)$name$ReplyUtils::createEmptyData();
    instance = $name$RequestUtils::createTypeData($inputParams:{$it.name$}; separator=", "$ $if(inoutParams)$,
                                                  $endif$$inoutParams:{$it.name$}; separator=", "$);
    retValue = executeRemoteService(instance, serviceName, retInstance);

    switch (retValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            $name$ReplyUtils::extractTypeData(retInstance$if(inoutParams)$,
                                                  $endif$ $inoutParams:{$it.name$}; separator=", "$$if(outputParams)$,
                                                  $endif$$outputParams:{$it.name$}; separator=", "$$if(!voidInitMap.(type))$,
                                                  $if(!typeInitMap.(type))$*$endif$returnedValue$endif$);
            $name$ReplyTypeSupport::print_data(retInstance);
            break;
    };
    $name$ReplyUtils::deleteData(retInstance);
    $name$RequestUtils::deleteData(instance);

    $if(!voidInitMap.(type))$
    return returnedValue;
    $endif$
}
>>

createRemoteService(funNames) ::= <<
$funNames:{funName |
    this->createRemoteService("$funName$", 
                              $funName$RequestUtils::registerType(getParticipant()),
                              $funName$ReplyUtils::registerType(getParticipant()));
}$
>>



definition(interfaceName,funNames, funImpls) ::= <<
#include "$interfaceName$Proxy.h"
#include "$interfaceName$Plugin.h"


$interfaceName$Proxy::$interfaceName$Proxy() : DDSCSClient()
{
    $createRemoteService(funNames); separator="\n"$
}

$funImpls; separator="\n"$
>>


