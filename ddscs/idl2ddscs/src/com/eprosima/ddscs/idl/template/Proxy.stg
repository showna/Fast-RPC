group Proxy;

argDecl(inputType, name) ::= <<
$inputType$ $name$
>>

functionDecl(type,name,inputTypes, inputParams, inoutTypes, inoutParams, outputTypes, outputParams) ::= << 
$type$ $name$($argDecl(inputTypes, inputParams); separator=","$,
            $argDecl(inoutTypes, inoutParams); separator=","$,
            $argDecl(outputTypes, outputParams); separator=","$); 
>>

include(funNames) ::= <<
#include "$funNames$RequestUtils.h"
#include "$funNames$ReplyUtils.h"
>>

header(interfaceName,funNames, funDefs) ::= <<
#ifndef _$interfaceName;format="toUpper"$PROXY_H_
#define _$interfaceName$PROXY_H_

#include "client/DDSCSClient.h"
$include(funNames); separator="\n"$

class $interfaceName$Proxy : public DDSCSClient
{
    public:

        /// \brief The default constructor.
        $interfaceName$Proxy();

        /// \brief The default destructor.
        virtual ~$interfaceName$Proxy(){}

        $funDefs; separator="\n"$
};

#endif // _$interfaceName$PROXY_H_
>>

functionImpl(interfaceName,type,name,inputTypes, inputParams, inoutTypes, inoutParams, outputTypes, outputParams) ::= << 
$type$ $interfaceName$Proxy::$name$($argDecl(inputTypes, inputParams); separator=","$,
            $argDecl(inoutTypes, inoutParams); separator=","$,
            $argDecl(outputTypes, outputParams); separator=","$)
{
    DDSCSMessages retValue;
    const char serviceName[50] = "$name$";
    $name$Request *instance = NULL;
    $name$Reply *retInstance = ($name$Reply*)$name$ReplyUtils::createEmptyData();
    instance = $name$RequestUtils::createTypeData($inputParams; separator=", "$,$inoutParams; separator=", "$);
    retValue = executeRemoteService(instance, serviceName, retInstance);

    switch (retValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            $name$ReplyUtils::extractTypeData(retInstance, $inoutParams; separator=", "$,$outputParams; separator=", "$);
            $name$ReplyTypeSupport::print_data(retInstance);
            break;
    };
    $name$ReplyUtils::deleteData(retInstance);
    $name$RequestUtils::deleteData(instance);
}
>>

createRemoteService(funNames) ::= <<
    this->createRemoteService("$funNames$", 
                              $funNames$RequestUtils::registerType(getParticipant()),
                              $funNames$ReplyUtils::registerType(getParticipant()));
>>



definition(interfaceName, ,funNames, funImpls) ::== <<
#include "client/$interfaceName$Proxy.h"

$interfaceName$Proxy::$interfaceName$Proxy() : DDSCSClient()
{
    $createRemoteService(funNames); separator="\n"$
}

$funImpls; separator="\n"$
>>


