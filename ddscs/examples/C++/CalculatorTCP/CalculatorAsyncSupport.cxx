/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorAsyncSupport.cxx
 * This source file contains functionality to use asynchronous calls for interface Calculator.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorProxy.h"
#include "CalculatorAsyncSupport.h"
#include "exceptions/ServerInternalException.h"
#include "CalculatorRequestReplyPlugin.h"


Calculator_additionTask::Calculator_additionTask(Calculator_additionCallbackHandler &obj,
   eProsima::RPCDDS::Client *client) : AsyncTask(client), m_obj(obj)
{
    Calculator_additionReply_initialize(&m_reply);
}

Calculator_additionTask::~Calculator_additionTask()
{
    Calculator_additionReply_finalize(&m_reply);
}

Calculator_additionCallbackHandler& Calculator_additionTask::getObject()
{
    return m_obj;
}

void* Calculator_additionTask::getReplyInstance()
{
    return &m_reply;
}

void Calculator_additionTask::execute()
{  
    DDS_Long  addition_ret = 0;
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
	
	Calculator_additionReplyUtils::extractTypeData(m_reply, retcode, addition_ret);
		
	if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
	{
		getObject().addition(addition_ret);
	}
	else
	{
		if(retcode == eProsima::RPCDDS::SERVER_INTERNAL_ERROR)
		    getObject().on_exception(eProsima::RPCDDS::ServerInternalException(m_reply.header.rpcddsRetMsg));
	}
}

void Calculator_additionTask::on_exception(const eProsima::RPCDDS::SystemException &ex)
{
    getObject().on_exception(ex);
}


Calculator_subtractionTask::Calculator_subtractionTask(Calculator_subtractionCallbackHandler &obj,
   eProsima::RPCDDS::Client *client) : AsyncTask(client), m_obj(obj)
{
    Calculator_subtractionReply_initialize(&m_reply);
}

Calculator_subtractionTask::~Calculator_subtractionTask()
{
    Calculator_subtractionReply_finalize(&m_reply);
}

Calculator_subtractionCallbackHandler& Calculator_subtractionTask::getObject()
{
    return m_obj;
}

void* Calculator_subtractionTask::getReplyInstance()
{
    return &m_reply;
}

void Calculator_subtractionTask::execute()
{  
    DDS_Long  subtraction_ret = 0;
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::OPERATION_SUCCESSFUL;
	
	Calculator_subtractionReplyUtils::extractTypeData(m_reply, retcode, subtraction_ret);
		
	if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
	{
		getObject().subtraction(subtraction_ret);
	}
	else
	{
		if(retcode == eProsima::RPCDDS::SERVER_INTERNAL_ERROR)
		    getObject().on_exception(eProsima::RPCDDS::ServerInternalException(m_reply.header.rpcddsRetMsg));
	}
}

void Calculator_subtractionTask::on_exception(const eProsima::RPCDDS::SystemException &ex)
{
    getObject().on_exception(ex);
}
