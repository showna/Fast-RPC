/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */


#include "RateGenProxy.h"
#include "client/ClientRemoteService.h"
#include "RateGenRequestReplyPlugin.h"


RateGenProxy::RateGenProxy(int domainId, unsigned int timeout) : DDSCSClient(domainId)
{
    m_timeout = timeout;

        this->subscribe_Pulse_Service = new subscribe_PulseClientRemoteService("subscribe_Pulse",
                                  getClientId(),
                                  subscribe_PulseRequestUtils::registerType(getParticipant()),
                                  subscribe_PulseReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->unsubscribe_Pulse_Service = new unsubscribe_PulseClientRemoteService("unsubscribe_Pulse",
                                  getClientId(),
                                  unsubscribe_PulseRequestUtils::registerType(getParticipant()),
                                  unsubscribe_PulseReplyUtils::registerType(getParticipant()),
                                  getParticipant());

        this->noReturnFunction_Service = new noReturnFunctionClientRemoteService("noReturnFunction",
                                  getClientId(),
                                  noReturnFunctionRequestUtils::registerType(getParticipant()),
                                  noReturnFunctionReplyUtils::registerType(getParticipant()),
                                  getParticipant());

}

RateGenProxy::~RateGenProxy()
{
    delete subscribe_Pulse_Service;
    delete unsubscribe_Pulse_Service;
    delete noReturnFunction_Service;
}

unsigned int RateGenProxy::getTimeout()
{
  return m_timeout;
}
 
 void RateGenProxy::setTimeout(unsigned int millis)
 {
    m_timeout = millis;
 }

 
DDSCSMessages
 RateGenProxy::subscribe_Pulse(tickConsumer & c, DDS_Long i ,DDS_Long &kk,DDS_Octet &ret1, Cookie  &subscribe_Pulse_ret) 
{
    DDSCSMessages  returnedValue;    
    subscribe_PulseRequest *instance = NULL;
    subscribe_PulseReply *retInstance = subscribe_PulseReplyTypeSupport::create_data();
    instance = subscribe_PulseRequestUtils::createTypeData(c,i,kk    );
    returnedValue = subscribe_Pulse_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            subscribe_PulseReplyUtils::extractTypeData(retInstance, kk    ,ret1    , subscribe_Pulse_ret    );
            //subscribe_PulseReplyTypeSupport::print_data(retInstance);
            subscribe_Pulse_Service->replyRead();            
            break;
    };
    
    subscribe_PulseReplyTypeSupport::delete_data(retInstance);
    subscribe_PulseRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 RateGenProxy::unsubscribe_Pulse(Cookie & ck ,tickConsumer  &unsubscribe_Pulse_ret) 
{
    DDSCSMessages  returnedValue;    
    unsubscribe_PulseRequest *instance = NULL;
    unsubscribe_PulseReply *retInstance = unsubscribe_PulseReplyTypeSupport::create_data();
    instance = unsubscribe_PulseRequestUtils::createTypeData(ck);
    returnedValue = unsubscribe_Pulse_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            unsubscribe_PulseReplyUtils::extractTypeData(retInstance, unsubscribe_Pulse_ret    );
            //unsubscribe_PulseReplyTypeSupport::print_data(retInstance);
            unsubscribe_Pulse_Service->replyRead();            
            break;
    };
    
    unsubscribe_PulseReplyTypeSupport::delete_data(retInstance);
    unsubscribe_PulseRequestTypeSupport::delete_data(instance);

    return returnedValue;
}
 
DDSCSMessages
 RateGenProxy::noReturnFunction(DDS_Long id ,DDS_Octet &ret2) 
{
    DDSCSMessages  returnedValue;    
    noReturnFunctionRequest *instance = NULL;
    noReturnFunctionReply *retInstance = noReturnFunctionReplyTypeSupport::create_data();
    instance = noReturnFunctionRequestUtils::createTypeData(id);
    returnedValue = noReturnFunction_Service->execute(instance, retInstance, m_timeout);
    switch (returnedValue)
    {
        case CLIENT_ERROR:
            printf("CLIENT ERROR\n");
            break;
        case RECEIVED_OTHER_REQUEST:
            printf("Y ESTE PAQUETE?\n");
            break;
        case SERVER_TIMEOUT:
            printf("TIMEOUT\n");
            break;
        case SERVER_ERROR:
            printf("SERVER ERROR\n");
            break;
        case WITHOUT_RESOURCES:
            printf("SERVER WITHOUT RESOURCES\n");
            break;
        case OPERATION_SUCCESSFUL:
            noReturnFunctionReplyUtils::extractTypeData(retInstance, ret2    );
            //noReturnFunctionReplyTypeSupport::print_data(retInstance);
            noReturnFunction_Service->replyRead();            
            break;
    };
    
    noReturnFunctionReplyTypeSupport::delete_data(retInstance);
    noReturnFunctionRequestTypeSupport::delete_data(instance);

    return returnedValue;
}