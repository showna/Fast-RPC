/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "RateGenRequestReplyUtils.h"
#include "RateGenRequestReplyPlugin.h"


const char* subscribe_PulseRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = subscribe_PulseRequestTypeSupport::get_type_name();

        if(subscribe_PulseRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

subscribe_PulseRequest* subscribe_PulseRequestUtils::createTypeData(tickConsumer & c, DDS_Long i, DDS_Long kk)
{
    subscribe_PulseRequest* instance = subscribe_PulseRequestTypeSupport::create_data();

    tickConsumerPluginSupport_copy_data(&instance->c, &c);
    instance->i = i;
    instance->kk = kk;
    
    
    return instance;
}

void subscribe_PulseRequestUtils::extractTypeData(subscribe_PulseRequest* data , tickConsumer  &c, DDS_Long &i, DDS_Long &kk)
{
    tickConsumerPluginSupport_copy_data(&c, &data->c);
    i = data->i;
    kk = data->kk;
    
    
}


const char* subscribe_PulseReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = subscribe_PulseReplyTypeSupport::get_type_name();

        if(subscribe_PulseReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

subscribe_PulseReply* subscribe_PulseReplyUtils::createTypeData(DDS_Long kk, DDS_Octet ret1, Cookie& returnedValue)
{
    subscribe_PulseReply* instance = subscribe_PulseReplyTypeSupport::create_data();

    instance->kk = kk;
    instance->ret1 = ret1;
    
    CookiePluginSupport_copy_data(&instance->returnedValue, &returnedValue);            
    return instance;
}

void subscribe_PulseReplyUtils::extractTypeData(subscribe_PulseReply* data , DDS_Long &kk, DDS_Octet &ret1, Cookie& returnedValue)
{
    kk = data->kk;
    ret1 = data->ret1;
    
    CookiePluginSupport_copy_data(&returnedValue, &data->returnedValue);            
}


const char* unsubscribe_PulseRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = unsubscribe_PulseRequestTypeSupport::get_type_name();

        if(unsubscribe_PulseRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

unsubscribe_PulseRequest* unsubscribe_PulseRequestUtils::createTypeData(Cookie & ck)
{
    unsubscribe_PulseRequest* instance = unsubscribe_PulseRequestTypeSupport::create_data();

    CookiePluginSupport_copy_data(&instance->ck, &ck);
    
    
    return instance;
}

void unsubscribe_PulseRequestUtils::extractTypeData(unsubscribe_PulseRequest* data , Cookie  &ck)
{
    CookiePluginSupport_copy_data(&ck, &data->ck);
    
    
}


const char* unsubscribe_PulseReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = unsubscribe_PulseReplyTypeSupport::get_type_name();

        if(unsubscribe_PulseReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

unsubscribe_PulseReply* unsubscribe_PulseReplyUtils::createTypeData(tickConsumer& returnedValue)
{
    unsubscribe_PulseReply* instance = unsubscribe_PulseReplyTypeSupport::create_data();

    
    tickConsumerPluginSupport_copy_data(&instance->returnedValue, &returnedValue);            
    return instance;
}

void unsubscribe_PulseReplyUtils::extractTypeData(unsubscribe_PulseReply* data , tickConsumer& returnedValue)
{
    
    tickConsumerPluginSupport_copy_data(&returnedValue, &data->returnedValue);            
}


const char* noReturnFunctionRequestUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = noReturnFunctionRequestTypeSupport::get_type_name();

        if(noReturnFunctionRequestTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

noReturnFunctionRequest* noReturnFunctionRequestUtils::createTypeData(DDS_Long id)
{
    noReturnFunctionRequest* instance = noReturnFunctionRequestTypeSupport::create_data();

    instance->id = id;
    
    
    return instance;
}

void noReturnFunctionRequestUtils::extractTypeData(noReturnFunctionRequest* data , DDS_Long &id)
{
    id = data->id;
    
    
}


const char* noReturnFunctionReplyUtils::registerType(DDSDomainParticipant *clientParticipant)
{
    const char *typeName = NULL;

    if(clientParticipant != NULL)
    {
        typeName = noReturnFunctionReplyTypeSupport::get_type_name();

        if(noReturnFunctionReplyTypeSupport::register_type(clientParticipant, typeName) != DDS_RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

noReturnFunctionReply* noReturnFunctionReplyUtils::createTypeData(DDS_Octet ret2)
{
    noReturnFunctionReply* instance = noReturnFunctionReplyTypeSupport::create_data();

    instance->ret2 = ret2;
    
    
    return instance;
}

void noReturnFunctionReplyUtils::extractTypeData(noReturnFunctionReply* data , DDS_Octet &ret2)
{
    ret2 = data->ret2;
    
    
}

 