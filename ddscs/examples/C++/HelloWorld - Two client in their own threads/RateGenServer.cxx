/** 
 * Generated by DDSCS: Do not edit.  Version 1.0 *
 */

#include "RateGenServer.h"
#include "RateGenRequestReplyPlugin.h"
#include "RateGenServerRemoteServiceSupport.h"

RateGenServer::RateGenServer(int domainId, unsigned int threadCount) : DDSCSServer(domainId, threadCount)
{
    _impl = new RateGenImpl();
    

        this->setRemoteService(new subscribe_PulseServerRemoteService("subscribe_Pulse", this,
                subscribe_PulseRequestUtils::registerType(getParticipant()),
                subscribe_PulseReplyUtils::registerType(getParticipant()),
                &RateGenServer::subscribe_Pulse, getParticipant()));

        this->setRemoteService(new unsubscribe_PulseServerRemoteService("unsubscribe_Pulse", this,
                unsubscribe_PulseRequestUtils::registerType(getParticipant()),
                unsubscribe_PulseReplyUtils::registerType(getParticipant()),
                &RateGenServer::unsubscribe_Pulse, getParticipant()));

        this->setRemoteService(new noReturnFunctionServerRemoteService("noReturnFunction", this,
                noReturnFunctionRequestUtils::registerType(getParticipant()),
                noReturnFunctionReplyUtils::registerType(getParticipant()),
                &RateGenServer::noReturnFunction, getParticipant()));

}
RateGenServer::~RateGenServer()
{
    delete _impl;    
}

void RateGenServer::subscribe_Pulse(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    RateGenServer *srv = (RateGenServer*)server;
    tickConsumer *c = tickConsumerPluginSupport_create_data();    
    DDS_Long  i;       
    DDS_Long  kk;       
    DDS_Octet  ret1;    
    Cookie *subscribe_Pulse_ret = CookiePluginSupport_create_data();       
    DDSCSMessages  returnedValue;        
    subscribe_PulseReply *replyData = NULL;

    subscribe_PulseRequestUtils::extractTypeData((subscribe_PulseRequest*)requestData, *c    , i    ,kk    );
                                         
    returnedValue = srv->_impl->subscribe_Pulse(*c    , i    ,kk    ,ret1    , *subscribe_Pulse_ret    );
           
    replyData = subscribe_PulseReplyUtils::createTypeData(kk,ret1    , *subscribe_Pulse_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
}
void RateGenServer::unsubscribe_Pulse(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    RateGenServer *srv = (RateGenServer*)server;
    Cookie *ck = CookiePluginSupport_create_data();       
   
    tickConsumer *unsubscribe_Pulse_ret = tickConsumerPluginSupport_create_data();       
    DDSCSMessages  returnedValue;        
    unsubscribe_PulseReply *replyData = NULL;

    unsubscribe_PulseRequestUtils::extractTypeData((unsubscribe_PulseRequest*)requestData, *ck    );
                                         
    returnedValue = srv->_impl->unsubscribe_Pulse(*ck    ,*unsubscribe_Pulse_ret    );
           
    replyData = unsubscribe_PulseReplyUtils::createTypeData(*unsubscribe_Pulse_ret    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
}
void RateGenServer::noReturnFunction(DDSCSServer *server, void *requestData, ServerRemoteService *service) 
{ 
    RateGenServer *srv = (RateGenServer*)server;
    DDS_Long  id;       
   
    DDS_Octet  ret2;       
    DDSCSMessages  returnedValue;        
    noReturnFunctionReply *replyData = NULL;

    noReturnFunctionRequestUtils::extractTypeData((noReturnFunctionRequest*)requestData, id    );
                                         
    returnedValue = srv->_impl->noReturnFunction(id    ,ret2    );
           
    replyData = noReturnFunctionReplyUtils::createTypeData(ret2    );
                                                  
    // sendReply takes care of deleting the data
    service->sendReply(requestData, replyData, returnedValue);
}