/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group Utils;

/************************************************************************
 *                                                                      *
 *   External Templates: Common Templates for C++ code generation       *
 *                                                                      *
 ************************************************************************
 */

/**
 * headerFile: External Template
 * Produces header file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   name       : interface Name.
 *   type       : Request_Reply
 *   classes    : List of class headers.
 * Uses:
 */ 
headerFile(name, classes) ::= <<
$fileHeader(file=[name, "RequestReplyUtils.h"], description=["This header file contains the declaration of helpful functions for the DDS messages for interface ", name, "."])$

#ifndef _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_
#define _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_

#include "utils/Messages.h"
$ReqRepSIncludes(interfaceName=name)$

$ddsIncludes()$

$classes:{$it$};separator="\n"$
 
#endif // _$name;format="toUpper"$_REQUEST_REPLY_UTILS_H_

>>

/**
 * definitionFile: External Template
 * Produces definition file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   name       : interface Name.
 *   type       : Request_Reply
 *   classes    : List of class Implementations.
 * Uses:
 */ 
definitionFile(name, classes) ::= <<
$fileHeader(file=[name, "RequestReplyUtils.cxx"], description=["This source file contains the definition of helpful functions for the DDS messages for interface ", name, "."])$

#include "$name$RequestReplyUtils.h"
$ReqRepIncludes(interfaceName=name)$

$classes:{$it$};separator="\n"$
 
>>

/**
 * header: External Template
 * Produces header file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   topicName    : name of the function the generated Request/Reply topic data utils belongs to.
 *   type       : Request/Reply
 *   params     : List of previous arguments in the function call. Nullable.
 *   returnType : function return type.
 *
 * Uses:
 *   argDecl    - inherited(cplusplus)
 *   argDeclRef - inherited(cplusplus)
 *   lastParam  - local
 */ 
header(topicName, templateName, params, returnType, isReply) ::= <<

/**
 * \brief This class contains helpful operations for the generated topic $topicName$$templateName$.
 */
class $topicName$$templateName$Utils
{
    public:

        /**
         * \brief This function registers the type of the structure $topicName$$templateName$ in the DDS domain participant.
         *
         * \param participant Pointer to the DDS domain participant. Cannot be NULL.
         * \return The type name of the structure $topicName$$templateName$.
         */
        static const char* registerType(DDS::DomainParticipant *participant);
        
        /**
         * \brief This function sets the parameters into the members of the structure $topicName$$templateName$.
         *
         * \param instance Pointer to the structure $topicName$$templateName$ that will be filled. Cannot be NULL.
         */
        static void setTypeData($topicName$$templateName$& instance$if([params, returnType])$, $endif$$argsDecl([params, returnType]);separator=", "$);
        
        /**
         * \brief This function extracts the parameters from the members of the structure $topicName$$templateName$.
         *
         * \param data Pointer to the structure $topicName$$templateName$ that contains the parameters' data. Cannot be NULL.
         $if(isReply)$* \param retcode Internal message returned from the server.$endif$
         */
        static void extractTypeData($topicName$$templateName$& data$if(isReply)$, eProsima::RPCDDS::ReturnMessage& retcode$endif$$if([params, returnType])$, $endif$$argsDeclRef([params, returnType]);separator=", "$);
};

>>

/**
 * definition: External Template
 * Produces Implementation file for Request&Reply Topic data type Utils
 * 
 * Params:
 *   topicName       : name of the function the generated Request/Reply topic data utils belongs to.
 *   type          : Request/Reply
 *   params        : List of previous arguments in the function call. Nullable.
 *   returnType    : function return type.
 *
 * Uses:
 *   argDecl           - inherited(cplusplus)
 *   argDeclRef        - inherited(cplusplus)
 *   lastParam         - local
 *   createDataHelper  - local
 *   extractDataHelper - local
 */ 
definition(topicName, templateName, params, returnType, isReply) ::= <<

const char* $topicName$$templateName$Utils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        $getTypename(funName=topicName, type=templateName, name="typeName")$

        if($registerTypename(funName=topicName, type=templateName, name="typeName")$ != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void $topicName$$templateName$Utils::setTypeData($topicName$$templateName$& instance$if([params, returnType])$, $endif$$argsDecl([params, returnType]);separator=", "$)
{
    $params : {$createDataHelper(param=it)$};separator="\n"$
    $if(returnType)$
    $createDataHelper(param=returnType)$        
    $endif$    
}

void $topicName$$templateName$Utils::extractTypeData($topicName$$templateName$& data$if(isReply)$, eProsima::RPCDDS::ReturnMessage& retcode$endif$$if([params, returnType])$, $endif$$argsDeclRef([params, returnType]);separator=", "$)
{
    $if(isReply)$retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;$endif$
    $params : {$extractDataHelper(param=it, isReply=isReply)$};separator="\n"$  
    $if(returnType)$
    $extractDataHelper(param=returnType, isReply=isReply)$        
    $endif$    
}

>>

/************************************************************************
 *                                                                      *
 *   Internal Templates: For internal use only.                         *
 *                                                                      *
 ************************************************************************
 */

/**
 * check: Internal Template
 * Checks if the returned value should be passed by value or by reference
 *  
 * Params:
 *   returnType   : return type of a function. Should not be null nor "void"
 *
 * Uses:
 *  typeInitMap - inherited(cplusplus)
 */ 
check(returnType) ::= <<
$if(typeInitMap.(returnType))$$typeInitMap.(returnType)$&
$else$
$returnType$*&
$endif$
>>

/**
 * createDataHelper: Internal Template
 * Produces code to fill a field of a newly created topic data.
 * Determines if it can be just assigned (basic type)
 * or has to be copied using PluginSupport_copy_data()
 * Params:
 *   type : param/field type.
 *   name : param/field name.
 *
 * Uses:
 *   typeInitMap - inherited(cplusplus)
 */ 
createDataHelper(param) ::= <<
instance.$param.name$ = $param.name$;
>>    

/**
 * extractDataHelper: Internal Template
 * Produces code to extract field values from a receivedtopic data.
 * Determines if it can be just assigned (basic type)
 * or has to be copied using PluginSupport_copy_data().
 * When the parameter it only input, then doesn't copy, but it is assgined. (IMPORTANT)
 * Params:
 *   type : param/field type.
 *   name : param/field name.
 *
 * Uses:
 *   typeInitMap - inherited(cplusplus)
 */ 
extractDataHelper(param, isReply) ::= <<
$if(isReply)$
$if(param.isInput)$
$if(typeInitMap.(param.typeName))$
$if(param.baseType.isString)$
if($param.name$ != NULL)
	free($param.name$);
$endif$
$else$
$varComplexDel(typeName=param.typeName, name=param.name)$
$endif$
$endif$
$param.name$ = data.$param.name$$if(param.baseType.isString)$$stringPointer()$$endif$;
$else$
$if(param.isOutput)$
$if(typeInitMap.(param.typeName))$
$if(param.baseType.isString)$
$param.name$ = strdup(data.$param.name$);
$else$
$param.name$ = data.$param.name$;
$endif$
$else$
$extractDH(type=param.typeName, name=param.name)$
$endif$
$else$
$param.name$ = data.$param.name$$if(param.baseType.isString)$$stringPointer()$$endif$;
$endif$
$endif$
>>    

