/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group Proxy;

/************************************************************************
 *                                                                      *
 *   External Templates: Templates required to generate the Proxy       *
 *                                                                      *
 ************************************************************************
 */

/**
 * header: External Template
 * Produces the Proxy header file.
 * Params:
 *   interfaceName: Name of the interface whose methods this proxy invokes.
 *   funNames     : list of the interface function names. 
 *   funDecls     : list of functionHeader(cplusplus) template outputs.
 *
 * Uses:
 *  include - inherited(cplusplus)
 */ 
header(interfaceName, funNames, funDecls, funDeclsAsync, classDeclsAsync) ::= <<
#ifndef _$interfaceName;format="toUpper"$_PROXY_H_
#define _$interfaceName;format="toUpper"$_PROXY_H_

$doNotEditC()$

#include "client/Client.h"
#include "$interfaceName$RequestReplyUtils.h"
#include "$interfaceName$ClientRPCSupport.h"
#include "exceptions/Exception.h"

$classDeclsAsync; separator=";\n"$$if(classDeclsAsync)$;$endif$

/**
 * \brief This class implements a specific server's proxy for the defined interface $interfaceName$.
 */
class $interfaceName$Proxy : public eProsima::RPCDDS::Client
{
    public:
    
        /**
         * \brief Default constructor. The server's proxy will use the default eProsima::RPCDDS::UDPTransport.
         *
         * \param remoteServiceName The service's name that the remote server uses and the proxy will use to connect with it. 
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::RPCDDS::ServerTimeoutException is thrown.
         * \exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
         */
        $interfaceName$Proxy(std::string remoteServiceName, int domainId = 0, long timeout = 10000);

        /**
         * \brief This constructor sets the transport that will be used by the server's proxy.
         *
         * \param remoteServiceName The service's name that the remote server uses and the proxy will use to connect with it. 
         * \param transport The network transport that server's proxy has to use.
         *        This transport's object is not deleted by this class in its destrcutor. Cannot be NULL.
         * \param domainId The DDS domain that DDS will use to work. Default value: 0
         * \param timeout Timeout used in each call to remotely procedures.
         *        If the call exceeds the time, a eProsima::RPCDDS::ServerTimeoutException is thrown.
         * \exception eProsima::RPCDDS::InitializeException This exception is thrown when the initialization was wrong.
         */
        $interfaceName$Proxy(std::string remoteServiceName, eProsima::RPCDDS::Transport *transport, int domainId = 0, long timeout = 10000);

        /// \brief The default destructor.
        virtual ~$interfaceName$Proxy();
        
        $funDecls; separator=";\n"$;
        
        $funDeclsAsync; separator=";\n"$$if(funDeclsAsync)$;$endif$
        
    private:
        /**
         * \brief This function creates all RPC endpoints for each remote procedure.
         */
        void createRPCs();
        
        $funNames:{eProsima::RPCDDS::ClientRPC *$it$_Service;};separator="\n"$ 
};

#endif // _$interfaceName$_PROXY_H_
>>

classHeaderAsync(interfaceName,rettype,name,outParams) ::= <<
/**
 * \brief This abstract class defines the callbacks that RPCDDS will call in an asynchronous call.
 *        These callback has to be implemented in a derived class.
 */
class $interfaceName$_$name$CallbackHandler
{
    public:
        /**
         * This function is called when is received the reply from the server.
         */
        virtual void $name$($argsDecl([outParams, rettype])$) = 0;
        
        /**
         * \brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * \param ex The exception that will be launched.
         */
        virtual void on_exception(const eProsima::RPCDDS::Exception &ex) = 0;
}
>>

functionHeaderAsync(interfaceName,class,name,inParams) ::= << 
void $class$$if(class)$::$endif$$name$_async($interfaceName$_$name$CallbackHandler &obj$if(inParams)$, $endif$$argsDecl(inParams)$)
>>

/**
 * functionImpl: External Template
 * Produces the code required to call a function on the server.
 * Params:
 *   interfaceName: Name of the interface whose this function belongs to.
 *   type:         function return type.
 *   name:         function name. 
 *   inputParams:  list of input params objects.
 *   inoutParams:  list of inout params objects.
 *   outputParams: list of output params objects.
 *
 * Uses:
 *  voidInitMap           - inherited(cplusplus)
 *  varDecl               - inherited(cplusplus)
 *  nextParam             - inherited(cplusplus)
 *  extractTypeDataParams - inherited(cplusplus)
 */ 
functionImpl(interfaceName,rettype,name,params,inParams,outParams,isOneway) ::= <<
$functionHeader(class={$interfaceName$Proxy},...)$ 
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    $varDecl(typeName=rettype.typeName, baseType=rettype.baseType, name=rettype.name)$
    $interfaceName$_$name$Request instance;
    $if(!isOneway)$
    $interfaceName$_$name$Reply retInstance;

    $varComplexInitialize(typeName=[interfaceName, "_", name, "Reply"], name="retInstance")$
    $endif$
    $interfaceName$_$name$RequestUtils::setTypeData(instance$if(inParams)$, $endif$$extractParams(inParams)$);
    retcode = $name$_Service->execute(&instance, $if(!isOneway)$&retInstance$else$NULL$endif$, getTimeout());
    
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
        $if(!isOneway)$
        $interfaceName$_$name$ReplyUtils::extractTypeData(retInstance, retcode$if(outParams)$, $endif$$extractParams(outParams)$$if(!voidInitMap.(rettype.typeName))$, $extractParams(rettype)$$endif$);  
        $endif$
    }
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!isOneway)$
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg);
            break;
        $endif$
    };
    

    $if(!voidInitMap.(rettype.typeName))$
    return $rettype.name$;
    $endif$
}
>>

functionImplAsync(interfaceName,name,inParams) ::= <<
$functionHeaderAsync(class={$interfaceName$Proxy},...)$ 
{
	eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    $interfaceName$_$name$Request instance;
    $interfaceName$_$name$Task *task = NULL;
    $interfaceName$_$name$RequestUtils::setTypeData(instance$if(inParams)$, $endif$$extractParams(inParams)$);
    task = new $interfaceName$_$name$Task(obj, this);
    retcode = $name$_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
    }
}
>>

/**
 * definition: External Template
 * Produces the Proxy implementation file.
 * Params:
 *   interfaceName: Name of the interface whose methods this proxy invokes.
 *   funNames     : list of the interface function names. 
 *   funImpls     : list of functionImpl template outputs.
 *
 * Uses:
 *  createRPC - local
 */ 
definition(interfaceName, funNames, funImpls, funImplsAsync) ::= <<
$doNotEditC()$


#include "$interfaceName$Proxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
$ReqRepIncludes(interfaceName=interfaceName)$
#include "$interfaceName$AsyncSupport.h"
#include "exceptions/Exceptions.h"

$interfaceName$Proxy::$interfaceName$Proxy(std::string remoteServiceName, int domainId, long timeout) :
    Client(remoteServiceName, NULL, domainId, timeout)
{
    createRPCs();
}

$interfaceName$Proxy::$interfaceName$Proxy(std::string remoteServiceName, eProsima::RPCDDS::Transport *transport, int domainId, long timeout) :
    Client(remoteServiceName, transport, domainId, timeout)
{
    createRPCs();
}

$interfaceName$Proxy::~$interfaceName$Proxy()
{
    $funNames:{delete $it.name$_Service;}; separator="\n"$
}

void $interfaceName$Proxy::createRPCs()
{
    $createRPC(...); separator="\n"$
}

$funImpls; separator="\n"$

$funImplsAsync; separator="\n"$
>>

/**
 * functionCall: External Template
 * Produces the code to invoke a function on the proxy object.
 * Declares the required local variables (uninitialized!!!) and use them as params. 
 * Params:
 *   type:         function return type.
 *   name:         function name. 
 *   inputParams:  list of input params objects.
 *   inoutParams:  list of inout params objects.
 *   outputParams: list of output params objects.
 *
 * Uses:
 *  voidInitMap   - inherited(cplusplus)
 *  varDecl       - inherited(cplusplus)
 */ 
functionCall(rettype,name,params) ::= <<
    $params:{$varDecl(typeName = it.typeName, baseType = it.baseType, name = it.name)$}; separator="\n"$   
    $varDecl(typeName=rettype.typeName, baseType=rettype.baseType, name=rettype.name)$
    
    $params:{$varComplexInitialize(typeName=it.typeName, name=it.name)$};separator="\n"$
    $varComplexInitialize(typeName=rettype.typeName, name=rettype.name)$

    try
    {
        $if(!voidInitMap.(rettype.typeName))$
        $rettype.name$ = $endif$proxy->$name$($extractParams(params)$);
    }
    catch(eProsima::RPCDDS::Exception &ex)
    {
    }
    
    $params:{$varDel(typeName=it.typeName, baseType=it.baseType, name=it.name)$}; separator="\n"$
    $varDel(typeName=rettype.typeName, baseType=rettype.baseType, name=rettype.name)$
>>

/**
 * main: External Template
 * Generates an example client program
 * Params:
 *   interfaceName: Name of the interface whose methods this client invokes.
 *   invocations:   List of functionCall template outputs. 
 *
 */ 
main(interfaceName, invocations, sleep) ::= <<
/** 
 * Generated by RPCDDS                                                   *
 * Example client. Method params should be initialized before execution  *
 */

#include "$interfaceName$Proxy.h"
$ReqRepIncludes(interfaceName=interfaceName)$
#include "exceptions/Exceptions.h"

int main(int argc, char **argv)
{
    $interfaceName$Proxy *proxy = new $interfaceName$Proxy("$interfaceName$Service");
    
$invocations; separator="\n"$

   delete(proxy);
   
   return 0;
}
>>

/************************************************************************
 *                                                                      *
 *   Internal Templates: For internal use only.                         *
 *                                                                      *
 ************************************************************************
 */


/**
 * createRPC: Internal Template
 * Produces a list of Client inherited createRPC  method calls.
 * required to initialize this proxy object.
 * Params:
 *   funNames     : list of the interface function names. 
 *
 * Uses:
 */ 
createRPC(interfaceName, funNames) ::= <<
$funNames:{this->$it.name$_Service = new $interfaceName$_$it.name$ClientRPC("$it.name$",
                              $interfaceName$_$it.name$RequestUtils::registerType(getParticipant()),
                              $if(!it.isOneway)$
                              $interfaceName$_$it.name$ReplyUtils::registerType(getParticipant()),
                              $endif$
                              this);
}$
>>


/**
 * lastParam: Internal Template
 * Determines if the return value of the function should be included
 * in a call to RequestUtils extractTypeData method.
 * Params:
 *   params   : List of previous arguments in the function call. Nullable.
 *   type     :         function return type.
 *
 * Uses:
 *   voidInitMap - inherited(cplusplus)
 *   typeInitMap - inherited(cplusplus) 
 */ 
lastParam(params, type) ::= <<
$if(params)$
$if(!voidInitMap.(type))$, $endif$
$endif$
$if(!voidInitMap.(type))$
$if(!typeInitMap.(type))$*$endif$returnedValue$endif$
$endif$
>>
