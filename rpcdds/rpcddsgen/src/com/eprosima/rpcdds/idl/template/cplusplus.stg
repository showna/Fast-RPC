/* $Id$   *
 * (c) Copyright, eProsima, 2009.                                          *
 * All rights reserved.                                                    *    
 *                                                                         *
 * No duplications, whole or partial, manual or electronic, may be made    *
 * without express written permission.  Any such copies, or                *
 * revisions thereof, must display this notice unaltered.                  *
 * This code contains trade secrets of                                     *
 * eProsima (Proyectos y Sistemas de Mantenimiento S.L.)                   *
 *                                                                         *
 * modification history                                                    *
 * --------------------                                                    *
 * 1.0,29sep09,RodM Created                                                *
 * =====================================================================   *
 */

group cplusplus;

/************************************************************************
 *                                                                      *
 *   External Templates: Common Templates for C++ code generation       *
 *                                                                      *
 ************************************************************************
 */
 
fileHeader(file, description) ::= <<
/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file $file$
 * $description$
 *
 * This file was generated by the tool rpcddsgen.
 */
>>

/**
 * functionHeader: External Template
 * Produces a function header to be used in declaration & implementation 
 * Params:
 *   type         : function return type.
 *   inputParams  : list of input params objects.
 *   inoutParams  : list of inout params objects.
 *   outputParams : list of output params objects.
 *
 * Uses:
 *  argDecl    - local
 *  argDeclRef - local
 */ 
functionHeader(rettype,class,name,params) ::= << 
$argRetType(rettype.typeName)$ $class$$if(class)$::$endif$$name$($argsDeclOutRef(params)$)
>>

/************************************************************************
 *                                                                      *
 *   Internal Templates: For internal use only.                         *
 *                                                                      *
 ************************************************************************
 */

/**
 * typeInitMap: Internal Template
 * Maps IDL basic types to RTI DDS C types
 * returns a basic type or null so it also can be used in conditions
 * to check if a type is basic or not.
 * Params:
 *   key     :  IDL type name.
 *
 * Uses:
 */ 
typeInitMap ::= [
        default:
]

/**
 * voidInitMap: Internal Template
 * returns void or null.  To be used in conditions
 * to check if a function return type is void or not.
 * Params:
 *   key     :  IDL type name.
 *
 * Uses:
 */ 
voidInitMap ::= [
        "void":"void",
        default: // not void
]

/**
 * varDecl: Internal Template
 * Declares a variable of function Return Type if not void.
 * If it is an user defined type also initializes it using
 * PluginSupport generated by rtiddsgen
 * Params:
 *   type     : Variable type.
 *   name     : Variable name. 
 *
 * Uses:
 *   voidInitMap - local
 *   typeInitMap - local
 */ 
varDecl(typeName, baseType, name, create) ::= <<
$if(!voidInitMap.(typeName))$
$if(typeInitMap.(typeName))$
$typeInitMap.(typeName)$  $name$ = $baseType.initialValue$;
$else$
$varComplexDecl(typeName=typeName, name=name, create=create)$
$endif$
$endif$
>>

/**
 * varDel: Internal Template
 * Declares the destruction of a variable of function Return Type if not void.
 * If it is an user defined type also initializes it using
 * PluginSupport generated by rtiddsgen
 * Params:
 *   type     : Variable type.
 *   name     : Variable name. 
 *
 * Uses:
 *   voidInitMap - local
 *   typeInitMap - local
 */ 
varDel(typeName, baseType, name) ::= <<
$if(!voidInitMap.(typeName))$
$if(typeInitMap.(typeName))$
$if(baseType.isString)$
$varStringDel(name=name)$
$endif$
$else$
$varComplexDel(typeName=typeName, name=name)$
$endif$
$endif$
>>

argType(type, notIn) ::= <<
$if(typeInitMap.(type))$
$typeInitMap.(type)$$notIn$
$else$
$if(!notIn)$const $endif$$type$&
$endif$
>>

argRetType(type) ::= <<
$if(typeInitMap.(type))$
$typeInitMap.(type)$
$else$
$type$
$endif$
>>

/**
 * argDecl: Internal Template
 * Produces a function signature (type1 arg1, type2 arg2...)
 * used in function declaration & definition
 * Params:
 *   arg   : List of arguments each one has "type" and "name" properties.
 *
 * Uses:
 */ 
argDecl(arg, ref) ::= <<
$if(!voidInitMap.(arg.typeName))$
/*$arg.comment$*/ $argType(type=arg.typeName, notIn=ref)$ $arg.name$
$endif$
>>

argsDecl(args) ::= <<
$args : {arg | $argDecl(arg=arg)$}; separator=", "$
>>

argsDeclRef(args) ::= <<
$args : {arg | $argDecl(arg=arg, ref="&")$}; separator=", "$
>>

argDeclOutRef(arg) ::= <<
$if(arg.isOutput)$
$argDecl(arg=arg, ref="&")$
$else$
$argDecl(arg=arg)$
$endif$
>>

argsDeclOutRef(args) ::= <<
$args : {arg | $argDeclOutRef(arg)$}; separator=", "$
>>

/**
 * include: Internal Template
 * Produces include sentences for  Request and Reply utils header files.
 * Params:
 *   funNames   : List of function names, whose Request and Reply utils
 *                should be included.
 *
 * Uses:
 */ 
include(funNames) ::= <<
$funNames:{
#include "$it$RequestUtils.h"
#include "$it$ReplyUtils.h"
}$
>>

/**
 * varUse: Internal Template
 * Uses the variable as a parameter to a funcion call 
 * checking if ti is a pointer or not. 
 * Params:
 *   type     : Variable type.
 *   name     : Variable name. 
 *
 * Uses:
 */ 
varUse(param) ::= <<
$if(!voidInitMap.(param.typeName))$
$param.name$
$endif$
>>


/**
 * nextExtractParam: Internal Template
 * Adds arguments to a function call preceeding them by a comma
 * if there are previous arguments. 
 * Params:
 *   previous   : List of previous arguments in the function call. Nullable.
 *   params     : List of next arguments in the function call. Nullable.
 *
 * Uses:
 */ 
extractParams(params) ::= <<
$params:{$varUse(it)$};separator=", "$
>>
