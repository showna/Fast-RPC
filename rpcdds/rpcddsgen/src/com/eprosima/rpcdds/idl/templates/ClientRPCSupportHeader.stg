group ClientRPCSupportHeader;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "ClientRPCSupport.h"], description=["This header file contains the declaration of the proxy's RPC endpoints for all interfaces."])$

#ifndef _$ctx.filename;format="toUpper"$_CLIENT_RPC_SUPPORT_H_
#define _$ctx.filename;format="toUpper"$_CLIENT_RPC_SUPPORT_H_

#include "utils/GenericClientRPC.h"
$ReqRepRIncludes(filename=ctx.filename)$

$definitions; separator="\n"$

#endif  // _$ctx.filename;format="toUpper"$_CLIENT_RPC_SUPPORT_H_
>>

module(module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$if(!operation.oneway)$GENERIC_CLIENT_RPC$else$GENERIC_CLIENT_ONEWAY_RPC$endif$($operation.parent.name$_$operation.name$ClientRPC, $operation.parent.name$_$operation.name$RequestDataWriter$if(!operation.oneway)$, $operation.parent.name$_$operation.name$ReplyDataReader$endif$);

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>