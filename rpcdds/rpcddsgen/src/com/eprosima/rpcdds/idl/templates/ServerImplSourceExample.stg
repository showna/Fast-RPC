group ServerImplSourceExample;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "ServerImplExample.cxx"], description=["This source file contains an example of the declaration of a servant."])$

#include "$ctx.filename$ServerImplExample.h"
$ctx.includeDependencies : { include |#include "$include$T.h"}; separator="\n"$
$if(ctx.projectNeedTypes)$
#include "$ctx.filename$T.h"
$endif$

$definitions; separator="\n"$
>>

module(module, definition_list) ::= <<
$definition_list$

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, interface, export_list) ::= <<
$export_list$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$paramRetType(operation.rettype)$ $operation.parent.name$ServerImplExample::$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$)
{
    $if(operation.rettypeparam)$
    $varDecl(variable=operation.rettypeparam)$
    $if(!operation.rettypeparam.typecode.primitiveInArguments)$
    $varComplexInitialize(variable=operation.rettypeparam)$
    $endif$
   
    return $operation.rettypeparam.name$;
    $endif$
} 

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>