group ProxySource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "Proxy.cxx"], description=["This source file contains the definition of the proxy for all interfaces."])$

#include "$ctx.filename$Proxy.h"
#include "client/ClientRPC.h"
#include "transports/UDPTransport.h"
#include "transports/TCPTransport.h"
#include "$ctx.filename$AsyncSupport.h"
#include "exceptions/Exceptions.h"
$ReqRepIncludes(filename=ctx.filename)$

$ctx.includeDependencies : { include |#include "$include$T.h"}; separator="\n"$
$if(ctx.projectNeedTypes)$
#include "$ctx.filename$T.h"

$endif$
#include "$ctx.filename$RequestReplyUtils.h"

$definitions; separator="\n"$
>>

module(module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, interface, export_list) ::= <<
$interface.name$Proxy::$interface.name$Proxy(std::string remoteServiceName, int domainId, long timeout) :
    Client(remoteServiceName, NULL, domainId, timeout)
{
    createRPCs();
}

$interface.name$Proxy::$interface.name$Proxy(std::string remoteServiceName, eProsima::RPCDDS::Transport *transport, int domainId, long timeout) :
    Client(remoteServiceName, transport, domainId, timeout)
{
    createRPCs();
}

$interface.name$Proxy::~$interface.name$Proxy()
{
    $interface.exports : {export | $if(export.operation)$delete $export.name$_Service;$\n$$endif$}$
}

void $interface.name$Proxy::createRPCs()
{
    $interface.exports : {export | $if(export.operation)$$createRPC(operation=export)$$endif$}$
}

$export_list$

$interface.exports : {export | $if(export.operation)$$functionAsyncImpl(operation=export)$$endif$}$

>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
$paramRetType(operation.rettype)$ $operation.parent.name$Proxy::$operation.name$($paramDeclsOnlyOutByRef(params=operation.parameters)$)
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    $varDecl(variable=operation.rettypeparam)$
    $operation.parent.name$_$operation.name$Request instance;
    $if(!operation.oneway)$
    $operation.parent.name$_$operation.name$Reply retInstance;

    $varComplexInitializeT(typeName=[operation.parent.name, "_", operation.name, "Reply"], name="retInstance")$
    $endif$
    $operation.parent.name$_$operation.name$RequestUtils::setTypeData(instance$extractParams(params=operation.inputparam, separatorInicial=", ")$);
    retcode = $operation.name$_Service->execute(&instance, $if(!operation.oneway)$&retInstance$else$NULL$endif$, getTimeout());
    
    $if(!operation.oneway)$
    if(retcode == eProsima::RPCDDS::OPERATION_SUCCESSFUL)
    {
    
    $if(operation.exceptions)$
        switch (retInstance.unio._d)
        {
            case 0:
                $operation.parent.name$_$operation.name$ReplyUtils::extractTypeData(retInstance, retcode$extractParams(params=[operation.outputparam, operation.rettypeparam], separatorInicial=", ")$);
                break;
            $operation.exceptions : { exception |
            case $i$:
                {
                $exception.scopedname$ ex;
                $if(exception.inScope)$
                $exception.scopedname$Utils::extractTypeData(ex, retInstance.unio._u.$exception.name$_ex);
                
                $else$
                $operation.parent.name$_$operation.name$_$exception.name$Utils::extractTypeData(ex, retInstance.unio._u.$exception.name$_ex);
                
                $endif$
                ex.raise();
                }
            }; separator="\n"$
            default:
                throw eProsima::RPCDDS::ClientInternalException("Error extracting information from server");
        }
    $else$
        $operation.parent.name$_$operation.name$ReplyUtils::extractTypeData(retInstance, retcode$extractParams(params=[operation.outputparam, operation.rettypeparam], separatorInicial=", ")$);
    
    $endif$
    }
    
    $endif$  
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
            throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!operation.oneway)$
        case eProsima::RPCDDS::SERVER_TIMEOUT:
            throw eProsima::RPCDDS::ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case eProsima::RPCDDS::SERVER_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ServerInternalException(retInstance.header.rpcddsRetMsg$stringPointerConst()$);
            break;
        $endif$
        default:
            break;
    };
    

    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}

DDS::DataReader* $operation.parent.name$Proxy::$operation.name$_getReplyDatareader()
{
    return $operation.name$_Service->getReplyDatareader();
}

DDS::DataWriter* $operation.parent.name$Proxy::$operation.name$_getRequestDatawriter()
{
    return $operation.name$_Service->getRequestDatawriter();
}

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

/*!
 * Extra string templates.
 */
functionAsyncImpl(operation) ::= <<
$if(!operation.oneway)$
void $operation.parent.name$Proxy::$operation.name$_async($operation.parent.name$_$operation.name$CallbackHandler &obj$paramDeclsByValue(params=operation.inputparam, separatorInicial=", ")$)
{
    eProsima::RPCDDS::ReturnMessage retcode = eProsima::RPCDDS::CLIENT_INTERNAL_ERROR;
    $operation.parent.name$_$operation.name$Request instance;
    $operation.parent.name$_$operation.name$Task *task = NULL;
    $operation.parent.name$_$operation.name$RequestUtils::setTypeData(instance$extractParams(params=operation.inputparam, separatorInicial=", ")$);
    task = new $operation.parent.name$_$operation.name$Task(obj, this);
    retcode = $operation.name$_Service->executeAsync(&instance, task, getTimeout());
    
    switch (retcode)
    {
        case eProsima::RPCDDS::CLIENT_INTERNAL_ERROR:
            throw eProsima::RPCDDS::ClientInternalException("Error in client side");
            break;
        case eProsima::RPCDDS::NO_SERVER:
             throw eProsima::RPCDDS::ServerNotFoundException("Cannot connect to the server");
             break;
        default:
            break;
    }
}

$endif$
>>

createRPC(operation) ::= <<
this->$operation.name$_Service = new $operation.parent.name$_$operation.name$ClientRPC("$operation.name$",
                              $operation.parent.name$_$operation.name$RequestUtils::registerType(getParticipant()),
                              $if(!operation.oneway)$
                              $operation.parent.name$_$operation.name$ReplyUtils::registerType(getParticipant()),
                              $endif$
                              this);

>>