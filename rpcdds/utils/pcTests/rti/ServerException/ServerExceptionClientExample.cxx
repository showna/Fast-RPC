/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file ServerExceptionClientExample.cxx
 * This source file shows a simple example of how to create a proxy for an interface.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "ServerExceptionProxy.h"
#include "exceptions/Exceptions.h"
#include "ServerExceptionRequestReplyPlugin.h"

#include <iostream>

int main(int argc, char **argv)
{
    ServerExceptionProxy *proxy = new ServerExceptionProxy("ServerExceptionService");

    try
    {
        proxy->sendException();
        std::cout << "TEST FAILED<sendException>: No exception" << std::endl;
        _exit(-1);
    }
    catch(eProsima::RPCDDS::ServerInternalException &ex)
    {
        if(strcmp(ex.what(), "Testing exception") != 0)
        {
            std::cout << "TEST FAILED<sendException>: Bad exception message" << std::endl;
            _exit(-1);
        }
    }
    catch(eProsima::RPCDDS::SystemException &ex)
    {
        std::cout << "TEST FAILED<sendException>: " << ex.what() << std::endl;
        _exit(-1);
    }

    char*  s1  = DDS::String_dup("PRUEBA");       
    char*  s2  = DDS::String_dup("PRUEBA2");       
    char*  s3  = NULL;    
    char*  sendExceptionTwoRetValue = NULL;  

    try
    {
        sendExceptionTwoRetValue = proxy->sendExceptionTwo(s1, s2, s3);
        std::cout << "TEST FAILED<sendExceptionTwo>: No exception" << std::endl;
        _exit(-1);
    }
    catch(eProsima::RPCDDS::ServerInternalException &ex)
    {
        if(strcmp(ex.what(), "Testing exception") != 0)
        {
            std::cout << "TEST FAILED<sendExceptionTwo>: Bad exception message" << std::endl;
            _exit(-1);
        }
    }
    catch(eProsima::RPCDDS::SystemException &ex)
    {
        std::cout << "TEST FAILED<sendExceptionTwo>: " << ex.what() << std::endl;
        _exit(-1);
    }

    Estructura es1;
    Estructura es2;
    Estructura es3;
    Estructura sendExceptionThreeRetValue;

    Estructura_initialize(&es1);
    Estructura_initialize(&es2);

    try
    {
        sendExceptionThreeRetValue = proxy->sendExceptionThree(es1, es2, es3);
        std::cout << "TEST FAILED<sendExceptionThree>: No exception" << std::endl;
        _exit(-1);
    }
    catch(eProsima::RPCDDS::ServerInternalException &ex)
    {
        if(strcmp(ex.what(), "Testing exception") != 0)
        {
            std::cout << "TEST FAILED<sendExceptionThree>: Bad exception message" << std::endl;
            _exit(-1);
        }
    }
    catch(eProsima::RPCDDS::SystemException &ex)
    {
        std::cout << "TEST FAILED<sendExceptionThree>: " << ex.what() << std::endl;
        _exit(-1);
    }

    Estructura_finalize(&es1);
    Estructura_finalize(&es2);

    std::cout << "TEST SUCCESFULLY" << std::endl;

    delete(proxy);

	_exit(0);
    return 0;
}
