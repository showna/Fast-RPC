/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file SequenceTestServerImplExample.cxx
 * This source file contains the definition of the skeleton for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "SequenceTestServerImplExample.h"

#include "ndds_namespace_cpp.h"
 
largo SequenceTestServerImplExample::getSLong(/*in*/ const largo& l1, /*inout*/ largo& l2, /*out*/ largo& l3) 
{
    largo getSLong_ret;

	largo_initialize(&l3);
	largo_initialize(&getSLong_ret);
        
	l3.ensure_length(2, 2);
	l3[0] = l2[0];
	l3[1] = l2[1];
	getSLong_ret.ensure_length(2, 2);
	getSLong_ret[0] = l1[0];
	getSLong_ret[1] = l1[1];
	l2[0] = l1[0] + l2[0];
	l2[1] = l1[1] + l2[1];
   
    return getSLong_ret;
} 
 
cadena SequenceTestServerImplExample::getString(/*in*/ const cadena& s1, /*inout*/ cadena& s2, /*out*/ cadena& s3) 
{
    cadena getString_ret;

	cadena_initialize(&s3);
	cadena_initialize(&getString_ret);
        
	s3.ensure_length(2, 2);
	s3[0] = DDS::String_dup(s2[0]);
	s3[1] = DDS::String_dup(s2[1]);
	getString_ret.ensure_length(2, 2);
	getString_ret[0] = DDS::String_dup(s1[0]);
	getString_ret[1] = DDS::String_dup(s1[1]);
	DDS::String_free(s2[0]);
	DDS::String_free(s2[1]);
	s2[0] = DDS::String_dup(s1[0]);
	s2[1] = DDS::String_dup(s1[1]);
   
    return getString_ret;
} 
 
dattos SequenceTestServerImplExample::getStringBounded(/*in*/ const dattos& sb1, /*inout*/ dattos& sb2, /*out*/ dattos& sb3) 
{
    dattos getStringBounded_ret;

	dattos_initialize(&sb3);
	dattos_initialize(&getStringBounded_ret);
        
	sb3.ensure_length(2, 2);
	sb3[0].count = sb2[0].count;
	sb3[0].message = DDS::String_dup(sb2[0].message);
	sb3[1].count = sb2[1].count;
	sb3[1].message = DDS::String_dup(sb2[1].message);
	getStringBounded_ret.ensure_length(2, 2);
	getStringBounded_ret[0].count = sb1[0].count;
	getStringBounded_ret[0].message = DDS::String_dup(sb1[0].message);
	getStringBounded_ret[1].count = sb1[1].count;
	getStringBounded_ret[1].message = DDS::String_dup(sb1[1].message);
	sb2[0].count = sb1[0].count;
	DDS::String_free(sb2[0].message);
	sb2[0].message = DDS::String_dup(sb1[0].message);
	sb2[1].count = sb1[1].count;
	DDS::String_free(sb2[1].message);
	sb2[1].message = DDS::String_dup(sb1[1].message);
   
    return getStringBounded_ret;
} 
