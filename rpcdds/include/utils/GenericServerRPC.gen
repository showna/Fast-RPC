/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************/

#if defined(TName) && defined(TDataWriter) && defined(TDataReader) &&     \
	defined(TDataRequestTypeSupport) && defined(TDataReplyTypeSupport) && \
defined(TData)

#define concatenate(A, B)  A ## B

#define TData_Request(TData) concatenate(TData,Request)
#define TDataRequest TData_Request(TData)
#define TData_Reply(TData) concatenate(TData,Reply)
#define TDataReply TData_Reply(TData)


TName::TName(const char *rpcName, eProsima::RPCDDS::Server* server, const char *requestTypeName,
#ifndef IS_ONEWAY
		const char *replyTypeName,
#endif
		eProsima::RPCDDS::fExecFunction execFunction) :
	eProsima::RPCDDS::ServerRPC(rpcName, server, requestTypeName,
#ifndef IS_ONEWAY
			replyTypeName,
#else
			"",
#endif
			execFunction)
{
}

TName::~TName()
{
}

int TName::sendReply(void *request, void* reply)
{
	int returnedValue = -1;
#ifndef IS_ONEWAY
#if defined(RTI_WIN32) || defined(RTI_LINUX)
    TDataWriter *replyDataWriter = TDataWriter::narrow(getReplyDatawriter());
#elif defined(OPENDDS)
    TDataWriter *replyDataWriter = TDataWriter::_narrow(getReplyDatawriter());
#endif
	TDataReply   *replyData   = (TDataReply*)reply;
	TDataRequest *requestData = (TDataRequest*)request;

	if(replyData != NULL)
	{
		if(requestData != NULL)
		{
			replyData->header.clientId.value_1 = requestData->header.clientId.value_1;
			replyData->header.clientId.value_2 = requestData->header.clientId.value_2;
			replyData->header.clientId.value_3 = requestData->header.clientId.value_3;
			replyData->header.clientId.value_4 = requestData->header.clientId.value_4;
			replyData->header.requestSequenceNumber = requestData->header.requestSequenceNumber;

			if(replyDataWriter->write(*replyData, DDS::HANDLE_NIL) == DDS::RETCODE_OK)
			{
				returnedValue = 0;
			}
		}
		else
		{
			printf("ERROR <sendReply>: Bad parameter (replyData)\n");
		}
	}
	else
	{
		printf("ERROR<sendReply>: Bad parameter (requestData)\n");
	}

#endif // IS_ONEWAY
	return returnedValue;
}

void TName::deleteRequestData(void *request)
{
	TDataRequest *requestData = (TDataRequest*)request;

	if(requestData != NULL)
	{
#if defined(RTI_WIN32) || defined(RTI_LINUX)
		TDataRequestTypeSupport::delete_data(requestData);
#elif defined(OPENDDS)
		delete requestData;
#endif
	}
	else
	{
		printf("ERROR<sendReply>: Bad parameter (request)\n");
	}
}


void TName::on_data_available(DDS::DataReader* reader)
{
	DDS::SampleInfo info;
#if defined(RTI_WIN32) || defined(RTI_LINUX)
    TDataReader *requestDataReader = TDataReader::narrow(getRequestDatareader());
	TDataRequest *data = TDataRequestTypeSupport::create_data();
#elif defined(OPENDDS)
    TDataReader *requestDataReader = TDataReader::_narrow(getRequestDatareader());
	TDataRequest *data = new TDataRequest();
#endif

	while(data != NULL && requestDataReader->take_next_sample(*data, info) == DDS::RETCODE_OK)
	{
		if(info.valid_data == BOOLEAN_TRUE)
		{
			getServer()->schedule(getExecFunction(), data, this);
#if defined(RTI_WIN32) || defined(RTI_LINUX)
			data = TDataRequestTypeSupport::create_data();
#elif defined(OPENDDS)
			data = new TDataRequest();
#endif
		}
	}
	if(data != NULL){
#if defined(RTI_WIN32) || defined(RTI_LINUX)
		TDataRequestTypeSupport::delete_data(data);
#elif defined(OPENDDS)
		delete data;
#endif
	}
}



#undef concatenate

#undef TData_Request
#undef TDataRequest
#undef TData_Reply
#undef TDataReply

#endif
