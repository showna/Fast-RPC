/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of RPCDDS is licensed to you under the terms described in the
 * RPCDDS_LICENSE file included in this distribution.
 *
 *************************************************************************
 * 
 * @file CalculatorRequestReplyUtils.cxx
 * This source file contains the definition of helpful functions for the DDS messages for interface Calculator.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorRequestReplyUtils.h"
#include "CalculatorRequestReplyPlugin.h"


const char* Calculator_additionRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = Calculator_additionRequestTypeSupport::get_type_name();

        if(Calculator_additionRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_additionRequestUtils::setTypeData(Calculator_additionRequest& instance, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    instance.value1 = value1;
    instance.value2 = value2;
    
}

void Calculator_additionRequestUtils::extractTypeData(Calculator_additionRequest& data, /*in*/ DDS_Long& value1, /*in*/ DDS_Long& value2)
{
    value1 = data.value1;
    value2 = data.value2;  
    
}


const char* Calculator_additionReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = Calculator_additionReplyTypeSupport::get_type_name();

        if(Calculator_additionReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_additionReplyUtils::setTypeData(Calculator_additionReply& instance, /*out*/ DDS_Long addition_ret)
{
    instance.addition_ret = addition_ret;            
}

void Calculator_additionReplyUtils::extractTypeData(Calculator_additionReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& addition_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    addition_ret = data.addition_ret;            
}


const char* Calculator_subtractionRequestUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = Calculator_subtractionRequestTypeSupport::get_type_name();

        if(Calculator_subtractionRequestTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_subtractionRequestUtils::setTypeData(Calculator_subtractionRequest& instance, /*in*/ DDS_Long value1, /*in*/ DDS_Long value2)
{
    instance.value1 = value1;
    instance.value2 = value2;
    
}

void Calculator_subtractionRequestUtils::extractTypeData(Calculator_subtractionRequest& data, /*in*/ DDS_Long& value1, /*in*/ DDS_Long& value2)
{
    value1 = data.value1;
    value2 = data.value2;  
    
}


const char* Calculator_subtractionReplyUtils::registerType(DDS::DomainParticipant *participant)
{
    const char *typeName = NULL;

    if(participant != NULL)
    {
        typeName = Calculator_subtractionReplyTypeSupport::get_type_name();

        if(Calculator_subtractionReplyTypeSupport::register_type(participant, typeName) != DDS::RETCODE_OK)
        {
            return NULL;
        }
    }

    return typeName;
}

void Calculator_subtractionReplyUtils::setTypeData(Calculator_subtractionReply& instance, /*out*/ DDS_Long subtraction_ret)
{
    instance.subtraction_ret = subtraction_ret;            
}

void Calculator_subtractionReplyUtils::extractTypeData(Calculator_subtractionReply& data, eProsima::RPCDDS::ReturnMessage& retcode, /*out*/ DDS_Long& subtraction_ret)
{
retcode = (eProsima::RPCDDS::ReturnMessage)data.header.rpcddsRetCode;
  
    subtraction_ret = data.subtraction_ret;            
}

 