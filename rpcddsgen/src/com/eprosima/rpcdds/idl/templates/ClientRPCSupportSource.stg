group ClientRPCSupportSource;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "ClientRPCSupport.cxx"], description=["This source file contains the definition of the proxy's RPC endpoints for all interfaces."])$

#include "$ctx.filename$ClientRPCSupport.h"

$definitions; separator="\n"$
>>

module(module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<>>

operation(ctx, operation, param_list) ::= <<
/* Defines */
#define TName            $operation.parent.name$_$operation.name$ClientRPC
#define TDataTypeSupport $operation.parent.name$_$operation.name$ReplyTypeSupport
#define TData            $operation.parent.name$_$operation.name$
#define TDataSeq         $operation.parent.name$_$operation.name$ReplySeq
#define TDataReader      $operation.parent.name$_$operation.name$ReplyDataReader
#define TDataWriter      $operation.parent.name$_$operation.name$RequestDataWriter
$if(operation.oneway)$#define IS_ONEWAY$endif$


#include "utils/GenericClientRPC.gen"


#undef TName
#undef TDataTypeSupport
#undef TData
#undef TDataSeq
#undef TDataReader
#undef TDataWriter
$if(operation.oneway)$#undef IS_ONEWAY$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>