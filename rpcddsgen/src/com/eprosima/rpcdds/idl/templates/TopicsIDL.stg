group TopicsIDL;

main(ctx, definitions) ::= <<
$fileHeader(file=[ctx.filename, "RequestReply.idl"], description=["This IDL file contains the definition of the DDS messages for all defined interfaces by the user."])$

#include "MessageHeader.idl"
#include "$ctx.filename$.idl"

$definitions; separator="\n"$
>>

module(module, definition_list) ::= <<
$if(module.thereAraValidDefinitions)$
module $module.name$
{
    $definition_list$
};

$endif$
>>

definition_list(definitions) ::= <<
$definitions; separator="\n"$
>>

interface(ctx, interface, export_list) ::= <<
$export_list$
>>

export_list(exports) ::= <<
$exports; separator="\n"$
>>

exception(ctx, exception) ::= <<
/**
 * Structure that encapsulates the exception $exception.scopedname$.
 */
struct $exception.name$_t{
   $exception.members:{member | $member.typecode.typename$ $member.name$;}; separator="\n"$
}; $nolevelIDLdefine()$
>>

operation(ctx, operation, param_list) ::= <<
$operation.exceptions : { exception | $if(!exception.inScope)$$createExceptionStruct(operation=operation, exception=exception)$$endif$}; separator="\n"$

$preRepIDLDefines(name=[operation.parent.name, "_", operation.name])$
/**
 * Topic used to receive/send requests for the procedure $operation.name$.
 */
struct $operation.parent.name$_$operation.name$Request{
    RequestHeader header;
    $operation.inputparam : {$it.typecode.typename$ $it.name$;};separator="\n"$
}; $levelIDLdefine()$

$if(!operation.oneway)$
$if(operation.exceptions)$
$if([operation.outputparam, operation.rettype])$
struct  $operation.parent.name$_$operation.name$Reply_st
{
   $operation.outputparam : {$it.typecode.typename$ $it.name$;};separator="\n"$
   $if(operation.rettype)$$operation.rettype.typename$ $operation.name$_ret;$endif$
}; $nolevelIDLdefine()$
$endif$

union $operation.parent.name$_$operation.name$Reply_union switch (long)
{
$if([operation.outputparam, operation.rettype])$
   case  0:
      $operation.parent.name$_$operation.name$Reply_st st;
$endif$
   $operation.exceptions : { exception |
   case $i$:
      $if(exception.inScope)$
      $exception.scopedname$_t $exception.name$_ex;
      
      $else$
      $operation.parent.name$_$operation.name$_$exception.name$_t $exception.name$_ex;
      
      $endif$
   }; separator="\n"$
}; $nolevelIDLdefine()$

$endif$
$preRepIDLDefines(name=[operation.parent.name, "_", operation.name])$
/**
 * Topic used to receive/send replies for the procedure $operation.name$.
 */
struct $operation.parent.name$_$operation.name$Reply{
    ReplyHeader header;
$if(operation.exceptions)$
    $operation.parent.name$_$operation.name$Reply_union unio;
    
$else$
    $operation.outputparam : {$it.typecode.typename$ $it.name$;};separator="\n"$
    $if(operation.rettype)$$operation.rettype.typename$ $operation.name$_ret;$endif$
    
$endif$
}; $levelIDLdefine()$
$endif$

>>

param_list(parameters) ::= <<>>

param(parameter) ::= <<>>

type_declarator(ctx, typedefs) ::= <<>>

struct_type(ctx, struct) ::= <<>>

union_type(ctx, union) ::= <<>>

enum_type(ctx, enum) ::= <<>>

// Utils

createExceptionStruct(operation, exception) ::= <<
/**
 * Structure that encapsulates the exception $exception.scopedname$.
 */
struct $operation.parent.name$_$operation.name$_$exception.name$_t{
   $exception.members:{member | $member.typecode.typename$ $member.name$;}; separator="\n"$
}; $nolevelIDLdefine()$

>>